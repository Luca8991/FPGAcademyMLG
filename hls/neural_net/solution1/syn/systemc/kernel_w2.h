// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __kernel_w2_H__
#define __kernel_w2_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct kernel_w2_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 128;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(kernel_w2_ram) {
        ram[0] = "0b10111110100011001000000011010110";
        ram[1] = "0b10111111110101111110001010000101";
        ram[2] = "0b10111111010000010101110101011011";
        ram[3] = "0b00111111100010100011011100011111";
        ram[4] = "0b10111110101111001011111011110101";
        ram[5] = "0b10111111011111101000011100000011";
        ram[6] = "0b10111110101010111010011010001011";
        ram[7] = "0b10111111011111111110001111011011";
        ram[8] = "0b00111110111000101100010101100111";
        ram[9] = "0b10111111110000001100001010011001";
        ram[10] = "0b00111110100111101011100110110111";
        ram[11] = "0b10111101110100100100010111111110";
        ram[12] = "0b00111111001111011101100001010101";
        ram[13] = "0b00111111000010111111110010100000";
        ram[14] = "0b10111111111111010111111010011101";
        ram[15] = "0b00111111010011011110111000101100";
        ram[16] = "0b10111101010111111000011111111100";
        ram[17] = "0b10111110101010011110010111101001";
        ram[18] = "0b10111110110001011001001110010000";
        ram[19] = "0b10111111000101100010110000000101";
        ram[20] = "0b10111111010100000011000111101000";
        ram[21] = "0b00111101000011011001101101011001";
        ram[22] = "0b10111110100111111100101101011101";
        ram[23] = "0b10111110001011010111000011010010";
        ram[24] = "0b00111010101000001000100000101111";
        ram[25] = "0b10111110001000111011110111100111";
        ram[26] = "0b10111110000101101001000010111110";
        ram[27] = "0b00111110101111000001111000110110";
        ram[28] = "0b00111101101011011101100011011001";
        ram[29] = "0b00111110110011110100010101010110";
        ram[30] = "0b10111011100111000000000001110000";
        ram[31] = "0b00111110100111110011000110111011";
        ram[32] = "0b00111111001010011000110100101111";
        ram[33] = "0b10111101110111010011101110110101";
        ram[34] = "0b10111111101100010100110111010011";
        ram[35] = "0b10111111101010100010100000111011";
        ram[36] = "0b00111101000100110010000011111000";
        ram[37] = "0b10111111011010010001101100111000";
        ram[38] = "0b00111111110000011100100101010001";
        ram[39] = "0b10111101111000011110101010100111";
        ram[40] = "0b00111110110100110011111001100000";
        ram[41] = "0b10111110011010010111111000010001";
        ram[42] = "0b00111111000001110100101111110010";
        ram[43] = "0b00111110100001111111010111000101";
        ram[44] = "0b10111110101111011100010110011001";
        ram[45] = "0b10111111001011100010100101100111";
        ram[46] = "0b00111101000011110000011111001110";
        ram[47] = "0b10111111100100101010001001100111";
        ram[48] = "0b00111110101010110100110100101101";
        ram[49] = "0b00111111000001011010100000110111";
        ram[50] = "0b10111101000010110010101111111111";
        ram[51] = "0b10111100101100001011101011100011";
        ram[52] = "0b10111110010101001110001010111100";
        ram[53] = "0b10111101010110001100011001000101";
        ram[54] = "0b10111101110110010011101000110000";
        ram[55] = "0b00111110010101111111011110101011";
        ram[56] = "0b10111110101110110111100110011100";
        ram[57] = "0b10111110111110010100001101001000";
        ram[58] = "0b10111101000000110010010011110100";
        ram[59] = "0b10111110010100011001100111110111";
        ram[60] = "0b00111101000010110010111100010001";
        ram[61] = "0b00111110101101011110000011110100";
        ram[62] = "0b10111110110011001011000001001001";
        ram[63] = "0b10111110010010100100110101100101";
        ram[64] = "0b10111101101010001001011101000100";
        ram[65] = "0b10111111110110011110111110110101";
        ram[66] = "0b00111110100010010010111000010001";
        ram[67] = "0b00111111110100110101010000101100";
        ram[68] = "0b00111111011110000101000000001001";
        ram[69] = "0b10111110100000000010010111111100";
        ram[70] = "0b10111111010010000111100111011100";
        ram[71] = "0b10111110101001011101101100001000";
        ram[72] = "0b10111111100100111001001000100101";
        ram[73] = "0b00111111110001100100010010100111";
        ram[74] = "0b10111111010000111110010010101101";
        ram[75] = "0b10111111100001110111001101011101";
        ram[76] = "0b10111101010011000111000011100110";
        ram[77] = "0b10111111100000000101100111111101";
        ram[78] = "0b10111111001110010011110010110111";
        ram[79] = "0b00111111111011101001101001111011";
        ram[80] = "0b00111110100100110110111101000011";
        ram[81] = "0b00111111000000001100001011010100";
        ram[82] = "0b10111111001001100110110010111010";
        ram[83] = "0b00111101000011110110010000011101";
        ram[84] = "0b00111111001010100000110000001000";
        ram[85] = "0b10111110100001110101001011101000";
        ram[86] = "0b10111111001101011100100100101000";
        ram[87] = "0b00111110010011110111001000010000";
        ram[88] = "0b10111110101110000001101001000100";
        ram[89] = "0b10111110111101110111001010011101";
        ram[90] = "0b00111110110000000110100101110011";
        ram[91] = "0b10111101101111110011010101110111";
        ram[92] = "0b10111111000110111110100100111001";
        ram[93] = "0b10111110100101011010101101111101";
        ram[94] = "0b10111101001000010011101001101001";
        ram[95] = "0b10111101101010011111010000010101";
        ram[96] = "0b10111101110100110111010101100010";
        ram[97] = "0b10111111101011011001111011101111";
        ram[98] = "0b10111111100010000001100000010110";
        ram[99] = "0b00111111011010100011000101101110";
        ram[100] = "0b10111101111101010001000111111101";
        ram[101] = "0b10111111100001001110100101111001";
        ram[102] = "0b00111110011000110010010111001000";
        ram[103] = "0b00111111100111011110000011110010";
        ram[104] = "0b00111110111101101111110001010001";
        ram[105] = "0b10111111100010000010110101111011";
        ram[106] = "0b10111110100111101101100110011101";
        ram[107] = "0b10111111001011000101011011011101";
        ram[108] = "0b10111111001001101000101101100110";
        ram[109] = "0b00111111111101101101000111101010";
        ram[110] = "0b00111111001000100000011001000000";
        ram[111] = "0b00111111110101101001111010011111";
        ram[112] = "0b00111111111101000011011100011000";
        ram[113] = "0b00111101000001111111001000011100";
        ram[114] = "0b00111101110111100010000000111001";
        ram[115] = "0b10111111100011100101000100011000";
        ram[116] = "0b01000000000011010000000010110111";
        ram[117] = "0b10111111100011101000100100110010";
        ram[118] = "0b00111111110100000101010001111101";
        ram[119] = "0b10111100001101011011001100001010";
        ram[120] = "0b00111110010101111001000000110100";
        ram[121] = "0b10111110011110000110101101110011";
        ram[122] = "0b10111111000110110010100111100100";
        ram[123] = "0b00111111001111110010110100010010";
        ram[124] = "0b10111110111101110001101011001100";
        ram[125] = "0b10111100100100001101000010000100";
        ram[126] = "0b11000000000000001000111011010111";
        ram[127] = "0b00111110110011011011001001000101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(kernel_w2) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 128;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


kernel_w2_ram* meminst;


SC_CTOR(kernel_w2) {
meminst = new kernel_w2_ram("kernel_w2_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~kernel_w2() {
    delete meminst;
}


};//endmodule
#endif
