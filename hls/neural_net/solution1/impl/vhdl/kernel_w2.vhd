-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity kernel_w2_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of kernel_w2_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110100011001000000011010110", 
    1 => "10111111110101111110001010000101", 
    2 => "10111111010000010101110101011011", 
    3 => "00111111100010100011011100011111", 
    4 => "10111110101111001011111011110101", 
    5 => "10111111011111101000011100000011", 
    6 => "10111110101010111010011010001011", 
    7 => "10111111011111111110001111011011", 
    8 => "00111110111000101100010101100111", 
    9 => "10111111110000001100001010011001", 
    10 => "00111110100111101011100110110111", 
    11 => "10111101110100100100010111111110", 
    12 => "00111111001111011101100001010101", 
    13 => "00111111000010111111110010100000", 
    14 => "10111111111111010111111010011101", 
    15 => "00111111010011011110111000101100", 
    16 => "10111101010111111000011111111100", 
    17 => "10111110101010011110010111101001", 
    18 => "10111110110001011001001110010000", 
    19 => "10111111000101100010110000000101", 
    20 => "10111111010100000011000111101000", 
    21 => "00111101000011011001101101011001", 
    22 => "10111110100111111100101101011101", 
    23 => "10111110001011010111000011010010", 
    24 => "00111010101000001000100000101111", 
    25 => "10111110001000111011110111100111", 
    26 => "10111110000101101001000010111110", 
    27 => "00111110101111000001111000110110", 
    28 => "00111101101011011101100011011001", 
    29 => "00111110110011110100010101010110", 
    30 => "10111011100111000000000001110000", 
    31 => "00111110100111110011000110111011", 
    32 => "00111111001010011000110100101111", 
    33 => "10111101110111010011101110110101", 
    34 => "10111111101100010100110111010011", 
    35 => "10111111101010100010100000111011", 
    36 => "00111101000100110010000011111000", 
    37 => "10111111011010010001101100111000", 
    38 => "00111111110000011100100101010001", 
    39 => "10111101111000011110101010100111", 
    40 => "00111110110100110011111001100000", 
    41 => "10111110011010010111111000010001", 
    42 => "00111111000001110100101111110010", 
    43 => "00111110100001111111010111000101", 
    44 => "10111110101111011100010110011001", 
    45 => "10111111001011100010100101100111", 
    46 => "00111101000011110000011111001110", 
    47 => "10111111100100101010001001100111", 
    48 => "00111110101010110100110100101101", 
    49 => "00111111000001011010100000110111", 
    50 => "10111101000010110010101111111111", 
    51 => "10111100101100001011101011100011", 
    52 => "10111110010101001110001010111100", 
    53 => "10111101010110001100011001000101", 
    54 => "10111101110110010011101000110000", 
    55 => "00111110010101111111011110101011", 
    56 => "10111110101110110111100110011100", 
    57 => "10111110111110010100001101001000", 
    58 => "10111101000000110010010011110100", 
    59 => "10111110010100011001100111110111", 
    60 => "00111101000010110010111100010001", 
    61 => "00111110101101011110000011110100", 
    62 => "10111110110011001011000001001001", 
    63 => "10111110010010100100110101100101", 
    64 => "10111101101010001001011101000100", 
    65 => "10111111110110011110111110110101", 
    66 => "00111110100010010010111000010001", 
    67 => "00111111110100110101010000101100", 
    68 => "00111111011110000101000000001001", 
    69 => "10111110100000000010010111111100", 
    70 => "10111111010010000111100111011100", 
    71 => "10111110101001011101101100001000", 
    72 => "10111111100100111001001000100101", 
    73 => "00111111110001100100010010100111", 
    74 => "10111111010000111110010010101101", 
    75 => "10111111100001110111001101011101", 
    76 => "10111101010011000111000011100110", 
    77 => "10111111100000000101100111111101", 
    78 => "10111111001110010011110010110111", 
    79 => "00111111111011101001101001111011", 
    80 => "00111110100100110110111101000011", 
    81 => "00111111000000001100001011010100", 
    82 => "10111111001001100110110010111010", 
    83 => "00111101000011110110010000011101", 
    84 => "00111111001010100000110000001000", 
    85 => "10111110100001110101001011101000", 
    86 => "10111111001101011100100100101000", 
    87 => "00111110010011110111001000010000", 
    88 => "10111110101110000001101001000100", 
    89 => "10111110111101110111001010011101", 
    90 => "00111110110000000110100101110011", 
    91 => "10111101101111110011010101110111", 
    92 => "10111111000110111110100100111001", 
    93 => "10111110100101011010101101111101", 
    94 => "10111101001000010011101001101001", 
    95 => "10111101101010011111010000010101", 
    96 => "10111101110100110111010101100010", 
    97 => "10111111101011011001111011101111", 
    98 => "10111111100010000001100000010110", 
    99 => "00111111011010100011000101101110", 
    100 => "10111101111101010001000111111101", 
    101 => "10111111100001001110100101111001", 
    102 => "00111110011000110010010111001000", 
    103 => "00111111100111011110000011110010", 
    104 => "00111110111101101111110001010001", 
    105 => "10111111100010000010110101111011", 
    106 => "10111110100111101101100110011101", 
    107 => "10111111001011000101011011011101", 
    108 => "10111111001001101000101101100110", 
    109 => "00111111111101101101000111101010", 
    110 => "00111111001000100000011001000000", 
    111 => "00111111110101101001111010011111", 
    112 => "00111111111101000011011100011000", 
    113 => "00111101000001111111001000011100", 
    114 => "00111101110111100010000000111001", 
    115 => "10111111100011100101000100011000", 
    116 => "01000000000011010000000010110111", 
    117 => "10111111100011101000100100110010", 
    118 => "00111111110100000101010001111101", 
    119 => "10111100001101011011001100001010", 
    120 => "00111110010101111001000000110100", 
    121 => "10111110011110000110101101110011", 
    122 => "10111111000110110010100111100100", 
    123 => "00111111001111110010110100010010", 
    124 => "10111110111101110001101011001100", 
    125 => "10111100100100001101000010000100", 
    126 => "11000000000000001000111011010111", 
    127 => "00111110110011011011001001000101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity kernel_w2 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of kernel_w2 is
    component kernel_w2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    kernel_w2_rom_U :  component kernel_w2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


