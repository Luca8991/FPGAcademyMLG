// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kernel,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.341950,HLS_SYN_LAT=84201,HLS_SYN_TPT=none,HLS_SYN_MEM=38,HLS_SYN_DSP=44,HLS_SYN_FF=5973,HLS_SYN_LUT=6038,HLS_VERSION=2019_2}" *)

module kernel (
        ap_clk,
        ap_rst_n,
        m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY,
        m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY,
        m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST,
        m_axi_gmem0_WID,
        m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST,
        m_axi_gmem0_RID,
        m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID,
        m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP,
        m_axi_gmem0_BID,
        m_axi_gmem0_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 144'd1;
parameter    ap_ST_fsm_state2 = 144'd2;
parameter    ap_ST_fsm_state3 = 144'd4;
parameter    ap_ST_fsm_state4 = 144'd8;
parameter    ap_ST_fsm_state5 = 144'd16;
parameter    ap_ST_fsm_state6 = 144'd32;
parameter    ap_ST_fsm_state7 = 144'd64;
parameter    ap_ST_fsm_state8 = 144'd128;
parameter    ap_ST_fsm_pp0_stage0 = 144'd256;
parameter    ap_ST_fsm_pp0_stage1 = 144'd512;
parameter    ap_ST_fsm_pp0_stage2 = 144'd1024;
parameter    ap_ST_fsm_pp0_stage3 = 144'd2048;
parameter    ap_ST_fsm_pp0_stage4 = 144'd4096;
parameter    ap_ST_fsm_state55 = 144'd8192;
parameter    ap_ST_fsm_state56 = 144'd16384;
parameter    ap_ST_fsm_state57 = 144'd32768;
parameter    ap_ST_fsm_pp1_stage0 = 144'd65536;
parameter    ap_ST_fsm_pp1_stage1 = 144'd131072;
parameter    ap_ST_fsm_pp1_stage2 = 144'd262144;
parameter    ap_ST_fsm_pp1_stage3 = 144'd524288;
parameter    ap_ST_fsm_pp1_stage4 = 144'd1048576;
parameter    ap_ST_fsm_state104 = 144'd2097152;
parameter    ap_ST_fsm_state105 = 144'd4194304;
parameter    ap_ST_fsm_pp2_stage0 = 144'd8388608;
parameter    ap_ST_fsm_pp2_stage1 = 144'd16777216;
parameter    ap_ST_fsm_pp2_stage2 = 144'd33554432;
parameter    ap_ST_fsm_pp2_stage3 = 144'd67108864;
parameter    ap_ST_fsm_pp2_stage4 = 144'd134217728;
parameter    ap_ST_fsm_state117 = 144'd268435456;
parameter    ap_ST_fsm_state118 = 144'd536870912;
parameter    ap_ST_fsm_state119 = 144'd1073741824;
parameter    ap_ST_fsm_state120 = 144'd2147483648;
parameter    ap_ST_fsm_state121 = 144'd4294967296;
parameter    ap_ST_fsm_state122 = 144'd8589934592;
parameter    ap_ST_fsm_state123 = 144'd17179869184;
parameter    ap_ST_fsm_state124 = 144'd34359738368;
parameter    ap_ST_fsm_state125 = 144'd68719476736;
parameter    ap_ST_fsm_state126 = 144'd137438953472;
parameter    ap_ST_fsm_state127 = 144'd274877906944;
parameter    ap_ST_fsm_state128 = 144'd549755813888;
parameter    ap_ST_fsm_state129 = 144'd1099511627776;
parameter    ap_ST_fsm_state130 = 144'd2199023255552;
parameter    ap_ST_fsm_state131 = 144'd4398046511104;
parameter    ap_ST_fsm_state132 = 144'd8796093022208;
parameter    ap_ST_fsm_state133 = 144'd17592186044416;
parameter    ap_ST_fsm_state134 = 144'd35184372088832;
parameter    ap_ST_fsm_state135 = 144'd70368744177664;
parameter    ap_ST_fsm_state136 = 144'd140737488355328;
parameter    ap_ST_fsm_state137 = 144'd281474976710656;
parameter    ap_ST_fsm_state138 = 144'd562949953421312;
parameter    ap_ST_fsm_state139 = 144'd1125899906842624;
parameter    ap_ST_fsm_state140 = 144'd2251799813685248;
parameter    ap_ST_fsm_state141 = 144'd4503599627370496;
parameter    ap_ST_fsm_state142 = 144'd9007199254740992;
parameter    ap_ST_fsm_state143 = 144'd18014398509481984;
parameter    ap_ST_fsm_state144 = 144'd36028797018963968;
parameter    ap_ST_fsm_state145 = 144'd72057594037927936;
parameter    ap_ST_fsm_state146 = 144'd144115188075855872;
parameter    ap_ST_fsm_state147 = 144'd288230376151711744;
parameter    ap_ST_fsm_state148 = 144'd576460752303423488;
parameter    ap_ST_fsm_state149 = 144'd1152921504606846976;
parameter    ap_ST_fsm_state150 = 144'd2305843009213693952;
parameter    ap_ST_fsm_state151 = 144'd4611686018427387904;
parameter    ap_ST_fsm_state152 = 144'd9223372036854775808;
parameter    ap_ST_fsm_pp3_stage0 = 144'd18446744073709551616;
parameter    ap_ST_fsm_pp3_stage1 = 144'd36893488147419103232;
parameter    ap_ST_fsm_pp3_stage2 = 144'd73786976294838206464;
parameter    ap_ST_fsm_pp3_stage3 = 144'd147573952589676412928;
parameter    ap_ST_fsm_pp3_stage4 = 144'd295147905179352825856;
parameter    ap_ST_fsm_state164 = 144'd590295810358705651712;
parameter    ap_ST_fsm_state165 = 144'd1180591620717411303424;
parameter    ap_ST_fsm_state166 = 144'd2361183241434822606848;
parameter    ap_ST_fsm_state167 = 144'd4722366482869645213696;
parameter    ap_ST_fsm_state168 = 144'd9444732965739290427392;
parameter    ap_ST_fsm_state169 = 144'd18889465931478580854784;
parameter    ap_ST_fsm_state170 = 144'd37778931862957161709568;
parameter    ap_ST_fsm_state171 = 144'd75557863725914323419136;
parameter    ap_ST_fsm_state172 = 144'd151115727451828646838272;
parameter    ap_ST_fsm_state173 = 144'd302231454903657293676544;
parameter    ap_ST_fsm_state174 = 144'd604462909807314587353088;
parameter    ap_ST_fsm_state175 = 144'd1208925819614629174706176;
parameter    ap_ST_fsm_state176 = 144'd2417851639229258349412352;
parameter    ap_ST_fsm_state177 = 144'd4835703278458516698824704;
parameter    ap_ST_fsm_state178 = 144'd9671406556917033397649408;
parameter    ap_ST_fsm_state179 = 144'd19342813113834066795298816;
parameter    ap_ST_fsm_state180 = 144'd38685626227668133590597632;
parameter    ap_ST_fsm_state181 = 144'd77371252455336267181195264;
parameter    ap_ST_fsm_state182 = 144'd154742504910672534362390528;
parameter    ap_ST_fsm_state183 = 144'd309485009821345068724781056;
parameter    ap_ST_fsm_state184 = 144'd618970019642690137449562112;
parameter    ap_ST_fsm_state185 = 144'd1237940039285380274899124224;
parameter    ap_ST_fsm_state186 = 144'd2475880078570760549798248448;
parameter    ap_ST_fsm_state187 = 144'd4951760157141521099596496896;
parameter    ap_ST_fsm_state188 = 144'd9903520314283042199192993792;
parameter    ap_ST_fsm_state189 = 144'd19807040628566084398385987584;
parameter    ap_ST_fsm_state190 = 144'd39614081257132168796771975168;
parameter    ap_ST_fsm_state191 = 144'd79228162514264337593543950336;
parameter    ap_ST_fsm_state192 = 144'd158456325028528675187087900672;
parameter    ap_ST_fsm_state193 = 144'd316912650057057350374175801344;
parameter    ap_ST_fsm_state194 = 144'd633825300114114700748351602688;
parameter    ap_ST_fsm_state195 = 144'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state196 = 144'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state197 = 144'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state198 = 144'd10141204801825835211973625643008;
parameter    ap_ST_fsm_pp4_stage0 = 144'd20282409603651670423947251286016;
parameter    ap_ST_fsm_pp4_stage1 = 144'd40564819207303340847894502572032;
parameter    ap_ST_fsm_pp4_stage2 = 144'd81129638414606681695789005144064;
parameter    ap_ST_fsm_pp4_stage3 = 144'd162259276829213363391578010288128;
parameter    ap_ST_fsm_pp4_stage4 = 144'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state208 = 144'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state209 = 144'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state210 = 144'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state211 = 144'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state212 = 144'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state213 = 144'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state214 = 144'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state215 = 144'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state216 = 144'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state217 = 144'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state218 = 144'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state219 = 144'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state220 = 144'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state221 = 144'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state222 = 144'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state223 = 144'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state224 = 144'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state225 = 144'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state226 = 144'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state227 = 144'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state228 = 144'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state229 = 144'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state230 = 144'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state231 = 144'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state232 = 144'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state233 = 144'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state234 = 144'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state235 = 144'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state236 = 144'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state237 = 144'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state238 = 144'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state239 = 144'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state240 = 144'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state241 = 144'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state242 = 144'd11150372599265311570767859136324180752990208;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM0_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM0_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM0_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM0_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_USER_VALUE = 0;
parameter    C_M_AXI_GMEM0_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM0_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM0_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem0_AWVALID;
input   m_axi_gmem0_AWREADY;
output  [C_M_AXI_GMEM0_ADDR_WIDTH - 1:0] m_axi_gmem0_AWADDR;
output  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_AWID;
output  [7:0] m_axi_gmem0_AWLEN;
output  [2:0] m_axi_gmem0_AWSIZE;
output  [1:0] m_axi_gmem0_AWBURST;
output  [1:0] m_axi_gmem0_AWLOCK;
output  [3:0] m_axi_gmem0_AWCACHE;
output  [2:0] m_axi_gmem0_AWPROT;
output  [3:0] m_axi_gmem0_AWQOS;
output  [3:0] m_axi_gmem0_AWREGION;
output  [C_M_AXI_GMEM0_AWUSER_WIDTH - 1:0] m_axi_gmem0_AWUSER;
output   m_axi_gmem0_WVALID;
input   m_axi_gmem0_WREADY;
output  [C_M_AXI_GMEM0_DATA_WIDTH - 1:0] m_axi_gmem0_WDATA;
output  [C_M_AXI_GMEM0_WSTRB_WIDTH - 1:0] m_axi_gmem0_WSTRB;
output   m_axi_gmem0_WLAST;
output  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_WID;
output  [C_M_AXI_GMEM0_WUSER_WIDTH - 1:0] m_axi_gmem0_WUSER;
output   m_axi_gmem0_ARVALID;
input   m_axi_gmem0_ARREADY;
output  [C_M_AXI_GMEM0_ADDR_WIDTH - 1:0] m_axi_gmem0_ARADDR;
output  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_ARID;
output  [7:0] m_axi_gmem0_ARLEN;
output  [2:0] m_axi_gmem0_ARSIZE;
output  [1:0] m_axi_gmem0_ARBURST;
output  [1:0] m_axi_gmem0_ARLOCK;
output  [3:0] m_axi_gmem0_ARCACHE;
output  [2:0] m_axi_gmem0_ARPROT;
output  [3:0] m_axi_gmem0_ARQOS;
output  [3:0] m_axi_gmem0_ARREGION;
output  [C_M_AXI_GMEM0_ARUSER_WIDTH - 1:0] m_axi_gmem0_ARUSER;
input   m_axi_gmem0_RVALID;
output   m_axi_gmem0_RREADY;
input  [C_M_AXI_GMEM0_DATA_WIDTH - 1:0] m_axi_gmem0_RDATA;
input   m_axi_gmem0_RLAST;
input  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_RID;
input  [C_M_AXI_GMEM0_RUSER_WIDTH - 1:0] m_axi_gmem0_RUSER;
input  [1:0] m_axi_gmem0_RRESP;
input   m_axi_gmem0_BVALID;
output   m_axi_gmem0_BREADY;
input  [1:0] m_axi_gmem0_BRESP;
input  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_BID;
input  [C_M_AXI_GMEM0_BUSER_WIDTH - 1:0] m_axi_gmem0_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [143:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] op;
reg    res_ap_vld;
wire   [3:0] b1_address0;
reg    b1_ce0;
wire   [31:0] b1_q0;
wire   [13:0] w1_address0;
reg    w1_ce0;
wire   [31:0] w1_q0;
wire   [2:0] b2_address0;
reg    b2_ce0;
wire   [31:0] b2_q0;
wire   [6:0] w2_address0;
reg    w2_ce0;
wire   [31:0] w2_q0;
wire   [4:0] w3_address0;
reg    w3_ce0;
wire   [31:0] w3_q0;
wire   [2:0] w4_address0;
reg    w4_ce0;
wire   [31:0] w4_q0;
reg    gmem0_blk_n_AR;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln28_fu_561_p2;
reg    gmem0_blk_n_R;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln30_reg_946;
wire    gmem0_AWREADY;
wire    gmem0_WREADY;
reg    gmem0_ARVALID;
wire    gmem0_ARREADY;
wire    gmem0_RVALID;
reg    gmem0_RREADY;
wire   [31:0] gmem0_RDATA;
wire    gmem0_RLAST;
wire   [0:0] gmem0_RID;
wire   [0:0] gmem0_RUSER;
wire   [1:0] gmem0_RRESP;
wire    gmem0_BVALID;
wire   [1:0] gmem0_BRESP;
wire   [0:0] gmem0_BID;
wire   [0:0] gmem0_BUSER;
reg   [31:0] empty_6_reg_339;
reg   [10:0] j_0_reg_349;
reg   [31:0] empty_11_reg_371;
reg   [4:0] j2_0_reg_381;
reg   [31:0] empty_16_reg_403;
reg   [3:0] j4_0_reg_413;
reg   [31:0] empty_21_reg_459;
reg   [2:0] j6_0_reg_469;
reg   [31:0] res_t_0_reg_480;
reg   [1:0] j7_0_reg_492;
wire   [31:0] grp_fu_523_p2;
reg   [31:0] reg_527;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state9_pp0_stage0_iter0;
wire    ap_block_state14_pp0_stage0_iter1;
wire    ap_block_state19_pp0_stage0_iter2;
wire    ap_block_state24_pp0_stage0_iter3;
wire    ap_block_state29_pp0_stage0_iter4;
wire    ap_block_state34_pp0_stage0_iter5;
wire    ap_block_state39_pp0_stage0_iter6;
wire    ap_block_state44_pp0_stage0_iter7;
wire    ap_block_state49_pp0_stage0_iter8;
wire    ap_block_state54_pp0_stage0_iter9;
wire    ap_block_pp0_stage0_11001;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_state58_pp1_stage0_iter0;
wire    ap_block_state63_pp1_stage0_iter1;
wire    ap_block_state68_pp1_stage0_iter2;
wire    ap_block_state73_pp1_stage0_iter3;
wire    ap_block_state78_pp1_stage0_iter4;
wire    ap_block_state83_pp1_stage0_iter5;
wire    ap_block_state88_pp1_stage0_iter6;
wire    ap_block_state93_pp1_stage0_iter7;
wire    ap_block_state98_pp1_stage0_iter8;
wire    ap_block_state103_pp1_stage0_iter9;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln39_reg_1032;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_state106_pp2_stage0_iter0;
wire    ap_block_state111_pp2_stage0_iter1;
wire    ap_block_state116_pp2_stage0_iter2;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln47_reg_1089;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_state153_pp3_stage0_iter0;
wire    ap_block_state158_pp3_stage0_iter1;
wire    ap_block_state163_pp3_stage0_iter2;
wire    ap_block_pp3_stage0_11001;
reg   [0:0] icmp_ln55_reg_1143;
wire    ap_CS_fsm_pp4_stage3;
reg    ap_enable_reg_pp4_iter0;
wire    ap_block_state202_pp4_stage3_iter0;
wire    ap_block_state207_pp4_stage3_iter1;
wire    ap_block_pp4_stage3_11001;
reg   [0:0] icmp_ln62_reg_1182;
wire   [31:0] grp_fu_514_p2;
reg   [31:0] reg_532;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln30_reg_946_pp0_iter1_reg;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] icmp_ln39_reg_1032_pp1_iter1_reg;
reg    ap_enable_reg_pp2_iter2;
reg   [0:0] icmp_ln47_reg_1089_pp2_iter1_reg;
reg    ap_enable_reg_pp3_iter2;
reg   [0:0] icmp_ln55_reg_1143_pp3_iter1_reg;
reg   [31:0] gmem0_addr_reg_907;
wire   [4:0] i_fu_567_p2;
reg   [4:0] i_reg_916;
reg    ap_block_state2_io;
wire    ap_CS_fsm_state7;
reg   [3:0] vec1_addr_reg_926;
wire   [3:0] trunc_ln32_fu_579_p1;
reg   [3:0] trunc_ln32_reg_931;
wire    ap_CS_fsm_state8;
wire   [13:0] shl_ln_fu_583_p3;
reg   [13:0] shl_ln_reg_941;
wire   [0:0] icmp_ln30_fu_590_p2;
reg   [0:0] icmp_ln30_reg_946_pp0_iter2_reg;
wire   [10:0] j_fu_596_p2;
reg   [10:0] j_reg_950;
reg   [31:0] gmem0_addr_read_reg_961;
reg    ap_block_state10_pp0_stage1_iter0;
wire    ap_block_state15_pp0_stage1_iter1;
wire    ap_block_state20_pp0_stage1_iter2;
wire    ap_block_state25_pp0_stage1_iter3;
wire    ap_block_state30_pp0_stage1_iter4;
wire    ap_block_state35_pp0_stage1_iter5;
wire    ap_block_state40_pp0_stage1_iter6;
wire    ap_block_state45_pp0_stage1_iter7;
wire    ap_block_state50_pp0_stage1_iter8;
reg    ap_block_pp0_stage1_11001;
reg   [31:0] w1_load_reg_966;
wire   [0:0] icmp_ln30_1_fu_616_p2;
reg   [0:0] icmp_ln30_1_reg_971;
reg   [0:0] icmp_ln30_1_reg_971_pp0_iter2_reg;
reg   [0:0] icmp_ln30_1_reg_971_pp0_iter3_reg;
reg   [0:0] icmp_ln30_1_reg_971_pp0_iter4_reg;
reg   [0:0] icmp_ln30_1_reg_971_pp0_iter5_reg;
reg   [0:0] icmp_ln30_1_reg_971_pp0_iter6_reg;
reg   [0:0] icmp_ln30_1_reg_971_pp0_iter7_reg;
reg   [0:0] icmp_ln30_1_reg_971_pp0_iter8_reg;
wire   [3:0] i_1_fu_627_p2;
reg   [3:0] i_1_reg_978;
wire    ap_CS_fsm_state56;
wire   [0:0] icmp_ln37_fu_621_p2;
reg   [2:0] vec2_addr_reg_988;
wire   [2:0] trunc_ln41_fu_639_p1;
reg   [2:0] trunc_ln41_reg_993;
wire    ap_CS_fsm_state57;
wire   [6:0] shl_ln1_fu_643_p3;
reg   [6:0] shl_ln1_reg_1027;
wire   [0:0] icmp_ln39_fu_650_p2;
reg   [0:0] icmp_ln39_reg_1032_pp1_iter2_reg;
wire   [4:0] j_1_fu_656_p2;
reg   [4:0] j_1_reg_1036;
reg    ap_enable_reg_pp1_iter0;
wire   [31:0] vec1_q0;
reg   [31:0] vec1_load_reg_1052;
wire    ap_CS_fsm_pp1_stage1;
wire    ap_block_state59_pp1_stage1_iter0;
wire    ap_block_state64_pp1_stage1_iter1;
wire    ap_block_state69_pp1_stage1_iter2;
wire    ap_block_state74_pp1_stage1_iter3;
wire    ap_block_state79_pp1_stage1_iter4;
wire    ap_block_state84_pp1_stage1_iter5;
wire    ap_block_state89_pp1_stage1_iter6;
wire    ap_block_state94_pp1_stage1_iter7;
wire    ap_block_state99_pp1_stage1_iter8;
wire    ap_block_pp1_stage1_11001;
reg   [31:0] w2_load_reg_1057;
wire   [0:0] icmp_ln39_1_fu_681_p2;
reg   [0:0] icmp_ln39_1_reg_1062;
reg   [0:0] icmp_ln39_1_reg_1062_pp1_iter2_reg;
reg   [0:0] icmp_ln39_1_reg_1062_pp1_iter3_reg;
reg   [0:0] icmp_ln39_1_reg_1062_pp1_iter4_reg;
reg   [0:0] icmp_ln39_1_reg_1062_pp1_iter5_reg;
reg   [0:0] icmp_ln39_1_reg_1062_pp1_iter6_reg;
reg   [0:0] icmp_ln39_1_reg_1062_pp1_iter7_reg;
reg   [0:0] icmp_ln39_1_reg_1062_pp1_iter8_reg;
wire   [0:0] icmp_ln45_fu_686_p2;
wire    ap_CS_fsm_state105;
wire   [2:0] i_3_fu_692_p2;
reg   [2:0] i_3_reg_1070;
wire   [1:0] trunc_ln46_fu_698_p1;
reg   [1:0] trunc_ln46_reg_1075;
wire   [31:0] tmp_14_fu_702_p6;
wire   [4:0] shl_ln2_fu_716_p3;
reg   [4:0] shl_ln2_reg_1084;
wire   [0:0] icmp_ln47_fu_724_p2;
wire   [3:0] j_2_fu_730_p2;
reg   [3:0] j_2_reg_1093;
reg    ap_enable_reg_pp2_iter0;
wire   [31:0] vec2_q0;
reg   [31:0] vec2_load_reg_1108;
wire    ap_CS_fsm_pp2_stage1;
wire    ap_block_state107_pp2_stage1_iter0;
wire    ap_block_state112_pp2_stage1_iter1;
wire    ap_block_pp2_stage1_11001;
reg   [31:0] w3_load_reg_1113;
wire   [0:0] icmp_ln53_fu_775_p2;
wire    ap_CS_fsm_state152;
wire   [1:0] i_2_fu_781_p2;
reg   [1:0] i_2_reg_1122;
wire   [0:0] trunc_ln54_fu_787_p1;
reg   [0:0] trunc_ln54_reg_1127;
wire   [31:0] select_ln54_fu_791_p3;
wire   [2:0] shl_ln3_fu_799_p3;
reg   [2:0] shl_ln3_reg_1138;
wire   [0:0] icmp_ln55_fu_807_p2;
wire   [2:0] j_4_fu_813_p2;
reg   [2:0] j_4_reg_1147;
reg    ap_enable_reg_pp3_iter0;
wire   [1:0] trunc_ln57_fu_819_p1;
reg   [1:0] trunc_ln57_reg_1152;
reg   [31:0] w4_load_reg_1162;
wire    ap_CS_fsm_pp3_stage1;
wire    ap_block_state154_pp3_stage1_iter0;
wire    ap_block_state159_pp3_stage1_iter1;
wire    ap_block_pp3_stage1_11001;
wire   [31:0] tmp_20_fu_845_p6;
wire    ap_CS_fsm_pp3_stage2;
wire    ap_block_state155_pp3_stage2_iter0;
wire    ap_block_state160_pp3_stage2_iter1;
wire    ap_block_pp3_stage2_11001;
wire   [31:0] vec4_1_1_fu_859_p3;
wire    ap_CS_fsm_state198;
wire   [31:0] vec4_1_2_fu_866_p3;
wire   [0:0] icmp_ln62_fu_873_p2;
wire    ap_CS_fsm_pp4_stage0;
wire    ap_block_state199_pp4_stage0_iter0;
wire    ap_block_state204_pp4_stage0_iter1;
wire    ap_block_pp4_stage0_11001;
reg   [0:0] icmp_ln62_reg_1182_pp4_iter1_reg;
wire   [1:0] j_3_fu_879_p2;
reg   [1:0] j_3_reg_1186;
wire   [31:0] select_ln64_fu_889_p3;
wire   [31:0] select_ln64_1_fu_898_p3;
reg    ap_enable_reg_pp4_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
wire    ap_block_state13_pp0_stage4_iter0;
wire    ap_block_state18_pp0_stage4_iter1;
wire    ap_block_state23_pp0_stage4_iter2;
wire    ap_block_state28_pp0_stage4_iter3;
wire    ap_block_state33_pp0_stage4_iter4;
wire    ap_block_state38_pp0_stage4_iter5;
wire    ap_block_state43_pp0_stage4_iter6;
wire    ap_block_state48_pp0_stage4_iter7;
wire    ap_block_state53_pp0_stage4_iter8;
wire    ap_block_pp0_stage4_subdone;
wire    ap_CS_fsm_pp0_stage4;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state58;
wire    ap_block_state62_pp1_stage4_iter0;
wire    ap_block_state67_pp1_stage4_iter1;
wire    ap_block_state72_pp1_stage4_iter2;
wire    ap_block_state77_pp1_stage4_iter3;
wire    ap_block_state82_pp1_stage4_iter4;
wire    ap_block_state87_pp1_stage4_iter5;
wire    ap_block_state92_pp1_stage4_iter6;
wire    ap_block_state97_pp1_stage4_iter7;
wire    ap_block_state102_pp1_stage4_iter8;
wire    ap_block_pp1_stage4_subdone;
wire    ap_CS_fsm_pp1_stage4;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
reg    ap_enable_reg_pp1_iter7;
reg    ap_enable_reg_pp1_iter8;
reg    ap_enable_reg_pp1_iter9;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state106;
wire    ap_block_state110_pp2_stage4_iter0;
wire    ap_block_state115_pp2_stage4_iter1;
wire    ap_block_pp2_stage4_subdone;
wire    ap_CS_fsm_pp2_stage4;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state153;
wire    ap_block_state157_pp3_stage4_iter0;
wire    ap_block_state162_pp3_stage4_iter1;
wire    ap_block_pp3_stage4_subdone;
wire    ap_CS_fsm_pp3_stage4;
wire    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state199;
wire    ap_block_state203_pp4_stage4_iter0;
wire    ap_block_pp4_stage4_subdone;
wire    ap_CS_fsm_pp4_stage4;
wire    ap_block_pp4_stage3_subdone;
reg   [3:0] vec1_address0;
reg    vec1_ce0;
reg    vec1_we0;
reg   [2:0] vec2_address0;
reg    vec2_ce0;
reg    vec2_we0;
reg   [31:0] grp_act_fun_fu_503_vec;
wire   [31:0] grp_act_fun_fu_503_ap_return;
reg    grp_act_fun_fu_503_ap_ce;
reg    ap_block_state10_pp0_stage1_iter0_ignore_call0;
wire    ap_block_state15_pp0_stage1_iter1_ignore_call0;
wire    ap_block_state20_pp0_stage1_iter2_ignore_call0;
wire    ap_block_state25_pp0_stage1_iter3_ignore_call0;
wire    ap_block_state30_pp0_stage1_iter4_ignore_call0;
wire    ap_block_state35_pp0_stage1_iter5_ignore_call0;
wire    ap_block_state40_pp0_stage1_iter6_ignore_call0;
wire    ap_block_state45_pp0_stage1_iter7_ignore_call0;
wire    ap_block_state50_pp0_stage1_iter8_ignore_call0;
reg    ap_block_pp0_stage1_11001_ignoreCallOp308;
wire    ap_block_state11_pp0_stage2_iter0_ignore_call0;
wire    ap_block_state16_pp0_stage2_iter1_ignore_call0;
wire    ap_block_state21_pp0_stage2_iter2_ignore_call0;
wire    ap_block_state26_pp0_stage2_iter3_ignore_call0;
wire    ap_block_state31_pp0_stage2_iter4_ignore_call0;
wire    ap_block_state36_pp0_stage2_iter5_ignore_call0;
wire    ap_block_state41_pp0_stage2_iter6_ignore_call0;
wire    ap_block_state46_pp0_stage2_iter7_ignore_call0;
wire    ap_block_state51_pp0_stage2_iter8_ignore_call0;
wire    ap_block_pp0_stage2_11001_ignoreCallOp309;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state12_pp0_stage3_iter0_ignore_call0;
wire    ap_block_state17_pp0_stage3_iter1_ignore_call0;
wire    ap_block_state22_pp0_stage3_iter2_ignore_call0;
wire    ap_block_state27_pp0_stage3_iter3_ignore_call0;
wire    ap_block_state32_pp0_stage3_iter4_ignore_call0;
wire    ap_block_state37_pp0_stage3_iter5_ignore_call0;
wire    ap_block_state42_pp0_stage3_iter6_ignore_call0;
wire    ap_block_state47_pp0_stage3_iter7_ignore_call0;
wire    ap_block_state52_pp0_stage3_iter8_ignore_call0;
wire    ap_block_pp0_stage3_11001_ignoreCallOp310;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state13_pp0_stage4_iter0_ignore_call0;
wire    ap_block_state18_pp0_stage4_iter1_ignore_call0;
wire    ap_block_state23_pp0_stage4_iter2_ignore_call0;
wire    ap_block_state28_pp0_stage4_iter3_ignore_call0;
wire    ap_block_state33_pp0_stage4_iter4_ignore_call0;
wire    ap_block_state38_pp0_stage4_iter5_ignore_call0;
wire    ap_block_state43_pp0_stage4_iter6_ignore_call0;
wire    ap_block_state48_pp0_stage4_iter7_ignore_call0;
wire    ap_block_state53_pp0_stage4_iter8_ignore_call0;
wire    ap_block_pp0_stage4_11001_ignoreCallOp311;
wire    ap_block_state9_pp0_stage0_iter0_ignore_call0;
wire    ap_block_state14_pp0_stage0_iter1_ignore_call0;
wire    ap_block_state19_pp0_stage0_iter2_ignore_call0;
wire    ap_block_state24_pp0_stage0_iter3_ignore_call0;
wire    ap_block_state29_pp0_stage0_iter4_ignore_call0;
wire    ap_block_state34_pp0_stage0_iter5_ignore_call0;
wire    ap_block_state39_pp0_stage0_iter6_ignore_call0;
wire    ap_block_state44_pp0_stage0_iter7_ignore_call0;
wire    ap_block_state49_pp0_stage0_iter8_ignore_call0;
wire    ap_block_state54_pp0_stage0_iter9_ignore_call0;
wire    ap_block_pp0_stage0_11001_ignoreCallOp312;
wire    ap_block_state59_pp1_stage1_iter0_ignore_call0;
wire    ap_block_state64_pp1_stage1_iter1_ignore_call0;
wire    ap_block_state69_pp1_stage1_iter2_ignore_call0;
wire    ap_block_state74_pp1_stage1_iter3_ignore_call0;
wire    ap_block_state79_pp1_stage1_iter4_ignore_call0;
wire    ap_block_state84_pp1_stage1_iter5_ignore_call0;
wire    ap_block_state89_pp1_stage1_iter6_ignore_call0;
wire    ap_block_state94_pp1_stage1_iter7_ignore_call0;
wire    ap_block_state99_pp1_stage1_iter8_ignore_call0;
wire    ap_block_pp1_stage1_11001_ignoreCallOp398;
wire    ap_block_state60_pp1_stage2_iter0_ignore_call0;
wire    ap_block_state65_pp1_stage2_iter1_ignore_call0;
wire    ap_block_state70_pp1_stage2_iter2_ignore_call0;
wire    ap_block_state75_pp1_stage2_iter3_ignore_call0;
wire    ap_block_state80_pp1_stage2_iter4_ignore_call0;
wire    ap_block_state85_pp1_stage2_iter5_ignore_call0;
wire    ap_block_state90_pp1_stage2_iter6_ignore_call0;
wire    ap_block_state95_pp1_stage2_iter7_ignore_call0;
wire    ap_block_state100_pp1_stage2_iter8_ignore_call0;
wire    ap_block_pp1_stage2_11001_ignoreCallOp399;
wire    ap_CS_fsm_pp1_stage2;
wire    ap_block_state61_pp1_stage3_iter0_ignore_call0;
wire    ap_block_state66_pp1_stage3_iter1_ignore_call0;
wire    ap_block_state71_pp1_stage3_iter2_ignore_call0;
wire    ap_block_state76_pp1_stage3_iter3_ignore_call0;
wire    ap_block_state81_pp1_stage3_iter4_ignore_call0;
wire    ap_block_state86_pp1_stage3_iter5_ignore_call0;
wire    ap_block_state91_pp1_stage3_iter6_ignore_call0;
wire    ap_block_state96_pp1_stage3_iter7_ignore_call0;
wire    ap_block_state101_pp1_stage3_iter8_ignore_call0;
wire    ap_block_pp1_stage3_11001_ignoreCallOp400;
wire    ap_CS_fsm_pp1_stage3;
wire    ap_block_state62_pp1_stage4_iter0_ignore_call0;
wire    ap_block_state67_pp1_stage4_iter1_ignore_call0;
wire    ap_block_state72_pp1_stage4_iter2_ignore_call0;
wire    ap_block_state77_pp1_stage4_iter3_ignore_call0;
wire    ap_block_state82_pp1_stage4_iter4_ignore_call0;
wire    ap_block_state87_pp1_stage4_iter5_ignore_call0;
wire    ap_block_state92_pp1_stage4_iter6_ignore_call0;
wire    ap_block_state97_pp1_stage4_iter7_ignore_call0;
wire    ap_block_state102_pp1_stage4_iter8_ignore_call0;
wire    ap_block_pp1_stage4_11001_ignoreCallOp401;
wire    ap_block_state58_pp1_stage0_iter0_ignore_call0;
wire    ap_block_state63_pp1_stage0_iter1_ignore_call0;
wire    ap_block_state68_pp1_stage0_iter2_ignore_call0;
wire    ap_block_state73_pp1_stage0_iter3_ignore_call0;
wire    ap_block_state78_pp1_stage0_iter4_ignore_call0;
wire    ap_block_state83_pp1_stage0_iter5_ignore_call0;
wire    ap_block_state88_pp1_stage0_iter6_ignore_call0;
wire    ap_block_state93_pp1_stage0_iter7_ignore_call0;
wire    ap_block_state98_pp1_stage0_iter8_ignore_call0;
wire    ap_block_state103_pp1_stage0_iter9_ignore_call0;
wire    ap_block_pp1_stage0_11001_ignoreCallOp402;
wire    ap_CS_fsm_state117;
wire    ap_CS_fsm_state151;
wire    ap_CS_fsm_state164;
wire    ap_CS_fsm_state208;
wire    ap_CS_fsm_state242;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state104;
wire    ap_CS_fsm_pp2_stage2;
wire    ap_CS_fsm_pp2_stage3;
wire    ap_CS_fsm_pp3_stage3;
wire    ap_CS_fsm_pp4_stage1;
wire    ap_CS_fsm_pp4_stage2;
reg   [4:0] i_0_reg_327;
reg   [31:0] ap_phi_mux_empty_6_phi_fu_342_p4;
reg   [10:0] ap_phi_mux_j_0_phi_fu_353_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] i1_0_reg_360;
reg   [31:0] ap_phi_mux_empty_11_phi_fu_374_p4;
wire    ap_block_pp1_stage1;
reg   [4:0] ap_phi_mux_j2_0_phi_fu_385_p4;
wire    ap_block_pp1_stage0;
reg   [2:0] i3_0_reg_392;
reg   [3:0] ap_phi_mux_j4_0_phi_fu_417_p4;
wire    ap_block_pp2_stage0;
reg   [31:0] vec4_1_049_reg_424;
reg   [31:0] vec4_0_048_reg_436;
reg   [1:0] i5_0_reg_448;
reg   [2:0] ap_phi_mux_j6_0_phi_fu_473_p4;
wire    ap_block_pp3_stage0;
reg   [1:0] ap_phi_mux_j7_0_phi_fu_496_p4;
wire    ap_block_pp4_stage0;
wire   [63:0] zext_ln29_fu_573_p1;
wire   [63:0] zext_ln32_fu_611_p1;
wire   [63:0] zext_ln38_fu_633_p1;
wire   [63:0] zext_ln41_fu_666_p1;
wire   [63:0] zext_ln41_1_fu_676_p1;
wire   [63:0] zext_ln49_fu_740_p1;
wire   [63:0] zext_ln49_1_fu_750_p1;
wire   [63:0] zext_ln57_fu_828_p1;
wire   [63:0] empty_fu_551_p1;
reg   [31:0] vec3_3_fu_172;
wire    ap_block_pp3_stage2;
reg   [31:0] vec3_3_1_fu_176;
reg   [31:0] vec3_3_2_fu_180;
reg   [31:0] vec3_3_3_fu_184;
reg   [31:0] grp_fu_514_p0;
wire    ap_block_pp2_stage1;
wire    ap_block_pp3_stage1;
wire    ap_block_pp4_stage4;
reg   [31:0] grp_fu_523_p0;
reg   [31:0] grp_fu_523_p1;
wire    ap_block_pp0_stage2;
wire    ap_block_pp1_stage2;
wire    ap_block_pp2_stage2;
wire   [29:0] op1_fu_541_p4;
wire   [13:0] zext_ln30_fu_602_p1;
wire   [13:0] add_ln32_fu_606_p2;
wire   [6:0] zext_ln39_fu_662_p1;
wire   [6:0] add_ln41_fu_671_p2;
wire   [4:0] zext_ln47_fu_736_p1;
wire   [4:0] add_ln49_fu_745_p2;
wire   [2:0] add_ln57_fu_823_p2;
wire   [0:0] trunc_ln64_fu_885_p1;
reg    grp_fu_514_ce;
wire    ap_block_state11_pp0_stage2_iter0;
wire    ap_block_state16_pp0_stage2_iter1;
wire    ap_block_state21_pp0_stage2_iter2;
wire    ap_block_state26_pp0_stage2_iter3;
wire    ap_block_state31_pp0_stage2_iter4;
wire    ap_block_state36_pp0_stage2_iter5;
wire    ap_block_state41_pp0_stage2_iter6;
wire    ap_block_state46_pp0_stage2_iter7;
wire    ap_block_state51_pp0_stage2_iter8;
wire    ap_block_pp0_stage2_11001;
wire    ap_block_state12_pp0_stage3_iter0;
wire    ap_block_state17_pp0_stage3_iter1;
wire    ap_block_state22_pp0_stage3_iter2;
wire    ap_block_state27_pp0_stage3_iter3;
wire    ap_block_state32_pp0_stage3_iter4;
wire    ap_block_state37_pp0_stage3_iter5;
wire    ap_block_state42_pp0_stage3_iter6;
wire    ap_block_state47_pp0_stage3_iter7;
wire    ap_block_state52_pp0_stage3_iter8;
wire    ap_block_pp0_stage3_11001;
wire    ap_block_pp0_stage4_11001;
wire    ap_block_state60_pp1_stage2_iter0;
wire    ap_block_state65_pp1_stage2_iter1;
wire    ap_block_state70_pp1_stage2_iter2;
wire    ap_block_state75_pp1_stage2_iter3;
wire    ap_block_state80_pp1_stage2_iter4;
wire    ap_block_state85_pp1_stage2_iter5;
wire    ap_block_state90_pp1_stage2_iter6;
wire    ap_block_state95_pp1_stage2_iter7;
wire    ap_block_state100_pp1_stage2_iter8;
wire    ap_block_pp1_stage2_11001;
wire    ap_block_state61_pp1_stage3_iter0;
wire    ap_block_state66_pp1_stage3_iter1;
wire    ap_block_state71_pp1_stage3_iter2;
wire    ap_block_state76_pp1_stage3_iter3;
wire    ap_block_state81_pp1_stage3_iter4;
wire    ap_block_state86_pp1_stage3_iter5;
wire    ap_block_state91_pp1_stage3_iter6;
wire    ap_block_state96_pp1_stage3_iter7;
wire    ap_block_state101_pp1_stage3_iter8;
wire    ap_block_pp1_stage3_11001;
wire    ap_block_pp1_stage4_11001;
wire    ap_block_state108_pp2_stage2_iter0;
wire    ap_block_state113_pp2_stage2_iter1;
wire    ap_block_pp2_stage2_11001;
wire    ap_block_state109_pp2_stage3_iter0;
wire    ap_block_state114_pp2_stage3_iter1;
wire    ap_block_pp2_stage3_11001;
wire    ap_block_pp2_stage4_11001;
wire    ap_block_state156_pp3_stage3_iter0;
wire    ap_block_state161_pp3_stage3_iter1;
wire    ap_block_pp3_stage3_11001;
wire    ap_block_pp3_stage4_11001;
wire    ap_block_pp4_stage4_11001;
wire    ap_block_state200_pp4_stage1_iter0;
wire    ap_block_state205_pp4_stage1_iter1;
wire    ap_block_pp4_stage1_11001;
wire    ap_block_state201_pp4_stage2_iter0;
wire    ap_block_state206_pp4_stage2_iter1;
wire    ap_block_pp4_stage2_11001;
reg    grp_fu_523_ce;
reg   [143:0] ap_NS_fsm;
reg    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp1_stage1_subdone;
wire    ap_block_pp1_stage2_subdone;
wire    ap_block_pp1_stage3_subdone;
wire    ap_block_pp2_stage1_subdone;
wire    ap_block_pp2_stage2_subdone;
wire    ap_block_pp2_stage3_subdone;
wire    ap_block_pp3_stage1_subdone;
wire    ap_block_pp3_stage2_subdone;
wire    ap_block_pp3_stage3_subdone;
wire    ap_block_pp4_stage1_subdone;
wire    ap_block_pp4_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;

// power-on initialization
initial begin
#0 ap_CS_fsm = 144'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter8 = 1'b0;
#0 ap_enable_reg_pp1_iter9 = 1'b0;
end

kernel_b1 #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
b1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(b1_address0),
    .ce0(b1_ce0),
    .q0(b1_q0)
);

kernel_w1 #(
    .DataWidth( 32 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
w1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w1_address0),
    .ce0(w1_ce0),
    .q0(w1_q0)
);

kernel_b2 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
b2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(b2_address0),
    .ce0(b2_ce0),
    .q0(b2_q0)
);

kernel_w2 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
w2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w2_address0),
    .ce0(w2_ce0),
    .q0(w2_q0)
);

kernel_w3 #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
w3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w3_address0),
    .ce0(w3_ce0),
    .q0(w3_q0)
);

kernel_w4 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
w4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w4_address0),
    .ce0(w4_ce0),
    .q0(w4_q0)
);

kernel_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
kernel_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .op(op),
    .res(grp_act_fun_fu_503_ap_return),
    .res_ap_vld(res_ap_vld)
);

kernel_gmem0_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM0_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM0_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM0_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM0_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM0_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM0_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM0_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM0_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM0_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM0_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM0_CACHE_VALUE ))
kernel_gmem0_m_axi_U(
    .AWVALID(m_axi_gmem0_AWVALID),
    .AWREADY(m_axi_gmem0_AWREADY),
    .AWADDR(m_axi_gmem0_AWADDR),
    .AWID(m_axi_gmem0_AWID),
    .AWLEN(m_axi_gmem0_AWLEN),
    .AWSIZE(m_axi_gmem0_AWSIZE),
    .AWBURST(m_axi_gmem0_AWBURST),
    .AWLOCK(m_axi_gmem0_AWLOCK),
    .AWCACHE(m_axi_gmem0_AWCACHE),
    .AWPROT(m_axi_gmem0_AWPROT),
    .AWQOS(m_axi_gmem0_AWQOS),
    .AWREGION(m_axi_gmem0_AWREGION),
    .AWUSER(m_axi_gmem0_AWUSER),
    .WVALID(m_axi_gmem0_WVALID),
    .WREADY(m_axi_gmem0_WREADY),
    .WDATA(m_axi_gmem0_WDATA),
    .WSTRB(m_axi_gmem0_WSTRB),
    .WLAST(m_axi_gmem0_WLAST),
    .WID(m_axi_gmem0_WID),
    .WUSER(m_axi_gmem0_WUSER),
    .ARVALID(m_axi_gmem0_ARVALID),
    .ARREADY(m_axi_gmem0_ARREADY),
    .ARADDR(m_axi_gmem0_ARADDR),
    .ARID(m_axi_gmem0_ARID),
    .ARLEN(m_axi_gmem0_ARLEN),
    .ARSIZE(m_axi_gmem0_ARSIZE),
    .ARBURST(m_axi_gmem0_ARBURST),
    .ARLOCK(m_axi_gmem0_ARLOCK),
    .ARCACHE(m_axi_gmem0_ARCACHE),
    .ARPROT(m_axi_gmem0_ARPROT),
    .ARQOS(m_axi_gmem0_ARQOS),
    .ARREGION(m_axi_gmem0_ARREGION),
    .ARUSER(m_axi_gmem0_ARUSER),
    .RVALID(m_axi_gmem0_RVALID),
    .RREADY(m_axi_gmem0_RREADY),
    .RDATA(m_axi_gmem0_RDATA),
    .RLAST(m_axi_gmem0_RLAST),
    .RID(m_axi_gmem0_RID),
    .RUSER(m_axi_gmem0_RUSER),
    .RRESP(m_axi_gmem0_RRESP),
    .BVALID(m_axi_gmem0_BVALID),
    .BREADY(m_axi_gmem0_BREADY),
    .BRESP(m_axi_gmem0_BRESP),
    .BID(m_axi_gmem0_BID),
    .BUSER(m_axi_gmem0_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem0_ARVALID),
    .I_ARREADY(gmem0_ARREADY),
    .I_ARADDR(gmem0_addr_reg_907),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1024),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem0_RVALID),
    .I_RREADY(gmem0_RREADY),
    .I_RDATA(gmem0_RDATA),
    .I_RID(gmem0_RID),
    .I_RUSER(gmem0_RUSER),
    .I_RRESP(gmem0_RRESP),
    .I_RLAST(gmem0_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(gmem0_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(gmem0_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(gmem0_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(gmem0_BRESP),
    .I_BID(gmem0_BID),
    .I_BUSER(gmem0_BUSER)
);

kernel_vec1 #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
vec1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(vec1_address0),
    .ce0(vec1_ce0),
    .we0(vec1_we0),
    .d0(grp_act_fun_fu_503_ap_return),
    .q0(vec1_q0)
);

kernel_vec2 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
vec2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(vec2_address0),
    .ce0(vec2_ce0),
    .we0(vec2_we0),
    .d0(grp_act_fun_fu_503_ap_return),
    .q0(vec2_q0)
);

act_fun grp_act_fun_fu_503(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .vec(grp_act_fun_fu_503_vec),
    .ap_return(grp_act_fun_fu_503_ap_return),
    .ap_ce(grp_act_fun_fu_503_ap_ce)
);

kernel_fadd_32ns_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_fadd_32ns_hbi_U21(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_514_p0),
    .din1(reg_527),
    .ce(grp_fu_514_ce),
    .dout(grp_fu_514_p2)
);

kernel_fmul_32ns_ibs #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_fmul_32ns_ibs_U22(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_523_p0),
    .din1(grp_fu_523_p1),
    .ce(grp_fu_523_ce),
    .dout(grp_fu_523_p2)
);

kernel_mux_42_32_jbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
kernel_mux_42_32_jbC_U23(
    .din0(32'd1047468626),
    .din1(32'd1049126172),
    .din2(32'd3165780716),
    .din3(32'd1042894693),
    .din4(trunc_ln46_fu_698_p1),
    .dout(tmp_14_fu_702_p6)
);

kernel_mux_42_32_jbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
kernel_mux_42_32_jbC_U24(
    .din0(vec3_3_fu_172),
    .din1(vec3_3_1_fu_176),
    .din2(vec3_3_2_fu_180),
    .din3(vec3_3_3_fu_184),
    .din4(trunc_ln57_reg_1152),
    .dout(tmp_20_fu_845_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter9 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state58) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state57)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage4_subdone) & (1'b1 == ap_CS_fsm_pp1_stage4))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage4_subdone) & (1'b1 == ap_CS_fsm_pp1_stage4))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage4_subdone) & (1'b1 == ap_CS_fsm_pp1_stage4))) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage4_subdone) & (1'b1 == ap_CS_fsm_pp1_stage4))) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage4_subdone) & (1'b1 == ap_CS_fsm_pp1_stage4))) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage4_subdone) & (1'b1 == ap_CS_fsm_pp1_stage4))) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage4_subdone) & (1'b1 == ap_CS_fsm_pp1_stage4))) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter8 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage4_subdone) & (1'b1 == ap_CS_fsm_pp1_stage4))) begin
            ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter9 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage4_subdone) & (1'b1 == ap_CS_fsm_pp1_stage4)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
            ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
        end else if ((1'b1 == ap_CS_fsm_state57)) begin
            ap_enable_reg_pp1_iter9 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state106) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((icmp_ln45_fu_686_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state105))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage4_subdone) & (1'b1 == ap_CS_fsm_pp2_stage4))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp2_stage4_subdone) & (1'b1 == ap_CS_fsm_pp2_stage4)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if (((icmp_ln45_fu_686_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state105))) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state153) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((icmp_ln53_fu_775_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state152))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage4_subdone) & (1'b1 == ap_CS_fsm_pp3_stage4))) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp3_stage4_subdone) & (1'b1 == ap_CS_fsm_pp3_stage4)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if (((icmp_ln53_fu_775_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state152))) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b1 == ap_condition_pp4_exit_iter0_state199) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if (((icmp_ln53_fu_775_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state152))) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp4_stage3) & (1'b0 == ap_block_pp4_stage3_subdone)) | ((1'b1 == ap_CS_fsm_pp4_stage4) & (1'b0 == ap_block_pp4_stage4_subdone)))) begin
            ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
        end else if (((icmp_ln53_fu_775_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state152))) begin
            ap_enable_reg_pp4_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (icmp_ln39_reg_1032_pp1_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        empty_11_reg_371 <= reg_532;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        empty_11_reg_371 <= b2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln47_reg_1089_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        empty_16_reg_403 <= grp_fu_514_p2;
    end else if (((icmp_ln45_fu_686_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state105))) begin
        empty_16_reg_403 <= tmp_14_fu_702_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln55_reg_1143_pp3_iter1_reg == 1'd0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        empty_21_reg_459 <= grp_fu_514_p2;
    end else if (((icmp_ln53_fu_775_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state152))) begin
        empty_21_reg_459 <= select_ln54_fu_791_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln30_reg_946_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        empty_6_reg_339 <= reg_532;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        empty_6_reg_339 <= b1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_io) & (icmp_ln28_fu_561_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_0_reg_360 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state104)) begin
        i1_0_reg_360 <= i_1_reg_978;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_fu_621_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state56))) begin
        i3_0_reg_392 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state151)) begin
        i3_0_reg_392 <= i_3_reg_1070;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_fu_686_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state105))) begin
        i5_0_reg_448 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state198)) begin
        i5_0_reg_448 <= i_2_reg_1122;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        i_0_reg_327 <= i_reg_916;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_327 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln39_reg_1032 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j2_0_reg_381 <= j_1_reg_1036;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        j2_0_reg_381 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln47_reg_1089 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        j4_0_reg_413 <= j_2_reg_1093;
    end else if (((icmp_ln45_fu_686_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state105))) begin
        j4_0_reg_413 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln55_reg_1143 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        j6_0_reg_469 <= j_4_reg_1147;
    end else if (((icmp_ln53_fu_775_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state152))) begin
        j6_0_reg_469 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_fu_775_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state152))) begin
        j7_0_reg_492 <= 2'd0;
    end else if (((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln62_reg_1182 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        j7_0_reg_492 <= j_3_reg_1186;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln30_reg_946 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_0_reg_349 <= j_reg_950;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        j_0_reg_349 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_fu_775_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state152))) begin
        res_t_0_reg_480 <= 32'd1023907283;
    end else if (((1'b0 == ap_block_pp4_stage3_11001) & (icmp_ln62_reg_1182_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage3))) begin
        res_t_0_reg_480 <= grp_fu_514_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln30_reg_946 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        gmem0_addr_read_reg_961 <= gmem0_RDATA;
        w1_load_reg_966 <= w1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        gmem0_addr_reg_907[29 : 0] <= empty_fu_551_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        i_1_reg_978 <= i_1_fu_627_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state152)) begin
        i_2_reg_1122 <= i_2_fu_781_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state105)) begin
        i_3_reg_1070 <= i_3_fu_692_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_916 <= i_fu_567_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln30_reg_946 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln30_1_reg_971 <= icmp_ln30_1_fu_616_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln30_1_reg_971_pp0_iter2_reg <= icmp_ln30_1_reg_971;
        icmp_ln30_1_reg_971_pp0_iter3_reg <= icmp_ln30_1_reg_971_pp0_iter2_reg;
        icmp_ln30_1_reg_971_pp0_iter4_reg <= icmp_ln30_1_reg_971_pp0_iter3_reg;
        icmp_ln30_1_reg_971_pp0_iter5_reg <= icmp_ln30_1_reg_971_pp0_iter4_reg;
        icmp_ln30_1_reg_971_pp0_iter6_reg <= icmp_ln30_1_reg_971_pp0_iter5_reg;
        icmp_ln30_1_reg_971_pp0_iter7_reg <= icmp_ln30_1_reg_971_pp0_iter6_reg;
        icmp_ln30_1_reg_971_pp0_iter8_reg <= icmp_ln30_1_reg_971_pp0_iter7_reg;
        icmp_ln30_reg_946 <= icmp_ln30_fu_590_p2;
        icmp_ln30_reg_946_pp0_iter1_reg <= icmp_ln30_reg_946;
        icmp_ln30_reg_946_pp0_iter2_reg <= icmp_ln30_reg_946_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln39_reg_1032 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln39_1_reg_1062 <= icmp_ln39_1_fu_681_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln39_1_reg_1062_pp1_iter2_reg <= icmp_ln39_1_reg_1062;
        icmp_ln39_1_reg_1062_pp1_iter3_reg <= icmp_ln39_1_reg_1062_pp1_iter2_reg;
        icmp_ln39_1_reg_1062_pp1_iter4_reg <= icmp_ln39_1_reg_1062_pp1_iter3_reg;
        icmp_ln39_1_reg_1062_pp1_iter5_reg <= icmp_ln39_1_reg_1062_pp1_iter4_reg;
        icmp_ln39_1_reg_1062_pp1_iter6_reg <= icmp_ln39_1_reg_1062_pp1_iter5_reg;
        icmp_ln39_1_reg_1062_pp1_iter7_reg <= icmp_ln39_1_reg_1062_pp1_iter6_reg;
        icmp_ln39_1_reg_1062_pp1_iter8_reg <= icmp_ln39_1_reg_1062_pp1_iter7_reg;
        icmp_ln39_reg_1032 <= icmp_ln39_fu_650_p2;
        icmp_ln39_reg_1032_pp1_iter1_reg <= icmp_ln39_reg_1032;
        icmp_ln39_reg_1032_pp1_iter2_reg <= icmp_ln39_reg_1032_pp1_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln47_reg_1089 <= icmp_ln47_fu_724_p2;
        icmp_ln47_reg_1089_pp2_iter1_reg <= icmp_ln47_reg_1089;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln55_reg_1143 <= icmp_ln55_fu_807_p2;
        icmp_ln55_reg_1143_pp3_iter1_reg <= icmp_ln55_reg_1143;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        icmp_ln62_reg_1182 <= icmp_ln62_fu_873_p2;
        icmp_ln62_reg_1182_pp4_iter1_reg <= icmp_ln62_reg_1182;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j_1_reg_1036 <= j_1_fu_656_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        j_2_reg_1093 <= j_2_fu_730_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
        j_3_reg_1186 <= j_3_fu_879_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        j_4_reg_1147 <= j_4_fu_813_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        j_reg_950 <= j_fu_596_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp4_stage3_11001) & (icmp_ln62_reg_1182 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage3)) | ((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln55_reg_1143 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln47_reg_1089 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln39_reg_1032 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln30_reg_946 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        reg_527 <= grp_fu_523_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln55_reg_1143_pp3_iter1_reg == 1'd0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln47_reg_1089_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln39_reg_1032_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln30_reg_946_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        reg_532 <= grp_fu_514_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        shl_ln1_reg_1027[6 : 4] <= shl_ln1_fu_643_p3[6 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_fu_686_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state105))) begin
        shl_ln2_reg_1084[4 : 3] <= shl_ln2_fu_716_p3[4 : 3];
        trunc_ln46_reg_1075 <= trunc_ln46_fu_698_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_fu_775_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state152))) begin
        shl_ln3_reg_1138[2] <= shl_ln3_fu_799_p3[2];
        trunc_ln54_reg_1127 <= trunc_ln54_fu_787_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        shl_ln_reg_941[13 : 10] <= shl_ln_fu_583_p3[13 : 10];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        trunc_ln32_reg_931 <= trunc_ln32_fu_579_p1;
        vec1_addr_reg_926 <= zext_ln29_fu_573_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_fu_621_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state56))) begin
        trunc_ln41_reg_993 <= trunc_ln41_fu_639_p1;
        vec2_addr_reg_988 <= zext_ln38_fu_633_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln55_fu_807_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        trunc_ln57_reg_1152 <= trunc_ln57_fu_819_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (icmp_ln39_reg_1032 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        vec1_load_reg_1052 <= vec1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage1_11001) & (icmp_ln47_reg_1089 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        vec2_load_reg_1108 <= vec2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln46_reg_1075 == 2'd1) & (1'b1 == ap_CS_fsm_state151))) begin
        vec3_3_1_fu_176 <= grp_act_fun_fu_503_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln46_reg_1075 == 2'd2) & (1'b1 == ap_CS_fsm_state151))) begin
        vec3_3_2_fu_180 <= grp_act_fun_fu_503_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln46_reg_1075 == 2'd3) & (1'b1 == ap_CS_fsm_state151))) begin
        vec3_3_3_fu_184 <= grp_act_fun_fu_503_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln46_reg_1075 == 2'd0) & (1'b1 == ap_CS_fsm_state151))) begin
        vec3_3_fu_172 <= grp_act_fun_fu_503_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state198)) begin
        vec4_0_048_reg_436 <= vec4_1_2_fu_866_p3;
        vec4_1_049_reg_424 <= vec4_1_1_fu_859_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (icmp_ln39_reg_1032 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        w2_load_reg_1057 <= w2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage1_11001) & (icmp_ln47_reg_1089 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        w3_load_reg_1113 <= w3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage1_11001) & (icmp_ln55_reg_1143 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        w4_load_reg_1162 <= w4_q0;
    end
end

always @ (*) begin
    if ((icmp_ln30_fu_590_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln39_fu_650_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state58 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state58 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln47_fu_724_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state106 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state106 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln55_fu_807_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state153 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state153 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln62_fu_873_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state199 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state199 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state242)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter9 == 1'b0) & (ap_enable_reg_pp1_iter8 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln39_reg_1032_pp1_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage1))) begin
        ap_phi_mux_empty_11_phi_fu_374_p4 = reg_532;
    end else begin
        ap_phi_mux_empty_11_phi_fu_374_p4 = empty_11_reg_371;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (icmp_ln30_reg_946_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_empty_6_phi_fu_342_p4 = reg_532;
    end else begin
        ap_phi_mux_empty_6_phi_fu_342_p4 = empty_6_reg_339;
    end
end

always @ (*) begin
    if (((icmp_ln39_reg_1032 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_j2_0_phi_fu_385_p4 = j_1_reg_1036;
    end else begin
        ap_phi_mux_j2_0_phi_fu_385_p4 = j2_0_reg_381;
    end
end

always @ (*) begin
    if (((icmp_ln47_reg_1089 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        ap_phi_mux_j4_0_phi_fu_417_p4 = j_2_reg_1093;
    end else begin
        ap_phi_mux_j4_0_phi_fu_417_p4 = j4_0_reg_413;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_1143 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        ap_phi_mux_j6_0_phi_fu_473_p4 = j_4_reg_1147;
    end else begin
        ap_phi_mux_j6_0_phi_fu_473_p4 = j6_0_reg_469;
    end
end

always @ (*) begin
    if (((icmp_ln62_reg_1182 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        ap_phi_mux_j7_0_phi_fu_496_p4 = j_3_reg_1186;
    end else begin
        ap_phi_mux_j7_0_phi_fu_496_p4 = j7_0_reg_492;
    end
end

always @ (*) begin
    if (((icmp_ln30_reg_946 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_j_0_phi_fu_353_p4 = j_reg_950;
    end else begin
        ap_phi_mux_j_0_phi_fu_353_p4 = j_0_reg_349;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state242)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        b1_ce0 = 1'b1;
    end else begin
        b1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        b2_ce0 = 1'b1;
    end else begin
        b2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_io) & (icmp_ln28_fu_561_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem0_ARVALID = 1'b1;
    end else begin
        gmem0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln30_reg_946 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        gmem0_RREADY = 1'b1;
    end else begin
        gmem0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln28_fu_561_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem0_blk_n_AR = m_axi_gmem0_ARREADY;
    end else begin
        gmem0_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (icmp_ln30_reg_946 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        gmem0_blk_n_R = m_axi_gmem0_RVALID;
    end else begin
        gmem0_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage4) | (1'b1 == ap_CS_fsm_pp2_stage4) | (1'b1 == ap_CS_fsm_pp4_stage0) | (1'b1 == ap_CS_fsm_pp3_stage2) | (1'b1 == ap_CS_fsm_pp3_stage1) | (1'b1 == ap_CS_fsm_state152) | (1'b1 == ap_CS_fsm_pp2_stage1) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_pp4_stage3) | (1'b1 == ap_CS_fsm_pp3_stage0) | (1'b1 == ap_CS_fsm_pp2_stage0) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_pp4_stage2) | (1'b1 == ap_CS_fsm_pp4_stage1) | (1'b1 == ap_CS_fsm_pp3_stage3) | (1'b1 == ap_CS_fsm_pp2_stage3) | (1'b1 == ap_CS_fsm_pp2_stage2) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_pp4_stage4) | ((1'b1 == ap_CS_fsm_pp1_stage4) & (1'b1 == ap_block_pp1_stage4_11001_ignoreCallOp401)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == ap_block_pp0_stage4_11001_ignoreCallOp311)) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b1 == ap_block_pp1_stage1_11001_ignoreCallOp398)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_block_pp1_stage0_11001_ignoreCallOp402)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_block_pp0_stage0_11001_ignoreCallOp312)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_block_pp0_stage1_11001_ignoreCallOp308)) | ((1'b1 == ap_CS_fsm_pp1_stage3) & (1'b1 == ap_block_pp1_stage3_11001_ignoreCallOp400)) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b1 == ap_block_pp1_stage2_11001_ignoreCallOp399)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_block_pp0_stage3_11001_ignoreCallOp310)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_block_pp0_stage2_11001_ignoreCallOp309)))) begin
        grp_act_fun_fu_503_ap_ce = 1'b0;
    end else begin
        grp_act_fun_fu_503_ap_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state208)) begin
        grp_act_fun_fu_503_vec = res_t_0_reg_480;
    end else if ((1'b1 == ap_CS_fsm_state164)) begin
        grp_act_fun_fu_503_vec = empty_21_reg_459;
    end else if ((1'b1 == ap_CS_fsm_state117)) begin
        grp_act_fun_fu_503_vec = empty_16_reg_403;
    end else if ((((icmp_ln39_1_reg_1062_pp1_iter2_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage1)) | ((icmp_ln30_1_reg_971_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_act_fun_fu_503_vec = reg_532;
    end else begin
        grp_act_fun_fu_503_vec = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage4_11001) & (1'b1 == ap_CS_fsm_pp3_stage4)) | ((1'b0 == ap_block_pp2_stage4_11001) & (1'b1 == ap_CS_fsm_pp2_stage4)) | ((1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp3_stage2_11001) & (1'b1 == ap_CS_fsm_pp3_stage2)) | ((1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1)) | ((1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b0 == ap_block_pp4_stage3_11001) & (1'b1 == ap_CS_fsm_pp4_stage3)) | ((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp4_stage2_11001) & (1'b1 == ap_CS_fsm_pp4_stage2)) | ((1'b0 == ap_block_pp4_stage1_11001) & (1'b1 == ap_CS_fsm_pp4_stage1)) | ((1'b0 == ap_block_pp3_stage3_11001) & (1'b1 == ap_CS_fsm_pp3_stage3)) | ((1'b0 == ap_block_pp2_stage3_11001) & (1'b1 == ap_CS_fsm_pp2_stage3)) | ((1'b0 == ap_block_pp2_stage2_11001) & (1'b1 == ap_CS_fsm_pp2_stage2)) | ((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3)) | ((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp4_stage4_11001) & (1'b1 == ap_CS_fsm_pp4_stage4)))) begin
        grp_fu_514_ce = 1'b1;
    end else begin
        grp_fu_514_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage4) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage4))) begin
        grp_fu_514_p0 = res_t_0_reg_480;
    end else if (((1'b0 == ap_block_pp3_stage1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        grp_fu_514_p0 = empty_21_reg_459;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage1))) begin
        grp_fu_514_p0 = empty_16_reg_403;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage1))) begin
        grp_fu_514_p0 = ap_phi_mux_empty_11_phi_fu_374_p4;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_514_p0 = ap_phi_mux_empty_6_phi_fu_342_p4;
    end else begin
        grp_fu_514_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage4_11001) & (1'b1 == ap_CS_fsm_pp3_stage4)) | ((1'b0 == ap_block_pp2_stage4_11001) & (1'b1 == ap_CS_fsm_pp2_stage4)) | ((1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp3_stage2_11001) & (1'b1 == ap_CS_fsm_pp3_stage2)) | ((1'b0 == ap_block_pp4_stage3_11001) & (1'b1 == ap_CS_fsm_pp4_stage3)) | ((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp4_stage2_11001) & (1'b1 == ap_CS_fsm_pp4_stage2)) | ((1'b0 == ap_block_pp4_stage1_11001) & (1'b1 == ap_CS_fsm_pp4_stage1)) | ((1'b0 == ap_block_pp3_stage3_11001) & (1'b1 == ap_CS_fsm_pp3_stage3)) | ((1'b0 == ap_block_pp2_stage3_11001) & (1'b1 == ap_CS_fsm_pp2_stage3)) | ((1'b0 == ap_block_pp2_stage2_11001) & (1'b1 == ap_CS_fsm_pp2_stage2)) | ((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3)) | ((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_523_ce = 1'b1;
    end else begin
        grp_fu_523_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0))) begin
        grp_fu_523_p0 = select_ln64_fu_889_p3;
    end else if (((1'b1 == ap_CS_fsm_pp3_stage2) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage2))) begin
        grp_fu_523_p0 = tmp_20_fu_845_p6;
    end else if (((1'b0 == ap_block_pp2_stage2) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
        grp_fu_523_p0 = vec2_load_reg_1108;
    end else if (((1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
        grp_fu_523_p0 = vec1_load_reg_1052;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_523_p0 = gmem0_addr_read_reg_961;
    end else begin
        grp_fu_523_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0))) begin
        grp_fu_523_p1 = select_ln64_1_fu_898_p3;
    end else if (((1'b1 == ap_CS_fsm_pp3_stage2) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage2))) begin
        grp_fu_523_p1 = w4_load_reg_1162;
    end else if (((1'b0 == ap_block_pp2_stage2) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
        grp_fu_523_p1 = w3_load_reg_1113;
    end else if (((1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
        grp_fu_523_p1 = w2_load_reg_1057;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_523_p1 = w1_load_reg_966;
    end else begin
        grp_fu_523_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state242)) begin
        res_ap_vld = 1'b1;
    end else begin
        res_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        vec1_address0 = zext_ln41_fu_666_p1;
    end else if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        vec1_address0 = vec1_addr_reg_926;
    end else begin
        vec1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        vec1_ce0 = 1'b1;
    end else begin
        vec1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln30_1_reg_971_pp0_iter8_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec1_we0 = 1'b1;
    end else begin
        vec1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        vec2_address0 = zext_ln49_fu_740_p1;
    end else if (((ap_enable_reg_pp1_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        vec2_address0 = vec2_addr_reg_988;
    end else begin
        vec2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        vec2_ce0 = 1'b1;
    end else begin
        vec2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln39_1_reg_1062_pp1_iter8_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        vec2_we0 = 1'b1;
    end else begin
        vec2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        w1_ce0 = 1'b1;
    end else begin
        w1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        w2_ce0 = 1'b1;
    end else begin
        w2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        w3_ce0 = 1'b1;
    end else begin
        w3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        w4_ce0 = 1'b1;
    end else begin
        w4_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_io) & (icmp_ln28_fu_561_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else if (((1'b0 == ap_block_state2_io) & (icmp_ln28_fu_561_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln30_fu_590_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter8 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((ap_enable_reg_pp0_iter8 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln30_fu_590_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state56 : begin
            if (((icmp_ln37_fu_621_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state56))) begin
                ap_NS_fsm = ap_ST_fsm_state105;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln39_fu_650_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((ap_enable_reg_pp1_iter8 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln39_fu_650_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((ap_enable_reg_pp1_iter8 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
                ap_NS_fsm = ap_ST_fsm_state104;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((1'b0 == ap_block_pp1_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_pp1_stage3 : begin
            if ((1'b0 == ap_block_pp1_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end
        end
        ap_ST_fsm_pp1_stage4 : begin
            if ((1'b0 == ap_block_pp1_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state105 : begin
            if (((icmp_ln45_fu_686_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state105))) begin
                ap_NS_fsm = ap_ST_fsm_state152;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln47_fu_724_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else if ((((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln47_fu_724_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
                ap_NS_fsm = ap_ST_fsm_state117;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((1'b0 == ap_block_pp2_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_pp2_stage2 : begin
            if ((1'b0 == ap_block_pp2_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end
        end
        ap_ST_fsm_pp2_stage3 : begin
            if ((1'b0 == ap_block_pp2_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage3;
            end
        end
        ap_ST_fsm_pp2_stage4 : begin
            if ((1'b0 == ap_block_pp2_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage4;
            end
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state150;
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state151;
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state152 : begin
            if (((icmp_ln53_fu_775_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state152))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln55_fu_807_p2 == 1'd1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end else if ((((1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln55_fu_807_p2 == 1'd1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
                ap_NS_fsm = ap_ST_fsm_state164;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_pp3_stage1 : begin
            if ((1'b0 == ap_block_pp3_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end
        end
        ap_ST_fsm_pp3_stage2 : begin
            if ((1'b0 == ap_block_pp3_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage2;
            end
        end
        ap_ST_fsm_pp3_stage3 : begin
            if ((1'b0 == ap_block_pp3_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage3;
            end
        end
        ap_ST_fsm_pp3_stage4 : begin
            if ((1'b0 == ap_block_pp3_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage4;
            end
        end
        ap_ST_fsm_state164 : begin
            ap_NS_fsm = ap_ST_fsm_state165;
        end
        ap_ST_fsm_state165 : begin
            ap_NS_fsm = ap_ST_fsm_state166;
        end
        ap_ST_fsm_state166 : begin
            ap_NS_fsm = ap_ST_fsm_state167;
        end
        ap_ST_fsm_state167 : begin
            ap_NS_fsm = ap_ST_fsm_state168;
        end
        ap_ST_fsm_state168 : begin
            ap_NS_fsm = ap_ST_fsm_state169;
        end
        ap_ST_fsm_state169 : begin
            ap_NS_fsm = ap_ST_fsm_state170;
        end
        ap_ST_fsm_state170 : begin
            ap_NS_fsm = ap_ST_fsm_state171;
        end
        ap_ST_fsm_state171 : begin
            ap_NS_fsm = ap_ST_fsm_state172;
        end
        ap_ST_fsm_state172 : begin
            ap_NS_fsm = ap_ST_fsm_state173;
        end
        ap_ST_fsm_state173 : begin
            ap_NS_fsm = ap_ST_fsm_state174;
        end
        ap_ST_fsm_state174 : begin
            ap_NS_fsm = ap_ST_fsm_state175;
        end
        ap_ST_fsm_state175 : begin
            ap_NS_fsm = ap_ST_fsm_state176;
        end
        ap_ST_fsm_state176 : begin
            ap_NS_fsm = ap_ST_fsm_state177;
        end
        ap_ST_fsm_state177 : begin
            ap_NS_fsm = ap_ST_fsm_state178;
        end
        ap_ST_fsm_state178 : begin
            ap_NS_fsm = ap_ST_fsm_state179;
        end
        ap_ST_fsm_state179 : begin
            ap_NS_fsm = ap_ST_fsm_state180;
        end
        ap_ST_fsm_state180 : begin
            ap_NS_fsm = ap_ST_fsm_state181;
        end
        ap_ST_fsm_state181 : begin
            ap_NS_fsm = ap_ST_fsm_state182;
        end
        ap_ST_fsm_state182 : begin
            ap_NS_fsm = ap_ST_fsm_state183;
        end
        ap_ST_fsm_state183 : begin
            ap_NS_fsm = ap_ST_fsm_state184;
        end
        ap_ST_fsm_state184 : begin
            ap_NS_fsm = ap_ST_fsm_state185;
        end
        ap_ST_fsm_state185 : begin
            ap_NS_fsm = ap_ST_fsm_state186;
        end
        ap_ST_fsm_state186 : begin
            ap_NS_fsm = ap_ST_fsm_state187;
        end
        ap_ST_fsm_state187 : begin
            ap_NS_fsm = ap_ST_fsm_state188;
        end
        ap_ST_fsm_state188 : begin
            ap_NS_fsm = ap_ST_fsm_state189;
        end
        ap_ST_fsm_state189 : begin
            ap_NS_fsm = ap_ST_fsm_state190;
        end
        ap_ST_fsm_state190 : begin
            ap_NS_fsm = ap_ST_fsm_state191;
        end
        ap_ST_fsm_state191 : begin
            ap_NS_fsm = ap_ST_fsm_state192;
        end
        ap_ST_fsm_state192 : begin
            ap_NS_fsm = ap_ST_fsm_state193;
        end
        ap_ST_fsm_state193 : begin
            ap_NS_fsm = ap_ST_fsm_state194;
        end
        ap_ST_fsm_state194 : begin
            ap_NS_fsm = ap_ST_fsm_state195;
        end
        ap_ST_fsm_state195 : begin
            ap_NS_fsm = ap_ST_fsm_state196;
        end
        ap_ST_fsm_state196 : begin
            ap_NS_fsm = ap_ST_fsm_state197;
        end
        ap_ST_fsm_state197 : begin
            ap_NS_fsm = ap_ST_fsm_state198;
        end
        ap_ST_fsm_state198 : begin
            ap_NS_fsm = ap_ST_fsm_state152;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((ap_enable_reg_pp4_iter1 == 1'b0) & (icmp_ln62_fu_873_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage1;
            end else if (((ap_enable_reg_pp4_iter1 == 1'b0) & (icmp_ln62_fu_873_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state208;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_pp4_stage1 : begin
            if ((1'b0 == ap_block_pp4_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage1;
            end
        end
        ap_ST_fsm_pp4_stage2 : begin
            if ((1'b0 == ap_block_pp4_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage2;
            end
        end
        ap_ST_fsm_pp4_stage3 : begin
            if ((~((ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage3) & (1'b0 == ap_block_pp4_stage3_subdone)) & (1'b0 == ap_block_pp4_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage4;
            end else if (((ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage3) & (1'b0 == ap_block_pp4_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state208;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage3;
            end
        end
        ap_ST_fsm_pp4_stage4 : begin
            if ((1'b0 == ap_block_pp4_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage4;
            end
        end
        ap_ST_fsm_state208 : begin
            ap_NS_fsm = ap_ST_fsm_state209;
        end
        ap_ST_fsm_state209 : begin
            ap_NS_fsm = ap_ST_fsm_state210;
        end
        ap_ST_fsm_state210 : begin
            ap_NS_fsm = ap_ST_fsm_state211;
        end
        ap_ST_fsm_state211 : begin
            ap_NS_fsm = ap_ST_fsm_state212;
        end
        ap_ST_fsm_state212 : begin
            ap_NS_fsm = ap_ST_fsm_state213;
        end
        ap_ST_fsm_state213 : begin
            ap_NS_fsm = ap_ST_fsm_state214;
        end
        ap_ST_fsm_state214 : begin
            ap_NS_fsm = ap_ST_fsm_state215;
        end
        ap_ST_fsm_state215 : begin
            ap_NS_fsm = ap_ST_fsm_state216;
        end
        ap_ST_fsm_state216 : begin
            ap_NS_fsm = ap_ST_fsm_state217;
        end
        ap_ST_fsm_state217 : begin
            ap_NS_fsm = ap_ST_fsm_state218;
        end
        ap_ST_fsm_state218 : begin
            ap_NS_fsm = ap_ST_fsm_state219;
        end
        ap_ST_fsm_state219 : begin
            ap_NS_fsm = ap_ST_fsm_state220;
        end
        ap_ST_fsm_state220 : begin
            ap_NS_fsm = ap_ST_fsm_state221;
        end
        ap_ST_fsm_state221 : begin
            ap_NS_fsm = ap_ST_fsm_state222;
        end
        ap_ST_fsm_state222 : begin
            ap_NS_fsm = ap_ST_fsm_state223;
        end
        ap_ST_fsm_state223 : begin
            ap_NS_fsm = ap_ST_fsm_state224;
        end
        ap_ST_fsm_state224 : begin
            ap_NS_fsm = ap_ST_fsm_state225;
        end
        ap_ST_fsm_state225 : begin
            ap_NS_fsm = ap_ST_fsm_state226;
        end
        ap_ST_fsm_state226 : begin
            ap_NS_fsm = ap_ST_fsm_state227;
        end
        ap_ST_fsm_state227 : begin
            ap_NS_fsm = ap_ST_fsm_state228;
        end
        ap_ST_fsm_state228 : begin
            ap_NS_fsm = ap_ST_fsm_state229;
        end
        ap_ST_fsm_state229 : begin
            ap_NS_fsm = ap_ST_fsm_state230;
        end
        ap_ST_fsm_state230 : begin
            ap_NS_fsm = ap_ST_fsm_state231;
        end
        ap_ST_fsm_state231 : begin
            ap_NS_fsm = ap_ST_fsm_state232;
        end
        ap_ST_fsm_state232 : begin
            ap_NS_fsm = ap_ST_fsm_state233;
        end
        ap_ST_fsm_state233 : begin
            ap_NS_fsm = ap_ST_fsm_state234;
        end
        ap_ST_fsm_state234 : begin
            ap_NS_fsm = ap_ST_fsm_state235;
        end
        ap_ST_fsm_state235 : begin
            ap_NS_fsm = ap_ST_fsm_state236;
        end
        ap_ST_fsm_state236 : begin
            ap_NS_fsm = ap_ST_fsm_state237;
        end
        ap_ST_fsm_state237 : begin
            ap_NS_fsm = ap_ST_fsm_state238;
        end
        ap_ST_fsm_state238 : begin
            ap_NS_fsm = ap_ST_fsm_state239;
        end
        ap_ST_fsm_state239 : begin
            ap_NS_fsm = ap_ST_fsm_state240;
        end
        ap_ST_fsm_state240 : begin
            ap_NS_fsm = ap_ST_fsm_state241;
        end
        ap_ST_fsm_state241 : begin
            ap_NS_fsm = ap_ST_fsm_state242;
        end
        ap_ST_fsm_state242 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln32_fu_606_p2 = (shl_ln_reg_941 + zext_ln30_fu_602_p1);

assign add_ln41_fu_671_p2 = (shl_ln1_reg_1027 + zext_ln39_fu_662_p1);

assign add_ln49_fu_745_p2 = (shl_ln2_reg_1084 + zext_ln47_fu_736_p1);

assign add_ln57_fu_823_p2 = (shl_ln3_reg_1138 + ap_phi_mux_j6_0_phi_fu_473_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp1_stage3 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp1_stage4 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp2_stage2 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_pp2_stage3 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_pp2_stage4 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_pp3_stage1 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_pp3_stage2 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_pp3_stage3 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_pp3_stage4 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_pp4_stage1 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_pp4_stage2 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_pp4_stage3 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_pp4_stage4 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state117 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state151 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state152 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state164 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state198 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state208 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state242 = ap_CS_fsm[32'd143];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001_ignoreCallOp312 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((gmem0_RVALID == 1'b0) & (icmp_ln30_reg_946 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001_ignoreCallOp308 = ((gmem0_RVALID == 1'b0) & (icmp_ln30_reg_946 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((gmem0_RVALID == 1'b0) & (icmp_ln30_reg_946 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001_ignoreCallOp309 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001_ignoreCallOp310 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001_ignoreCallOp311 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001_ignoreCallOp402 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001_ignoreCallOp398 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_11001_ignoreCallOp399 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_11001_ignoreCallOp400 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4_11001_ignoreCallOp401 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state100_pp1_stage2_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state100_pp1_stage2_iter8_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state101_pp1_stage3_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state101_pp1_stage3_iter8_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state102_pp1_stage4_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state102_pp1_stage4_iter8_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state103_pp1_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state103_pp1_stage0_iter9_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state106_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state107_pp2_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state108_pp2_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state109_pp2_stage3_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state10_pp0_stage1_iter0 = ((gmem0_RVALID == 1'b0) & (icmp_ln30_reg_946 == 1'd0));
end

always @ (*) begin
    ap_block_state10_pp0_stage1_iter0_ignore_call0 = ((gmem0_RVALID == 1'b0) & (icmp_ln30_reg_946 == 1'd0));
end

assign ap_block_state110_pp2_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state111_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state112_pp2_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state113_pp2_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state114_pp2_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state115_pp2_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state116_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage2_iter0_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage3_iter0_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage4_iter0_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter1_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state153_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state154_pp3_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state155_pp3_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state156_pp3_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state157_pp3_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state158_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state159_pp3_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage1_iter1_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state160_pp3_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state161_pp3_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state162_pp3_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state163_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage2_iter1_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage3_iter1_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage4_iter1_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state199_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter2_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state200_pp4_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state201_pp4_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state202_pp4_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state203_pp4_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state204_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state205_pp4_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state206_pp4_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state207_pp4_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage1_iter2_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage2_iter2_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage3_iter2_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage4_iter2_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter3_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage1_iter3_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage2_iter3_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage3_iter3_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage4_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage4_iter3_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter4_ignore_call0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = ((gmem0_ARREADY == 1'b0) & (icmp_ln28_fu_561_p2 == 1'd0));
end

assign ap_block_state30_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage1_iter4_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage2_iter4_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage3_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage3_iter4_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage4_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage4_iter4_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter5_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage1_iter5_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage2_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage2_iter5_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage3_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage3_iter5_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage4_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage4_iter5_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter6_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage1_iter6_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage2_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage2_iter6_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage3_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage3_iter6_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage4_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage4_iter6_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage0_iter7_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage1_iter7_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage2_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage2_iter7_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage3_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage3_iter7_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage4_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage4_iter7_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage0_iter8_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage1_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage1_iter8_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage2_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage2_iter8_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage3_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage3_iter8_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage4_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage4_iter8_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage0_iter9_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp1_stage0_iter0_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp1_stage1_iter0_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp1_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp1_stage2_iter0_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp1_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp1_stage3_iter0_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp1_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp1_stage4_iter0_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp1_stage0_iter1_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp1_stage1_iter1_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp1_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp1_stage2_iter1_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp1_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp1_stage3_iter1_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp1_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp1_stage4_iter1_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp1_stage0_iter2_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp1_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp1_stage1_iter2_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp1_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp1_stage2_iter2_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp1_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp1_stage3_iter2_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp1_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp1_stage4_iter2_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp1_stage0_iter3_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp1_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp1_stage1_iter3_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp1_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp1_stage2_iter3_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp1_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp1_stage3_iter3_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp1_stage4_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp1_stage4_iter3_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp1_stage0_iter4_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp1_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp1_stage1_iter4_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state80_pp1_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state80_pp1_stage2_iter4_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state81_pp1_stage3_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state81_pp1_stage3_iter4_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state82_pp1_stage4_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state82_pp1_stage4_iter4_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state83_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state83_pp1_stage0_iter5_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state84_pp1_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state84_pp1_stage1_iter5_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state85_pp1_stage2_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state85_pp1_stage2_iter5_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state86_pp1_stage3_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state86_pp1_stage3_iter5_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state87_pp1_stage4_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state87_pp1_stage4_iter5_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state88_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state88_pp1_stage0_iter6_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state89_pp1_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state89_pp1_stage1_iter6_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state90_pp1_stage2_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state90_pp1_stage2_iter6_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state91_pp1_stage3_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state91_pp1_stage3_iter6_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state92_pp1_stage4_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state92_pp1_stage4_iter6_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state93_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state93_pp1_stage0_iter7_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state94_pp1_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state94_pp1_stage1_iter7_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state95_pp1_stage2_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state95_pp1_stage2_iter7_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state96_pp1_stage3_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state96_pp1_stage3_iter7_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state97_pp1_stage4_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state97_pp1_stage4_iter7_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state98_pp1_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state98_pp1_stage0_iter8_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state99_pp1_stage1_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state99_pp1_stage1_iter8_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b1_address0 = zext_ln29_fu_573_p1;

assign b2_address0 = zext_ln38_fu_633_p1;

assign empty_fu_551_p1 = op1_fu_541_p4;

assign i_1_fu_627_p2 = (i1_0_reg_360 + 4'd1);

assign i_2_fu_781_p2 = (i5_0_reg_448 + 2'd1);

assign i_3_fu_692_p2 = (i3_0_reg_392 + 3'd1);

assign i_fu_567_p2 = (i_0_reg_327 + 5'd1);

assign icmp_ln28_fu_561_p2 = ((i_0_reg_327 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln30_1_fu_616_p2 = ((j_reg_950 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_590_p2 = ((ap_phi_mux_j_0_phi_fu_353_p4 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_621_p2 = ((i1_0_reg_360 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln39_1_fu_681_p2 = ((j_1_reg_1036 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_650_p2 = ((ap_phi_mux_j2_0_phi_fu_385_p4 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_686_p2 = ((i3_0_reg_392 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_724_p2 = ((ap_phi_mux_j4_0_phi_fu_417_p4 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_775_p2 = ((i5_0_reg_448 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_807_p2 = ((ap_phi_mux_j6_0_phi_fu_473_p4 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_873_p2 = ((ap_phi_mux_j7_0_phi_fu_496_p4 == 2'd2) ? 1'b1 : 1'b0);

assign j_1_fu_656_p2 = (ap_phi_mux_j2_0_phi_fu_385_p4 + 5'd1);

assign j_2_fu_730_p2 = (ap_phi_mux_j4_0_phi_fu_417_p4 + 4'd1);

assign j_3_fu_879_p2 = (ap_phi_mux_j7_0_phi_fu_496_p4 + 2'd1);

assign j_4_fu_813_p2 = (ap_phi_mux_j6_0_phi_fu_473_p4 + 3'd1);

assign j_fu_596_p2 = (ap_phi_mux_j_0_phi_fu_353_p4 + 11'd1);

assign op1_fu_541_p4 = {{op[31:2]}};

assign select_ln54_fu_791_p3 = ((trunc_ln54_fu_787_p1[0:0] === 1'b1) ? 32'd3199511782 : 32'd1057015861);

assign select_ln64_1_fu_898_p3 = ((trunc_ln64_fu_885_p1[0:0] === 1'b1) ? 32'd1074306789 : 32'd3236169148);

assign select_ln64_fu_889_p3 = ((trunc_ln64_fu_885_p1[0:0] === 1'b1) ? vec4_1_049_reg_424 : vec4_0_048_reg_436);

assign shl_ln1_fu_643_p3 = {{trunc_ln41_reg_993}, {4'd0}};

assign shl_ln2_fu_716_p3 = {{trunc_ln46_fu_698_p1}, {3'd0}};

assign shl_ln3_fu_799_p3 = {{trunc_ln54_fu_787_p1}, {2'd0}};

assign shl_ln_fu_583_p3 = {{trunc_ln32_reg_931}, {10'd0}};

assign trunc_ln32_fu_579_p1 = i_0_reg_327[3:0];

assign trunc_ln41_fu_639_p1 = i1_0_reg_360[2:0];

assign trunc_ln46_fu_698_p1 = i3_0_reg_392[1:0];

assign trunc_ln54_fu_787_p1 = i5_0_reg_448[0:0];

assign trunc_ln57_fu_819_p1 = ap_phi_mux_j6_0_phi_fu_473_p4[1:0];

assign trunc_ln64_fu_885_p1 = ap_phi_mux_j7_0_phi_fu_496_p4[0:0];

assign vec4_1_1_fu_859_p3 = ((trunc_ln54_reg_1127[0:0] === 1'b1) ? grp_act_fun_fu_503_ap_return : vec4_1_049_reg_424);

assign vec4_1_2_fu_866_p3 = ((trunc_ln54_reg_1127[0:0] === 1'b1) ? vec4_0_048_reg_436 : grp_act_fun_fu_503_ap_return);

assign w1_address0 = zext_ln32_fu_611_p1;

assign w2_address0 = zext_ln41_1_fu_676_p1;

assign w3_address0 = zext_ln49_1_fu_750_p1;

assign w4_address0 = zext_ln57_fu_828_p1;

assign zext_ln29_fu_573_p1 = i_0_reg_327;

assign zext_ln30_fu_602_p1 = ap_phi_mux_j_0_phi_fu_353_p4;

assign zext_ln32_fu_611_p1 = add_ln32_fu_606_p2;

assign zext_ln38_fu_633_p1 = i1_0_reg_360;

assign zext_ln39_fu_662_p1 = ap_phi_mux_j2_0_phi_fu_385_p4;

assign zext_ln41_1_fu_676_p1 = add_ln41_fu_671_p2;

assign zext_ln41_fu_666_p1 = ap_phi_mux_j2_0_phi_fu_385_p4;

assign zext_ln47_fu_736_p1 = ap_phi_mux_j4_0_phi_fu_417_p4;

assign zext_ln49_1_fu_750_p1 = add_ln49_fu_745_p2;

assign zext_ln49_fu_740_p1 = ap_phi_mux_j4_0_phi_fu_417_p4;

assign zext_ln57_fu_828_p1 = add_ln57_fu_823_p2;

always @ (posedge ap_clk) begin
    gmem0_addr_reg_907[31:30] <= 2'b00;
    shl_ln_reg_941[9:0] <= 10'b0000000000;
    shl_ln1_reg_1027[3:0] <= 4'b0000;
    shl_ln2_reg_1084[2:0] <= 3'b000;
    shl_ln3_reg_1138[1:0] <= 2'b00;
end

endmodule //kernel
