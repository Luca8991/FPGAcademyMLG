-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity act_fun is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    vec : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of act_fun is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_C0800000 : STD_LOGIC_VECTOR (31 downto 0) := "11000000100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_40800000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000100000000000000000000000";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_BFF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3FD0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111010000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3FE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal grp_fu_74_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_99 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter33 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal and_ln10_3_reg_265 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_3_reg_265_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln6_reg_244 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln6_reg_244_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_99_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_99_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_99_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_99_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_99_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_99_pp0_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_90_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_105 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln10_3_reg_265_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln6_reg_244_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_95_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_110 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln10_3_reg_265_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln6_reg_244_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal vec_read_reg_227 : STD_LOGIC_VECTOR (31 downto 0);
    signal vec_read_reg_227_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln6_fu_145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln6_reg_238 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln6_reg_238_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln6_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln6_reg_244_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln6_reg_244_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln6_reg_244_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln6_reg_244_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln6_reg_244_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln6_reg_244_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln6_reg_244_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln6_reg_244_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln6_reg_244_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln6_reg_244_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln6_reg_244_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln6_reg_244_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln6_reg_244_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln6_reg_244_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln6_reg_244_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln6_reg_244_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln6_reg_244_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln6_reg_244_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln6_reg_244_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln6_reg_244_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln6_reg_244_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln6_reg_244_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln6_reg_244_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln6_reg_244_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln6_reg_244_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln6_reg_244_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln6_reg_244_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln6_reg_244_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_44_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_reg_250 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln6_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln6_reg_255 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln6_reg_255_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln6_reg_255_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln6_reg_255_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln6_reg_255_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln6_reg_255_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln6_reg_255_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln6_reg_255_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln6_reg_255_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln6_reg_255_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln6_reg_255_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln6_reg_255_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln6_reg_255_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln6_reg_255_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln6_reg_255_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln6_reg_255_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln6_reg_255_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln6_reg_255_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln6_reg_255_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln6_reg_255_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln6_reg_255_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln6_reg_255_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln6_reg_255_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln6_reg_255_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln6_reg_255_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln6_reg_255_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln6_reg_255_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln6_reg_255_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln6_reg_255_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln6_reg_255_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_1_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_1_reg_260 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_1_reg_260_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_1_reg_260_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_1_reg_260_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_1_reg_260_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_1_reg_260_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_1_reg_260_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_1_reg_260_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_1_reg_260_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_1_reg_260_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_1_reg_260_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_1_reg_260_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_1_reg_260_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_1_reg_260_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_1_reg_260_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_1_reg_260_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_1_reg_260_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_1_reg_260_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_1_reg_260_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_1_reg_260_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_1_reg_260_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_1_reg_260_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_1_reg_260_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_1_reg_260_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_1_reg_260_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_1_reg_260_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_1_reg_260_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_1_reg_260_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_1_reg_260_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_1_reg_260_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_3_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_3_reg_265_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_3_reg_265_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_3_reg_265_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_3_reg_265_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_3_reg_265_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_3_reg_265_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_3_reg_265_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_3_reg_265_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_3_reg_265_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_3_reg_265_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_3_reg_265_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_3_reg_265_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_3_reg_265_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_3_reg_265_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_3_reg_265_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_3_reg_265_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_3_reg_265_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_3_reg_265_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_3_reg_265_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_3_reg_265_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_3_reg_265_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_3_reg_265_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_3_reg_265_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_3_reg_265_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_3_reg_265_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_3_reg_265_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_85_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_reg_270 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_38_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal vec_assign_reg_275 : STD_LOGIC_VECTOR (31 downto 0);
    signal vec_assign_reg_275_pp0_iter28_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vec_assign_reg_275_pp0_iter29_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vec_assign_reg_275_pp0_iter30_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vec_assign_reg_275_pp0_iter31_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vec_assign_reg_275_pp0_iter32_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_80_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_reg_280 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_fu_74_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln6_fu_116_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_119_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln6_fu_129_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln6_1_fu_139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln6_fu_133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_48_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_54_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_59_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_69_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln8_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_64_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_2_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_1_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_2_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_41_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln8_fu_206_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln10_fu_213_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_38_ce : STD_LOGIC;
    signal grp_fu_41_ce : STD_LOGIC;
    signal grp_fu_44_ce : STD_LOGIC;
    signal grp_fu_48_ce : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal grp_fu_54_ce : STD_LOGIC;
    signal grp_fu_59_ce : STD_LOGIC;
    signal grp_fu_64_ce : STD_LOGIC;
    signal grp_fu_69_ce : STD_LOGIC;
    signal grp_fu_74_ce : STD_LOGIC;
    signal grp_fu_80_ce : STD_LOGIC;
    signal grp_fu_85_ce : STD_LOGIC;
    signal grp_fu_90_ce : STD_LOGIC;
    signal grp_fu_95_ce : STD_LOGIC;
    signal select_ln6_fu_220_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;
    signal vec_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_int_reg : STD_LOGIC_VECTOR (31 downto 0);

    component kernel_fptrunc_64g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_fpext_32nscud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kernel_fcmp_32ns_hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component kernel_dadd_64ns_ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kernel_dsub_64ns_jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kernel_dmul_64ns_kbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    kernel_fptrunc_64g8j_U23 : component kernel_fptrunc_64g8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_110,
        ce => grp_fu_38_ce,
        dout => grp_fu_38_p1);

    kernel_fptrunc_64g8j_U24 : component kernel_fptrunc_64g8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_28_reg_280,
        ce => grp_fu_41_ce,
        dout => grp_fu_41_p1);

    kernel_fpext_32nscud_U25 : component kernel_fpext_32nscud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => vec_int_reg,
        ce => grp_fu_44_ce,
        dout => grp_fu_44_p1);

    kernel_fcmp_32ns_hbi_U26 : component kernel_fcmp_32ns_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => vec_int_reg,
        din1 => ap_const_lv32_C0800000,
        ce => grp_fu_48_ce,
        opcode => ap_const_lv5_5,
        dout => grp_fu_48_p2);

    kernel_fcmp_32ns_hbi_U27 : component kernel_fcmp_32ns_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => vec_read_reg_227_pp0_iter1_reg,
        din1 => ap_const_lv32_C0800000,
        ce => grp_fu_54_ce,
        opcode => ap_const_lv5_2,
        dout => grp_fu_54_p2);

    kernel_fcmp_32ns_hbi_U28 : component kernel_fcmp_32ns_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => vec_read_reg_227_pp0_iter1_reg,
        din1 => ap_const_lv32_0,
        ce => grp_fu_59_ce,
        opcode => ap_const_lv5_5,
        dout => grp_fu_59_p2);

    kernel_fcmp_32ns_hbi_U29 : component kernel_fcmp_32ns_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => vec_read_reg_227_pp0_iter1_reg,
        din1 => ap_const_lv32_0,
        ce => grp_fu_64_ce,
        opcode => ap_const_lv5_2,
        dout => grp_fu_64_p2);

    kernel_fcmp_32ns_hbi_U30 : component kernel_fcmp_32ns_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => vec_read_reg_227_pp0_iter1_reg,
        din1 => ap_const_lv32_40800000,
        ce => grp_fu_69_ce,
        opcode => ap_const_lv5_4,
        dout => grp_fu_69_p2);

    kernel_dadd_64ns_ibs_U31 : component kernel_dadd_64ns_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_20_reg_270,
        din1 => grp_fu_74_p1,
        ce => grp_fu_74_ce,
        dout => grp_fu_74_p2);

    kernel_dsub_64ns_jbC_U32 : component kernel_dsub_64ns_jbC
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_3FF0000000000000,
        din1 => reg_110,
        ce => grp_fu_80_ce,
        dout => grp_fu_80_p2);

    kernel_dmul_64ns_kbM_U33 : component kernel_dmul_64ns_kbM
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_19_reg_250,
        din1 => ap_const_lv64_3FD0000000000000,
        ce => grp_fu_85_ce,
        dout => grp_fu_85_p2);

    kernel_dmul_64ns_kbM_U34 : component kernel_dmul_64ns_kbM
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_99,
        din1 => ap_const_lv64_3FE0000000000000,
        ce => grp_fu_90_ce,
        dout => grp_fu_90_p2);

    kernel_dmul_64ns_kbM_U35 : component kernel_dmul_64ns_kbM
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_105,
        din1 => reg_99_pp0_iter19_reg,
        ce => grp_fu_95_ce,
        dout => grp_fu_95_p2);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce_reg) and (ap_const_lv1_0 = and_ln6_reg_244_pp0_iter2_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln10_3_reg_265 <= and_ln10_3_fu_196_p2;
                and_ln8_1_reg_260 <= and_ln8_1_fu_167_p2;
                xor_ln6_reg_255 <= xor_ln6_fu_157_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln10_3_reg_265_pp0_iter10_reg <= and_ln10_3_reg_265_pp0_iter9_reg;
                and_ln10_3_reg_265_pp0_iter11_reg <= and_ln10_3_reg_265_pp0_iter10_reg;
                and_ln10_3_reg_265_pp0_iter12_reg <= and_ln10_3_reg_265_pp0_iter11_reg;
                and_ln10_3_reg_265_pp0_iter13_reg <= and_ln10_3_reg_265_pp0_iter12_reg;
                and_ln10_3_reg_265_pp0_iter14_reg <= and_ln10_3_reg_265_pp0_iter13_reg;
                and_ln10_3_reg_265_pp0_iter15_reg <= and_ln10_3_reg_265_pp0_iter14_reg;
                and_ln10_3_reg_265_pp0_iter16_reg <= and_ln10_3_reg_265_pp0_iter15_reg;
                and_ln10_3_reg_265_pp0_iter17_reg <= and_ln10_3_reg_265_pp0_iter16_reg;
                and_ln10_3_reg_265_pp0_iter18_reg <= and_ln10_3_reg_265_pp0_iter17_reg;
                and_ln10_3_reg_265_pp0_iter19_reg <= and_ln10_3_reg_265_pp0_iter18_reg;
                and_ln10_3_reg_265_pp0_iter20_reg <= and_ln10_3_reg_265_pp0_iter19_reg;
                and_ln10_3_reg_265_pp0_iter21_reg <= and_ln10_3_reg_265_pp0_iter20_reg;
                and_ln10_3_reg_265_pp0_iter22_reg <= and_ln10_3_reg_265_pp0_iter21_reg;
                and_ln10_3_reg_265_pp0_iter23_reg <= and_ln10_3_reg_265_pp0_iter22_reg;
                and_ln10_3_reg_265_pp0_iter24_reg <= and_ln10_3_reg_265_pp0_iter23_reg;
                and_ln10_3_reg_265_pp0_iter25_reg <= and_ln10_3_reg_265_pp0_iter24_reg;
                and_ln10_3_reg_265_pp0_iter26_reg <= and_ln10_3_reg_265_pp0_iter25_reg;
                and_ln10_3_reg_265_pp0_iter27_reg <= and_ln10_3_reg_265_pp0_iter26_reg;
                and_ln10_3_reg_265_pp0_iter28_reg <= and_ln10_3_reg_265_pp0_iter27_reg;
                and_ln10_3_reg_265_pp0_iter29_reg <= and_ln10_3_reg_265_pp0_iter28_reg;
                and_ln10_3_reg_265_pp0_iter30_reg <= and_ln10_3_reg_265_pp0_iter29_reg;
                and_ln10_3_reg_265_pp0_iter31_reg <= and_ln10_3_reg_265_pp0_iter30_reg;
                and_ln10_3_reg_265_pp0_iter32_reg <= and_ln10_3_reg_265_pp0_iter31_reg;
                and_ln10_3_reg_265_pp0_iter4_reg <= and_ln10_3_reg_265;
                and_ln10_3_reg_265_pp0_iter5_reg <= and_ln10_3_reg_265_pp0_iter4_reg;
                and_ln10_3_reg_265_pp0_iter6_reg <= and_ln10_3_reg_265_pp0_iter5_reg;
                and_ln10_3_reg_265_pp0_iter7_reg <= and_ln10_3_reg_265_pp0_iter6_reg;
                and_ln10_3_reg_265_pp0_iter8_reg <= and_ln10_3_reg_265_pp0_iter7_reg;
                and_ln10_3_reg_265_pp0_iter9_reg <= and_ln10_3_reg_265_pp0_iter8_reg;
                and_ln6_reg_244 <= and_ln6_fu_151_p2;
                and_ln6_reg_244_pp0_iter10_reg <= and_ln6_reg_244_pp0_iter9_reg;
                and_ln6_reg_244_pp0_iter11_reg <= and_ln6_reg_244_pp0_iter10_reg;
                and_ln6_reg_244_pp0_iter12_reg <= and_ln6_reg_244_pp0_iter11_reg;
                and_ln6_reg_244_pp0_iter13_reg <= and_ln6_reg_244_pp0_iter12_reg;
                and_ln6_reg_244_pp0_iter14_reg <= and_ln6_reg_244_pp0_iter13_reg;
                and_ln6_reg_244_pp0_iter15_reg <= and_ln6_reg_244_pp0_iter14_reg;
                and_ln6_reg_244_pp0_iter16_reg <= and_ln6_reg_244_pp0_iter15_reg;
                and_ln6_reg_244_pp0_iter17_reg <= and_ln6_reg_244_pp0_iter16_reg;
                and_ln6_reg_244_pp0_iter18_reg <= and_ln6_reg_244_pp0_iter17_reg;
                and_ln6_reg_244_pp0_iter19_reg <= and_ln6_reg_244_pp0_iter18_reg;
                and_ln6_reg_244_pp0_iter20_reg <= and_ln6_reg_244_pp0_iter19_reg;
                and_ln6_reg_244_pp0_iter21_reg <= and_ln6_reg_244_pp0_iter20_reg;
                and_ln6_reg_244_pp0_iter22_reg <= and_ln6_reg_244_pp0_iter21_reg;
                and_ln6_reg_244_pp0_iter23_reg <= and_ln6_reg_244_pp0_iter22_reg;
                and_ln6_reg_244_pp0_iter24_reg <= and_ln6_reg_244_pp0_iter23_reg;
                and_ln6_reg_244_pp0_iter25_reg <= and_ln6_reg_244_pp0_iter24_reg;
                and_ln6_reg_244_pp0_iter26_reg <= and_ln6_reg_244_pp0_iter25_reg;
                and_ln6_reg_244_pp0_iter27_reg <= and_ln6_reg_244_pp0_iter26_reg;
                and_ln6_reg_244_pp0_iter28_reg <= and_ln6_reg_244_pp0_iter27_reg;
                and_ln6_reg_244_pp0_iter29_reg <= and_ln6_reg_244_pp0_iter28_reg;
                and_ln6_reg_244_pp0_iter2_reg <= and_ln6_reg_244;
                and_ln6_reg_244_pp0_iter30_reg <= and_ln6_reg_244_pp0_iter29_reg;
                and_ln6_reg_244_pp0_iter31_reg <= and_ln6_reg_244_pp0_iter30_reg;
                and_ln6_reg_244_pp0_iter32_reg <= and_ln6_reg_244_pp0_iter31_reg;
                and_ln6_reg_244_pp0_iter3_reg <= and_ln6_reg_244_pp0_iter2_reg;
                and_ln6_reg_244_pp0_iter4_reg <= and_ln6_reg_244_pp0_iter3_reg;
                and_ln6_reg_244_pp0_iter5_reg <= and_ln6_reg_244_pp0_iter4_reg;
                and_ln6_reg_244_pp0_iter6_reg <= and_ln6_reg_244_pp0_iter5_reg;
                and_ln6_reg_244_pp0_iter7_reg <= and_ln6_reg_244_pp0_iter6_reg;
                and_ln6_reg_244_pp0_iter8_reg <= and_ln6_reg_244_pp0_iter7_reg;
                and_ln6_reg_244_pp0_iter9_reg <= and_ln6_reg_244_pp0_iter8_reg;
                and_ln8_1_reg_260_pp0_iter10_reg <= and_ln8_1_reg_260_pp0_iter9_reg;
                and_ln8_1_reg_260_pp0_iter11_reg <= and_ln8_1_reg_260_pp0_iter10_reg;
                and_ln8_1_reg_260_pp0_iter12_reg <= and_ln8_1_reg_260_pp0_iter11_reg;
                and_ln8_1_reg_260_pp0_iter13_reg <= and_ln8_1_reg_260_pp0_iter12_reg;
                and_ln8_1_reg_260_pp0_iter14_reg <= and_ln8_1_reg_260_pp0_iter13_reg;
                and_ln8_1_reg_260_pp0_iter15_reg <= and_ln8_1_reg_260_pp0_iter14_reg;
                and_ln8_1_reg_260_pp0_iter16_reg <= and_ln8_1_reg_260_pp0_iter15_reg;
                and_ln8_1_reg_260_pp0_iter17_reg <= and_ln8_1_reg_260_pp0_iter16_reg;
                and_ln8_1_reg_260_pp0_iter18_reg <= and_ln8_1_reg_260_pp0_iter17_reg;
                and_ln8_1_reg_260_pp0_iter19_reg <= and_ln8_1_reg_260_pp0_iter18_reg;
                and_ln8_1_reg_260_pp0_iter20_reg <= and_ln8_1_reg_260_pp0_iter19_reg;
                and_ln8_1_reg_260_pp0_iter21_reg <= and_ln8_1_reg_260_pp0_iter20_reg;
                and_ln8_1_reg_260_pp0_iter22_reg <= and_ln8_1_reg_260_pp0_iter21_reg;
                and_ln8_1_reg_260_pp0_iter23_reg <= and_ln8_1_reg_260_pp0_iter22_reg;
                and_ln8_1_reg_260_pp0_iter24_reg <= and_ln8_1_reg_260_pp0_iter23_reg;
                and_ln8_1_reg_260_pp0_iter25_reg <= and_ln8_1_reg_260_pp0_iter24_reg;
                and_ln8_1_reg_260_pp0_iter26_reg <= and_ln8_1_reg_260_pp0_iter25_reg;
                and_ln8_1_reg_260_pp0_iter27_reg <= and_ln8_1_reg_260_pp0_iter26_reg;
                and_ln8_1_reg_260_pp0_iter28_reg <= and_ln8_1_reg_260_pp0_iter27_reg;
                and_ln8_1_reg_260_pp0_iter29_reg <= and_ln8_1_reg_260_pp0_iter28_reg;
                and_ln8_1_reg_260_pp0_iter30_reg <= and_ln8_1_reg_260_pp0_iter29_reg;
                and_ln8_1_reg_260_pp0_iter31_reg <= and_ln8_1_reg_260_pp0_iter30_reg;
                and_ln8_1_reg_260_pp0_iter32_reg <= and_ln8_1_reg_260_pp0_iter31_reg;
                and_ln8_1_reg_260_pp0_iter4_reg <= and_ln8_1_reg_260;
                and_ln8_1_reg_260_pp0_iter5_reg <= and_ln8_1_reg_260_pp0_iter4_reg;
                and_ln8_1_reg_260_pp0_iter6_reg <= and_ln8_1_reg_260_pp0_iter5_reg;
                and_ln8_1_reg_260_pp0_iter7_reg <= and_ln8_1_reg_260_pp0_iter6_reg;
                and_ln8_1_reg_260_pp0_iter8_reg <= and_ln8_1_reg_260_pp0_iter7_reg;
                and_ln8_1_reg_260_pp0_iter9_reg <= and_ln8_1_reg_260_pp0_iter8_reg;
                or_ln6_reg_238 <= or_ln6_fu_145_p2;
                or_ln6_reg_238_pp0_iter2_reg <= or_ln6_reg_238;
                reg_99_pp0_iter14_reg <= reg_99;
                reg_99_pp0_iter15_reg <= reg_99_pp0_iter14_reg;
                reg_99_pp0_iter16_reg <= reg_99_pp0_iter15_reg;
                reg_99_pp0_iter17_reg <= reg_99_pp0_iter16_reg;
                reg_99_pp0_iter18_reg <= reg_99_pp0_iter17_reg;
                reg_99_pp0_iter19_reg <= reg_99_pp0_iter18_reg;
                tmp_19_reg_250 <= grp_fu_44_p1;
                vec_assign_reg_275_pp0_iter28_reg <= vec_assign_reg_275;
                vec_assign_reg_275_pp0_iter29_reg <= vec_assign_reg_275_pp0_iter28_reg;
                vec_assign_reg_275_pp0_iter30_reg <= vec_assign_reg_275_pp0_iter29_reg;
                vec_assign_reg_275_pp0_iter31_reg <= vec_assign_reg_275_pp0_iter30_reg;
                vec_assign_reg_275_pp0_iter32_reg <= vec_assign_reg_275_pp0_iter31_reg;
                vec_read_reg_227 <= vec_int_reg;
                vec_read_reg_227_pp0_iter1_reg <= vec_read_reg_227;
                xor_ln6_reg_255_pp0_iter10_reg <= xor_ln6_reg_255_pp0_iter9_reg;
                xor_ln6_reg_255_pp0_iter11_reg <= xor_ln6_reg_255_pp0_iter10_reg;
                xor_ln6_reg_255_pp0_iter12_reg <= xor_ln6_reg_255_pp0_iter11_reg;
                xor_ln6_reg_255_pp0_iter13_reg <= xor_ln6_reg_255_pp0_iter12_reg;
                xor_ln6_reg_255_pp0_iter14_reg <= xor_ln6_reg_255_pp0_iter13_reg;
                xor_ln6_reg_255_pp0_iter15_reg <= xor_ln6_reg_255_pp0_iter14_reg;
                xor_ln6_reg_255_pp0_iter16_reg <= xor_ln6_reg_255_pp0_iter15_reg;
                xor_ln6_reg_255_pp0_iter17_reg <= xor_ln6_reg_255_pp0_iter16_reg;
                xor_ln6_reg_255_pp0_iter18_reg <= xor_ln6_reg_255_pp0_iter17_reg;
                xor_ln6_reg_255_pp0_iter19_reg <= xor_ln6_reg_255_pp0_iter18_reg;
                xor_ln6_reg_255_pp0_iter20_reg <= xor_ln6_reg_255_pp0_iter19_reg;
                xor_ln6_reg_255_pp0_iter21_reg <= xor_ln6_reg_255_pp0_iter20_reg;
                xor_ln6_reg_255_pp0_iter22_reg <= xor_ln6_reg_255_pp0_iter21_reg;
                xor_ln6_reg_255_pp0_iter23_reg <= xor_ln6_reg_255_pp0_iter22_reg;
                xor_ln6_reg_255_pp0_iter24_reg <= xor_ln6_reg_255_pp0_iter23_reg;
                xor_ln6_reg_255_pp0_iter25_reg <= xor_ln6_reg_255_pp0_iter24_reg;
                xor_ln6_reg_255_pp0_iter26_reg <= xor_ln6_reg_255_pp0_iter25_reg;
                xor_ln6_reg_255_pp0_iter27_reg <= xor_ln6_reg_255_pp0_iter26_reg;
                xor_ln6_reg_255_pp0_iter28_reg <= xor_ln6_reg_255_pp0_iter27_reg;
                xor_ln6_reg_255_pp0_iter29_reg <= xor_ln6_reg_255_pp0_iter28_reg;
                xor_ln6_reg_255_pp0_iter30_reg <= xor_ln6_reg_255_pp0_iter29_reg;
                xor_ln6_reg_255_pp0_iter31_reg <= xor_ln6_reg_255_pp0_iter30_reg;
                xor_ln6_reg_255_pp0_iter32_reg <= xor_ln6_reg_255_pp0_iter31_reg;
                xor_ln6_reg_255_pp0_iter4_reg <= xor_ln6_reg_255;
                xor_ln6_reg_255_pp0_iter5_reg <= xor_ln6_reg_255_pp0_iter4_reg;
                xor_ln6_reg_255_pp0_iter6_reg <= xor_ln6_reg_255_pp0_iter5_reg;
                xor_ln6_reg_255_pp0_iter7_reg <= xor_ln6_reg_255_pp0_iter6_reg;
                xor_ln6_reg_255_pp0_iter8_reg <= xor_ln6_reg_255_pp0_iter7_reg;
                xor_ln6_reg_255_pp0_iter9_reg <= xor_ln6_reg_255_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= select_ln6_fu_220_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = and_ln10_3_reg_265_pp0_iter18_reg) and (ap_const_logic_1 = ap_ce_reg) and (ap_const_lv1_0 = and_ln6_reg_244_pp0_iter18_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_ce_reg) and (ap_const_lv1_0 = and_ln6_reg_244_pp0_iter18_reg) and (ap_const_lv1_0 = and_ln10_3_reg_265_pp0_iter18_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then
                reg_105 <= grp_fu_90_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = and_ln10_3_reg_265_pp0_iter24_reg) and (ap_const_logic_1 = ap_ce_reg) and (ap_const_lv1_0 = and_ln6_reg_244_pp0_iter24_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_ce_reg) and (ap_const_lv1_0 = and_ln6_reg_244_pp0_iter24_reg) and (ap_const_lv1_0 = and_ln10_3_reg_265_pp0_iter24_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then
                reg_110 <= grp_fu_95_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_ce_reg) and (ap_const_lv1_0 = and_ln6_reg_244_pp0_iter12_reg) and (ap_const_lv1_1 = and_ln10_3_reg_265_pp0_iter12_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_ce_reg) and (ap_const_lv1_0 = and_ln6_reg_244_pp0_iter12_reg) and (ap_const_lv1_0 = and_ln10_3_reg_265_pp0_iter12_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then
                reg_99 <= grp_fu_74_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce_reg) and (ap_const_lv1_0 = and_ln6_reg_244_pp0_iter6_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_20_reg_270 <= grp_fu_85_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln10_3_reg_265_pp0_iter30_reg) and (ap_const_logic_1 = ap_ce_reg) and (ap_const_lv1_0 = and_ln6_reg_244_pp0_iter30_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_28_reg_280 <= grp_fu_80_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce_reg) and (ap_const_lv1_0 = and_ln10_3_reg_265_pp0_iter26_reg) and (ap_const_lv1_0 = and_ln6_reg_244_pp0_iter26_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                vec_assign_reg_275 <= grp_fu_38_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                vec_int_reg <= vec;
            end if;
        end if;
    end process;
    and_ln10_1_fu_184_p2 <= (xor_ln8_fu_173_p2 and xor_ln6_fu_157_p2);
    and_ln10_2_fu_190_p2 <= (grp_fu_64_p2 and and_ln10_fu_179_p2);
    and_ln10_3_fu_196_p2 <= (and_ln10_2_fu_190_p2 and and_ln10_1_fu_184_p2);
    and_ln10_fu_179_p2 <= (or_ln6_reg_238_pp0_iter2_reg and grp_fu_69_p2);
    and_ln6_fu_151_p2 <= (or_ln6_fu_145_p2 and grp_fu_48_p2);
    and_ln8_1_fu_167_p2 <= (grp_fu_59_p2 and and_ln8_fu_162_p2);
    and_ln8_2_fu_202_p2 <= (xor_ln6_reg_255_pp0_iter32_reg and and_ln8_1_reg_260_pp0_iter32_reg);
    and_ln8_fu_162_p2 <= (or_ln6_reg_238_pp0_iter2_reg and grp_fu_54_p2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(select_ln6_fu_220_p3, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= select_ln6_fu_220_p3;
        end if; 
    end process;

    bitcast_ln6_fu_116_p1 <= vec_read_reg_227;

    grp_fu_38_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_38_ce <= ap_const_logic_1;
        else 
            grp_fu_38_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_41_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_41_ce <= ap_const_logic_1;
        else 
            grp_fu_41_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_44_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_44_ce <= ap_const_logic_1;
        else 
            grp_fu_44_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_48_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_48_ce <= ap_const_logic_1;
        else 
            grp_fu_48_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_54_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_54_ce <= ap_const_logic_1;
        else 
            grp_fu_54_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_59_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_59_ce <= ap_const_logic_1;
        else 
            grp_fu_59_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_64_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_64_ce <= ap_const_logic_1;
        else 
            grp_fu_64_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_69_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_69_ce <= ap_const_logic_1;
        else 
            grp_fu_69_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_74_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_74_ce <= ap_const_logic_1;
        else 
            grp_fu_74_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_74_p1_assign_proc : process(and_ln6_reg_244_pp0_iter7_reg, and_ln10_3_reg_265_pp0_iter7_reg, ap_block_pp0_stage0)
    begin
        if (((ap_const_lv1_0 = and_ln6_reg_244_pp0_iter7_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if ((ap_const_lv1_1 = and_ln10_3_reg_265_pp0_iter7_reg)) then 
                grp_fu_74_p1 <= ap_const_lv64_BFF0000000000000;
            elsif ((ap_const_lv1_0 = and_ln10_3_reg_265_pp0_iter7_reg)) then 
                grp_fu_74_p1 <= ap_const_lv64_3FF0000000000000;
            else 
                grp_fu_74_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_74_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_80_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_80_ce <= ap_const_logic_1;
        else 
            grp_fu_80_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_85_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_85_ce <= ap_const_logic_1;
        else 
            grp_fu_85_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_90_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_90_ce <= ap_const_logic_1;
        else 
            grp_fu_90_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_95_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_95_ce <= ap_const_logic_1;
        else 
            grp_fu_95_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln6_1_fu_139_p2 <= "1" when (trunc_ln6_fu_129_p1 = ap_const_lv23_0) else "0";
    icmp_ln6_fu_133_p2 <= "0" when (tmp_fu_119_p4 = ap_const_lv8_FF) else "1";
    or_ln6_fu_145_p2 <= (icmp_ln6_fu_133_p2 or icmp_ln6_1_fu_139_p2);
    select_ln10_fu_213_p3 <= 
        grp_fu_41_p1 when (and_ln10_3_reg_265_pp0_iter32_reg(0) = '1') else 
        select_ln8_fu_206_p3;
    select_ln6_fu_220_p3 <= 
        ap_const_lv32_0 when (and_ln6_reg_244_pp0_iter32_reg(0) = '1') else 
        select_ln10_fu_213_p3;
    select_ln8_fu_206_p3 <= 
        vec_assign_reg_275_pp0_iter32_reg when (and_ln8_2_fu_202_p2(0) = '1') else 
        ap_const_lv32_3F800000;
    tmp_fu_119_p4 <= bitcast_ln6_fu_116_p1(30 downto 23);
    trunc_ln6_fu_129_p1 <= bitcast_ln6_fu_116_p1(23 - 1 downto 0);
    xor_ln6_fu_157_p2 <= (ap_const_lv1_1 xor and_ln6_reg_244_pp0_iter2_reg);
    xor_ln8_fu_173_p2 <= (ap_const_lv1_1 xor and_ln8_1_fu_167_p2);
end behav;
