// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __kernel_w2_H__
#define __kernel_w2_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct kernel_w2_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 128;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(kernel_w2_ram) {
        ram[0] = "0b10111111000001001101110111011011";
        ram[1] = "0b10111110100010000100111100001010";
        ram[2] = "0b00111111010001110111001100010001";
        ram[3] = "0b00111111000001101101010110101011";
        ram[4] = "0b10111111100010000100010010000011";
        ram[5] = "0b00111111010101100110011011101110";
        ram[6] = "0b10111111011101001110110111011001";
        ram[7] = "0b10111111011111001000101011101011";
        ram[8] = "0b10111101111001001111100101000110";
        ram[9] = "0b10111110101001110010101011110110";
        ram[10] = "0b00111111100010010111101111000110";
        ram[11] = "0b10111110001000110101011101011001";
        ram[12] = "0b00111111100011101011011101101101";
        ram[13] = "0b10111111011100010101110111000100";
        ram[14] = "0b00111110111100110010111100110110";
        ram[15] = "0b00111111010111101010001100010110";
        ram[16] = "0b00111110000010000111111100111000";
        ram[17] = "0b00111110001101100001101111000000";
        ram[18] = "0b10111110110010111110010100010000";
        ram[19] = "0b10111111000011100110011100000111";
        ram[20] = "0b00111110101100110100010111011110";
        ram[21] = "0b00111101000110011101111000000111";
        ram[22] = "0b00111110100110101010100110111101";
        ram[23] = "0b10111100000011000011011111001100";
        ram[24] = "0b00111110011111011111110100011101";
        ram[25] = "0b10111110010011001111010100000010";
        ram[26] = "0b10111111010010011101010101101010";
        ram[27] = "0b00111110111011001101001111010001";
        ram[28] = "0b10111111000111000111111101010110";
        ram[29] = "0b00111111001110011010110111110111";
        ram[30] = "0b10111111000110110000100101100101";
        ram[31] = "0b00111110100001000111001001000001";
        ram[32] = "0b10111101100011101001110011001111";
        ram[33] = "0b10111101100010110111111110101000";
        ram[34] = "0b10111100011010000000001011101110";
        ram[35] = "0b00111110111111110001011010001110";
        ram[36] = "0b10111110111101100001100001101111";
        ram[37] = "0b00111111000100001000001001101110";
        ram[38] = "0b10111111011010011111110110111110";
        ram[39] = "0b10111111000010100011011111110000";
        ram[40] = "0b00111110101010011011000111110100";
        ram[41] = "0b10111110000110110010100111001111";
        ram[42] = "0b00111110100000100000000011100111";
        ram[43] = "0b00111110000101100000100000011100";
        ram[44] = "0b00111111000010010110110001111010";
        ram[45] = "0b10111111001011011111111101001001";
        ram[46] = "0b00111110011111100001001111000110";
        ram[47] = "0b00111111001011111101010010011001";
        ram[48] = "0b00111111000011010100100111010010";
        ram[49] = "0b00111111000111010010101110011000";
        ram[50] = "0b10111110101010001111010101110000";
        ram[51] = "0b10111110011111001110000101101001";
        ram[52] = "0b00111111100001010100111111110001";
        ram[53] = "0b10111110111100111111111110101101";
        ram[54] = "0b00111111011010100010100110011001";
        ram[55] = "0b00111110001111101100110110000010";
        ram[56] = "0b10111111001111000100001100110110";
        ram[57] = "0b00111110010100101011000111110011";
        ram[58] = "0b10111111100000110010001110101011";
        ram[59] = "0b00111110100101111000000000111101";
        ram[60] = "0b10111110110111010000100000100000";
        ram[61] = "0b00111110110111110011101000011110";
        ram[62] = "0b10111111010001101001101000010110";
        ram[63] = "0b10111110010011110000001010111010";
        ram[64] = "0b10111110110111000101010111101111";
        ram[65] = "0b10111101001010101100001010001010";
        ram[66] = "0b00111111001001111001101110011101";
        ram[67] = "0b00111111000011101001110110111010";
        ram[68] = "0b10111111000111111101001010101001";
        ram[69] = "0b00111111001000100111001011000010";
        ram[70] = "0b10111111001101110000111000100111";
        ram[71] = "0b10111111001110010011110010110001";
        ram[72] = "0b10111110000111111101011011100100";
        ram[73] = "0b10111110101110101101111111111001";
        ram[74] = "0b00111111011100001110000111000111";
        ram[75] = "0b10111100110111011011101001100010";
        ram[76] = "0b00111101101100010110111100000000";
        ram[77] = "0b10111111000111011010101010111010";
        ram[78] = "0b00111110100101111111110001010001";
        ram[79] = "0b00111111000110011000000000011000";
        ram[80] = "0b10111110100110100101010010010001";
        ram[81] = "0b10111111000111100100101000111100";
        ram[82] = "0b00111111001100101100111001010011";
        ram[83] = "0b00111110010101010010111000010101";
        ram[84] = "0b10111110110010000001111011100111";
        ram[85] = "0b00111110001011101101101100011110";
        ram[86] = "0b00111101000101010010001010100111";
        ram[87] = "0b10111110111011100110010101000101";
        ram[88] = "0b00111110011010011001001110101111";
        ram[89] = "0b10111110100011101100010111111011";
        ram[90] = "0b10111011010010111011001110000010";
        ram[91] = "0b10111101101111111011010101001000";
        ram[92] = "0b00111111010000101110100011011000";
        ram[93] = "0b10111110001111011110110101010000";
        ram[94] = "0b00111110110111010100110101010011";
        ram[95] = "0b10111101110011101001100101010001";
        ram[96] = "0b00111101101111110010010001000001";
        ram[97] = "0b10111110000000101101101100101010";
        ram[98] = "0b10111101101000010010101101101100";
        ram[99] = "0b00111101000010000110001100010100";
        ram[100] = "0b10111101010110101001011101111101";
        ram[101] = "0b00111110100010111010110010101111";
        ram[102] = "0b10111111001010101111101001011100";
        ram[103] = "0b10111111000100100011000000100111";
        ram[104] = "0b00111110110001000101000110101010";
        ram[105] = "0b10111110101101100100001001011011";
        ram[106] = "0b00111111010001110100001100100110";
        ram[107] = "0b00111110100010110110011100110001";
        ram[108] = "0b00111110110110111100111100111000";
        ram[109] = "0b10111100011101001111101100101000";
        ram[110] = "0b10111110100100000000111100110101";
        ram[111] = "0b00111110100010100111110110101111";
        ram[112] = "0b00111111001000001000100110010110";
        ram[113] = "0b00111111011000000000101010000010";
        ram[114] = "0b10111111010010000000000111111111";
        ram[115] = "0b00111101111001011110111110010001";
        ram[116] = "0b00111111100100110110010000010100";
        ram[117] = "0b10111111100011010010100001101100";
        ram[118] = "0b00111111010001111110111111000011";
        ram[119] = "0b00111111000011110111110110010011";
        ram[120] = "0b10111110100001101001111010110000";
        ram[121] = "0b00111110111110000000110101000100";
        ram[122] = "0b10111111100110110100000101100011";
        ram[123] = "0b10111101110000010101011010001001";
        ram[124] = "0b10111111100011001100100111100110";
        ram[125] = "0b00111111011111010100110000010011";
        ram[126] = "0b10111111001000011000011001001110";
        ram[127] = "0b10111110101110100001100010101011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(kernel_w2) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 128;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


kernel_w2_ram* meminst;


SC_CTOR(kernel_w2) {
meminst = new kernel_w2_ram("kernel_w2_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~kernel_w2() {
    delete meminst;
}


};//endmodule
#endif
