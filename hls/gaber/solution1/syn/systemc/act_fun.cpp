// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "act_fun.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic act_fun::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic act_fun::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<36> act_fun::ap_ST_fsm_state1 = "1";
const sc_lv<36> act_fun::ap_ST_fsm_state2 = "10";
const sc_lv<36> act_fun::ap_ST_fsm_state3 = "100";
const sc_lv<36> act_fun::ap_ST_fsm_state4 = "1000";
const sc_lv<36> act_fun::ap_ST_fsm_state5 = "10000";
const sc_lv<36> act_fun::ap_ST_fsm_state6 = "100000";
const sc_lv<36> act_fun::ap_ST_fsm_state7 = "1000000";
const sc_lv<36> act_fun::ap_ST_fsm_state8 = "10000000";
const sc_lv<36> act_fun::ap_ST_fsm_state9 = "100000000";
const sc_lv<36> act_fun::ap_ST_fsm_state10 = "1000000000";
const sc_lv<36> act_fun::ap_ST_fsm_state11 = "10000000000";
const sc_lv<36> act_fun::ap_ST_fsm_state12 = "100000000000";
const sc_lv<36> act_fun::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<36> act_fun::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<36> act_fun::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<36> act_fun::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<36> act_fun::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<36> act_fun::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<36> act_fun::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<36> act_fun::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<36> act_fun::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<36> act_fun::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<36> act_fun::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<36> act_fun::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<36> act_fun::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<36> act_fun::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<36> act_fun::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<36> act_fun::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<36> act_fun::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<36> act_fun::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<36> act_fun::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<36> act_fun::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<36> act_fun::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<36> act_fun::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<36> act_fun::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<36> act_fun::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<32> act_fun::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> act_fun::ap_const_lv32_9 = "1001";
const sc_lv<1> act_fun::ap_const_lv1_0 = "0";
const sc_lv<32> act_fun::ap_const_lv32_15 = "10101";
const sc_lv<1> act_fun::ap_const_lv1_1 = "1";
const sc_lv<32> act_fun::ap_const_lv32_1B = "11011";
const sc_lv<32> act_fun::ap_const_lv32_F = "1111";
const sc_lv<32> act_fun::ap_const_lv32_21 = "100001";
const sc_lv<32> act_fun::ap_const_lv32_1 = "1";
const sc_lv<32> act_fun::ap_const_lv32_3 = "11";
const sc_lv<32> act_fun::ap_const_lv32_1D = "11101";
const sc_lv<32> act_fun::ap_const_lv32_1C = "11100";
const sc_lv<32> act_fun::ap_const_lv32_22 = "100010";
const sc_lv<32> act_fun::ap_const_lv32_2 = "10";
const sc_lv<32> act_fun::ap_const_lv32_C0800000 = "11000000100000000000000000000000";
const sc_lv<32> act_fun::ap_const_lv32_40800000 = "1000000100000000000000000000000";
const sc_lv<64> act_fun::ap_const_lv64_3FF0000000000000 = "11111111110000000000000000000000000000000000000000000000000000";
const sc_lv<64> act_fun::ap_const_lv64_BFF0000000000000 = "1011111111110000000000000000000000000000000000000000000000000000";
const sc_lv<32> act_fun::ap_const_lv32_A = "1010";
const sc_lv<64> act_fun::ap_const_lv64_3FD0000000000000 = "11111111010000000000000000000000000000000000000000000000000000";
const sc_lv<64> act_fun::ap_const_lv64_3FE0000000000000 = "11111111100000000000000000000000000000000000000000000000000000";
const sc_lv<32> act_fun::ap_const_lv32_4 = "100";
const sc_lv<32> act_fun::ap_const_lv32_10 = "10000";
const sc_lv<32> act_fun::ap_const_lv32_16 = "10110";
const sc_lv<32> act_fun::ap_const_lv32_17 = "10111";
const sc_lv<32> act_fun::ap_const_lv32_1E = "11110";
const sc_lv<8> act_fun::ap_const_lv8_FF = "11111111";
const sc_lv<23> act_fun::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<32> act_fun::ap_const_lv32_23 = "100011";
const sc_lv<32> act_fun::ap_const_lv32_3F800000 = "111111100000000000000000000000";
const sc_lv<5> act_fun::ap_const_lv5_5 = "101";
const sc_lv<5> act_fun::ap_const_lv5_2 = "10";
const sc_lv<5> act_fun::ap_const_lv5_4 = "100";
const sc_lv<2> act_fun::ap_const_lv2_0 = "00";
const sc_lv<2> act_fun::ap_const_lv2_1 = "1";
const bool act_fun::ap_const_boolean_1 = true;

act_fun::act_fun(sc_module_name name) : sc_module(name), mVcdFile(0) {
    kernel_fptrunc_64hbi_U25 = new kernel_fptrunc_64hbi<1,2,64,32>("kernel_fptrunc_64hbi_U25");
    kernel_fptrunc_64hbi_U25->clk(ap_clk);
    kernel_fptrunc_64hbi_U25->reset(ap_rst);
    kernel_fptrunc_64hbi_U25->din0(grp_fu_38_p0);
    kernel_fptrunc_64hbi_U25->ce(ap_var_for_const0);
    kernel_fptrunc_64hbi_U25->dout(grp_fu_38_p1);
    kernel_fpext_32nsdEe_U26 = new kernel_fpext_32nsdEe<1,2,32,64>("kernel_fpext_32nsdEe_U26");
    kernel_fpext_32nsdEe_U26->clk(ap_clk);
    kernel_fpext_32nsdEe_U26->reset(ap_rst);
    kernel_fpext_32nsdEe_U26->din0(vec);
    kernel_fpext_32nsdEe_U26->ce(ap_var_for_const0);
    kernel_fpext_32nsdEe_U26->dout(grp_fu_41_p1);
    kernel_fcmp_32ns_ibs_U27 = new kernel_fcmp_32ns_ibs<1,2,32,32,1>("kernel_fcmp_32ns_ibs_U27");
    kernel_fcmp_32ns_ibs_U27->clk(ap_clk);
    kernel_fcmp_32ns_ibs_U27->reset(ap_rst);
    kernel_fcmp_32ns_ibs_U27->din0(vec);
    kernel_fcmp_32ns_ibs_U27->din1(ap_var_for_const1);
    kernel_fcmp_32ns_ibs_U27->ce(ap_var_for_const0);
    kernel_fcmp_32ns_ibs_U27->opcode(grp_fu_44_opcode);
    kernel_fcmp_32ns_ibs_U27->dout(grp_fu_44_p2);
    kernel_fcmp_32ns_ibs_U28 = new kernel_fcmp_32ns_ibs<1,2,32,32,1>("kernel_fcmp_32ns_ibs_U28");
    kernel_fcmp_32ns_ibs_U28->clk(ap_clk);
    kernel_fcmp_32ns_ibs_U28->reset(ap_rst);
    kernel_fcmp_32ns_ibs_U28->din0(vec);
    kernel_fcmp_32ns_ibs_U28->din1(ap_var_for_const2);
    kernel_fcmp_32ns_ibs_U28->ce(ap_var_for_const0);
    kernel_fcmp_32ns_ibs_U28->opcode(ap_var_for_const3);
    kernel_fcmp_32ns_ibs_U28->dout(grp_fu_50_p2);
    kernel_fcmp_32ns_ibs_U29 = new kernel_fcmp_32ns_ibs<1,2,32,32,1>("kernel_fcmp_32ns_ibs_U29");
    kernel_fcmp_32ns_ibs_U29->clk(ap_clk);
    kernel_fcmp_32ns_ibs_U29->reset(ap_rst);
    kernel_fcmp_32ns_ibs_U29->din0(vec);
    kernel_fcmp_32ns_ibs_U29->din1(ap_var_for_const2);
    kernel_fcmp_32ns_ibs_U29->ce(ap_var_for_const0);
    kernel_fcmp_32ns_ibs_U29->opcode(ap_var_for_const4);
    kernel_fcmp_32ns_ibs_U29->dout(grp_fu_55_p2);
    kernel_fcmp_32ns_ibs_U30 = new kernel_fcmp_32ns_ibs<1,2,32,32,1>("kernel_fcmp_32ns_ibs_U30");
    kernel_fcmp_32ns_ibs_U30->clk(ap_clk);
    kernel_fcmp_32ns_ibs_U30->reset(ap_rst);
    kernel_fcmp_32ns_ibs_U30->din0(vec);
    kernel_fcmp_32ns_ibs_U30->din1(ap_var_for_const5);
    kernel_fcmp_32ns_ibs_U30->ce(ap_var_for_const0);
    kernel_fcmp_32ns_ibs_U30->opcode(ap_var_for_const6);
    kernel_fcmp_32ns_ibs_U30->dout(grp_fu_60_p2);
    kernel_dadddsub_6jbC_U31 = new kernel_dadddsub_6jbC<1,6,64,64,64>("kernel_dadddsub_6jbC_U31");
    kernel_dadddsub_6jbC_U31->clk(ap_clk);
    kernel_dadddsub_6jbC_U31->reset(ap_rst);
    kernel_dadddsub_6jbC_U31->din0(grp_fu_65_p0);
    kernel_dadddsub_6jbC_U31->din1(grp_fu_65_p1);
    kernel_dadddsub_6jbC_U31->opcode(grp_fu_65_opcode);
    kernel_dadddsub_6jbC_U31->ce(ap_var_for_const0);
    kernel_dadddsub_6jbC_U31->dout(grp_fu_65_p2);
    kernel_dmul_64ns_kbM_U32 = new kernel_dmul_64ns_kbM<1,6,64,64,64>("kernel_dmul_64ns_kbM_U32");
    kernel_dmul_64ns_kbM_U32->clk(ap_clk);
    kernel_dmul_64ns_kbM_U32->reset(ap_rst);
    kernel_dmul_64ns_kbM_U32->din0(grp_fu_72_p0);
    kernel_dmul_64ns_kbM_U32->din1(grp_fu_72_p1);
    kernel_dmul_64ns_kbM_U32->ce(ap_var_for_const0);
    kernel_dmul_64ns_kbM_U32->dout(grp_fu_72_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_and_ln10_1_fu_159_p2);
    sensitive << ( xor_ln6_fu_145_p2 );
    sensitive << ( xor_ln8_fu_150_p2 );

    SC_METHOD(thread_and_ln10_2_fu_165_p2);
    sensitive << ( tmp_30_reg_229 );
    sensitive << ( and_ln10_fu_155_p2 );

    SC_METHOD(thread_and_ln10_3_fu_170_p2);
    sensitive << ( and_ln10_2_fu_165_p2 );
    sensitive << ( and_ln10_1_fu_159_p2 );

    SC_METHOD(thread_and_ln10_fu_155_p2);
    sensitive << ( or_ln6_reg_211 );
    sensitive << ( tmp_31_reg_234 );

    SC_METHOD(thread_and_ln6_fu_128_p2);
    sensitive << ( or_ln6_fu_122_p2 );
    sensitive << ( grp_fu_44_p2 );

    SC_METHOD(thread_and_ln8_1_fu_139_p2);
    sensitive << ( and_ln8_fu_134_p2 );
    sensitive << ( grp_fu_50_p2 );

    SC_METHOD(thread_and_ln8_2_fu_176_p2);
    sensitive << ( and_ln8_1_reg_223 );
    sensitive << ( xor_ln6_reg_244 );

    SC_METHOD(thread_and_ln8_fu_134_p2);
    sensitive << ( or_ln6_reg_211 );
    sensitive << ( grp_fu_44_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state34);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state35);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state36);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( select_ln6_fu_194_p3 );
    sensitive << ( ap_return_preg );

    SC_METHOD(thread_bitcast_ln6_fu_93_p1);
    sensitive << ( vec );

    SC_METHOD(thread_grp_fu_38_p0);
    sensitive << ( reg_78 );
    sensitive << ( reg_86 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state35 );

    SC_METHOD(thread_grp_fu_44_opcode);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( and_ln6_reg_217 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_grp_fu_65_opcode);
    sensitive << ( and_ln6_reg_217 );
    sensitive << ( and_ln10_3_reg_249 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_grp_fu_65_p0);
    sensitive << ( reg_78 );
    sensitive << ( and_ln6_reg_217 );
    sensitive << ( and_ln10_3_reg_249 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_grp_fu_65_p1);
    sensitive << ( reg_78 );
    sensitive << ( and_ln6_reg_217 );
    sensitive << ( and_ln10_3_reg_249 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_grp_fu_72_p0);
    sensitive << ( reg_78 );
    sensitive << ( and_ln6_reg_217 );
    sensitive << ( and_ln10_3_reg_249 );
    sensitive << ( reg_86 );
    sensitive << ( tmp_19_reg_239 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_grp_fu_72_p1);
    sensitive << ( and_ln6_reg_217 );
    sensitive << ( and_ln10_3_reg_249 );
    sensitive << ( reg_86 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_icmp_ln6_1_fu_116_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( trunc_ln6_fu_106_p1 );

    SC_METHOD(thread_icmp_ln6_fu_110_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_96_p4 );

    SC_METHOD(thread_or_ln6_fu_122_p2);
    sensitive << ( icmp_ln6_1_fu_116_p2 );
    sensitive << ( icmp_ln6_fu_110_p2 );

    SC_METHOD(thread_select_ln10_fu_187_p3);
    sensitive << ( and_ln10_3_reg_249 );
    sensitive << ( grp_fu_38_p1 );
    sensitive << ( select_ln8_fu_180_p3 );

    SC_METHOD(thread_select_ln6_fu_194_p3);
    sensitive << ( and_ln6_reg_217 );
    sensitive << ( select_ln10_fu_187_p3 );

    SC_METHOD(thread_select_ln8_fu_180_p3);
    sensitive << ( vec_assign_reg_254 );
    sensitive << ( and_ln8_2_fu_176_p2 );

    SC_METHOD(thread_tmp_fu_96_p4);
    sensitive << ( bitcast_ln6_fu_93_p1 );

    SC_METHOD(thread_trunc_ln6_fu_106_p1);
    sensitive << ( bitcast_ln6_fu_93_p1 );

    SC_METHOD(thread_xor_ln6_fu_145_p2);
    sensitive << ( and_ln6_reg_217 );

    SC_METHOD(thread_xor_ln8_fu_150_p2);
    sensitive << ( and_ln8_1_reg_223 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const6);

    ap_CS_fsm = "000000000000000000000000000000000001";
    ap_return_preg = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "act_fun_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, vec, "(port)vec");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, grp_fu_72_p2, "grp_fu_72_p2");
    sc_trace(mVcdFile, reg_78, "reg_78");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, and_ln6_reg_217, "and_ln6_reg_217");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, and_ln10_3_reg_249, "and_ln10_3_reg_249");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, grp_fu_65_p2, "grp_fu_65_p2");
    sc_trace(mVcdFile, reg_86, "reg_86");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_CS_fsm_state34, "ap_CS_fsm_state34");
    sc_trace(mVcdFile, or_ln6_fu_122_p2, "or_ln6_fu_122_p2");
    sc_trace(mVcdFile, or_ln6_reg_211, "or_ln6_reg_211");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, and_ln6_fu_128_p2, "and_ln6_fu_128_p2");
    sc_trace(mVcdFile, and_ln8_1_fu_139_p2, "and_ln8_1_fu_139_p2");
    sc_trace(mVcdFile, and_ln8_1_reg_223, "and_ln8_1_reg_223");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_fu_55_p2, "grp_fu_55_p2");
    sc_trace(mVcdFile, tmp_30_reg_229, "tmp_30_reg_229");
    sc_trace(mVcdFile, grp_fu_60_p2, "grp_fu_60_p2");
    sc_trace(mVcdFile, tmp_31_reg_234, "tmp_31_reg_234");
    sc_trace(mVcdFile, grp_fu_41_p1, "grp_fu_41_p1");
    sc_trace(mVcdFile, tmp_19_reg_239, "tmp_19_reg_239");
    sc_trace(mVcdFile, xor_ln6_fu_145_p2, "xor_ln6_fu_145_p2");
    sc_trace(mVcdFile, xor_ln6_reg_244, "xor_ln6_reg_244");
    sc_trace(mVcdFile, and_ln10_3_fu_170_p2, "and_ln10_3_fu_170_p2");
    sc_trace(mVcdFile, grp_fu_38_p1, "grp_fu_38_p1");
    sc_trace(mVcdFile, vec_assign_reg_254, "vec_assign_reg_254");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, grp_fu_38_p0, "grp_fu_38_p0");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, ap_CS_fsm_state35, "ap_CS_fsm_state35");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, grp_fu_65_p0, "grp_fu_65_p0");
    sc_trace(mVcdFile, grp_fu_65_p1, "grp_fu_65_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, grp_fu_72_p0, "grp_fu_72_p0");
    sc_trace(mVcdFile, grp_fu_72_p1, "grp_fu_72_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, bitcast_ln6_fu_93_p1, "bitcast_ln6_fu_93_p1");
    sc_trace(mVcdFile, tmp_fu_96_p4, "tmp_fu_96_p4");
    sc_trace(mVcdFile, trunc_ln6_fu_106_p1, "trunc_ln6_fu_106_p1");
    sc_trace(mVcdFile, icmp_ln6_1_fu_116_p2, "icmp_ln6_1_fu_116_p2");
    sc_trace(mVcdFile, icmp_ln6_fu_110_p2, "icmp_ln6_fu_110_p2");
    sc_trace(mVcdFile, grp_fu_44_p2, "grp_fu_44_p2");
    sc_trace(mVcdFile, and_ln8_fu_134_p2, "and_ln8_fu_134_p2");
    sc_trace(mVcdFile, grp_fu_50_p2, "grp_fu_50_p2");
    sc_trace(mVcdFile, xor_ln8_fu_150_p2, "xor_ln8_fu_150_p2");
    sc_trace(mVcdFile, and_ln10_fu_155_p2, "and_ln10_fu_155_p2");
    sc_trace(mVcdFile, and_ln10_2_fu_165_p2, "and_ln10_2_fu_165_p2");
    sc_trace(mVcdFile, and_ln10_1_fu_159_p2, "and_ln10_1_fu_159_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state36, "ap_CS_fsm_state36");
    sc_trace(mVcdFile, and_ln8_2_fu_176_p2, "and_ln8_2_fu_176_p2");
    sc_trace(mVcdFile, select_ln8_fu_180_p3, "select_ln8_fu_180_p3");
    sc_trace(mVcdFile, select_ln10_fu_187_p3, "select_ln10_fu_187_p3");
    sc_trace(mVcdFile, grp_fu_44_opcode, "grp_fu_44_opcode");
    sc_trace(mVcdFile, grp_fu_65_opcode, "grp_fu_65_opcode");
    sc_trace(mVcdFile, select_ln6_fu_194_p3, "select_ln6_fu_194_p3");
    sc_trace(mVcdFile, ap_return_preg, "ap_return_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

act_fun::~act_fun() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete kernel_fptrunc_64hbi_U25;
    delete kernel_fpext_32nsdEe_U26;
    delete kernel_fcmp_32ns_ibs_U27;
    delete kernel_fcmp_32ns_ibs_U28;
    delete kernel_fcmp_32ns_ibs_U29;
    delete kernel_fcmp_32ns_ibs_U30;
    delete kernel_dadddsub_6jbC_U31;
    delete kernel_dmul_64ns_kbM_U32;
}

void act_fun::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void act_fun::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_0;
}

void act_fun::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_C0800000;
}

void act_fun::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv32_40800000;
}

void act_fun::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv5_5;
}

void act_fun::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv5_2;
}

void act_fun::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_lv5_4;
}

void act_fun::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_preg = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
            ap_return_preg = select_ln6_fu_194_p3.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(and_ln6_reg_217.read(), ap_const_lv1_0))) {
        and_ln10_3_reg_249 = and_ln10_3_fu_170_p2.read();
        xor_ln6_reg_244 = xor_ln6_fu_145_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        and_ln6_reg_217 = and_ln6_fu_128_p2.read();
        or_ln6_reg_211 = or_ln6_fu_122_p2.read();
    }
    if ((esl_seteq<1,1,1>(and_ln6_reg_217.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        and_ln8_1_reg_223 = and_ln8_1_fu_139_p2.read();
        tmp_19_reg_239 = grp_fu_41_p1.read();
        tmp_30_reg_229 = grp_fu_55_p2.read();
        tmp_31_reg_234 = grp_fu_60_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
  esl_seteq<1,1,1>(and_ln6_reg_217.read(), ap_const_lv1_0)) || (esl_seteq<1,1,1>(and_ln6_reg_217.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, and_ln10_3_reg_249.read())) || (esl_seteq<1,1,1>(and_ln6_reg_217.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && 
  esl_seteq<1,1,1>(and_ln10_3_reg_249.read(), ap_const_lv1_1)) || (esl_seteq<1,1,1>(and_ln6_reg_217.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, and_ln10_3_reg_249.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) || (esl_seteq<1,1,1>(and_ln6_reg_217.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(and_ln10_3_reg_249.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())))) {
        reg_78 = grp_fu_72_p2.read();
    }
    if (((esl_seteq<1,1,1>(and_ln6_reg_217.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, and_ln10_3_reg_249.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) || (esl_seteq<1,1,1>(and_ln6_reg_217.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(and_ln10_3_reg_249.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) || (esl_seteq<1,1,1>(and_ln6_reg_217.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(and_ln10_3_reg_249.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())))) {
        reg_86 = grp_fu_65_p2.read();
    }
    if ((esl_seteq<1,1,1>(and_ln6_reg_217.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, and_ln10_3_reg_249.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()))) {
        vec_assign_reg_254 = grp_fu_38_p1.read();
    }
}

void act_fun::thread_and_ln10_1_fu_159_p2() {
    and_ln10_1_fu_159_p2 = (xor_ln8_fu_150_p2.read() & xor_ln6_fu_145_p2.read());
}

void act_fun::thread_and_ln10_2_fu_165_p2() {
    and_ln10_2_fu_165_p2 = (and_ln10_fu_155_p2.read() & tmp_30_reg_229.read());
}

void act_fun::thread_and_ln10_3_fu_170_p2() {
    and_ln10_3_fu_170_p2 = (and_ln10_2_fu_165_p2.read() & and_ln10_1_fu_159_p2.read());
}

void act_fun::thread_and_ln10_fu_155_p2() {
    and_ln10_fu_155_p2 = (or_ln6_reg_211.read() & tmp_31_reg_234.read());
}

void act_fun::thread_and_ln6_fu_128_p2() {
    and_ln6_fu_128_p2 = (or_ln6_fu_122_p2.read() & grp_fu_44_p2.read());
}

void act_fun::thread_and_ln8_1_fu_139_p2() {
    and_ln8_1_fu_139_p2 = (and_ln8_fu_134_p2.read() & grp_fu_50_p2.read());
}

void act_fun::thread_and_ln8_2_fu_176_p2() {
    and_ln8_2_fu_176_p2 = (and_ln8_1_reg_223.read() & xor_ln6_reg_244.read());
}

void act_fun::thread_and_ln8_fu_134_p2() {
    and_ln8_fu_134_p2 = (or_ln6_reg_211.read() & grp_fu_44_p2.read());
}

void act_fun::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void act_fun::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void act_fun::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void act_fun::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void act_fun::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void act_fun::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void act_fun::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void act_fun::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void act_fun::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[27];
}

void act_fun::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[28];
}

void act_fun::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void act_fun::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[29];
}

void act_fun::thread_ap_CS_fsm_state34() {
    ap_CS_fsm_state34 = ap_CS_fsm.read()[33];
}

void act_fun::thread_ap_CS_fsm_state35() {
    ap_CS_fsm_state35 = ap_CS_fsm.read()[34];
}

void act_fun::thread_ap_CS_fsm_state36() {
    ap_CS_fsm_state36 = ap_CS_fsm.read()[35];
}

void act_fun::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void act_fun::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void act_fun::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void act_fun::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void act_fun::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void act_fun::thread_ap_return() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        ap_return = select_ln6_fu_194_p3.read();
    } else {
        ap_return = ap_return_preg.read();
    }
}

void act_fun::thread_bitcast_ln6_fu_93_p1() {
    bitcast_ln6_fu_93_p1 = vec.read();
}

void act_fun::thread_grp_fu_38_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        grp_fu_38_p0 = reg_86.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        grp_fu_38_p0 = reg_78.read();
    } else {
        grp_fu_38_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void act_fun::thread_grp_fu_44_opcode() {
    if ((esl_seteq<1,1,1>(and_ln6_reg_217.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        grp_fu_44_opcode = ap_const_lv5_2;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        grp_fu_44_opcode = ap_const_lv5_5;
    } else {
        grp_fu_44_opcode =  (sc_lv<5>) ("XXXXX");
    }
}

void act_fun::thread_grp_fu_65_opcode() {
    if ((esl_seteq<1,1,1>(and_ln6_reg_217.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(and_ln10_3_reg_249.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()))) {
        grp_fu_65_opcode = ap_const_lv2_1;
    } else if (((esl_seteq<1,1,1>(and_ln6_reg_217.read(), ap_const_lv1_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, and_ln10_3_reg_249.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) || 
                (esl_seteq<1,1,1>(and_ln6_reg_217.read(), ap_const_lv1_0) && 
                 esl_seteq<1,1,1>(and_ln10_3_reg_249.read(), ap_const_lv1_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())))) {
        grp_fu_65_opcode = ap_const_lv2_0;
    } else {
        grp_fu_65_opcode =  (sc_lv<2>) ("XX");
    }
}

void act_fun::thread_grp_fu_65_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        grp_fu_65_p0 = ap_const_lv64_3FF0000000000000;
    } else if (((esl_seteq<1,1,1>(and_ln6_reg_217.read(), ap_const_lv1_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, and_ln10_3_reg_249.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) || 
                (esl_seteq<1,1,1>(and_ln6_reg_217.read(), ap_const_lv1_0) && 
                 esl_seteq<1,1,1>(and_ln10_3_reg_249.read(), ap_const_lv1_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())))) {
        grp_fu_65_p0 = reg_78.read();
    } else {
        grp_fu_65_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void act_fun::thread_grp_fu_65_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        grp_fu_65_p1 = reg_78.read();
    } else if ((esl_seteq<1,1,1>(and_ln6_reg_217.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(and_ln10_3_reg_249.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        grp_fu_65_p1 = ap_const_lv64_BFF0000000000000;
    } else if ((esl_seteq<1,1,1>(and_ln6_reg_217.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, and_ln10_3_reg_249.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        grp_fu_65_p1 = ap_const_lv64_3FF0000000000000;
    } else {
        grp_fu_65_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void act_fun::thread_grp_fu_72_p0() {
    if (((esl_seteq<1,1,1>(and_ln6_reg_217.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, and_ln10_3_reg_249.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) || 
         (esl_seteq<1,1,1>(and_ln6_reg_217.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(and_ln10_3_reg_249.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())))) {
        grp_fu_72_p0 = reg_78.read();
    } else if (((esl_seteq<1,1,1>(and_ln6_reg_217.read(), ap_const_lv1_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, and_ln10_3_reg_249.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) || 
                (esl_seteq<1,1,1>(and_ln6_reg_217.read(), ap_const_lv1_0) && 
                 esl_seteq<1,1,1>(and_ln10_3_reg_249.read(), ap_const_lv1_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())))) {
        grp_fu_72_p0 = reg_86.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        grp_fu_72_p0 = tmp_19_reg_239.read();
    } else {
        grp_fu_72_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void act_fun::thread_grp_fu_72_p1() {
    if (((esl_seteq<1,1,1>(and_ln6_reg_217.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, and_ln10_3_reg_249.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) || 
         (esl_seteq<1,1,1>(and_ln6_reg_217.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(and_ln10_3_reg_249.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())))) {
        grp_fu_72_p1 = reg_86.read();
    } else if (((esl_seteq<1,1,1>(and_ln6_reg_217.read(), ap_const_lv1_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, and_ln10_3_reg_249.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) || 
                (esl_seteq<1,1,1>(and_ln6_reg_217.read(), ap_const_lv1_0) && 
                 esl_seteq<1,1,1>(and_ln10_3_reg_249.read(), ap_const_lv1_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())))) {
        grp_fu_72_p1 = ap_const_lv64_3FE0000000000000;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        grp_fu_72_p1 = ap_const_lv64_3FD0000000000000;
    } else {
        grp_fu_72_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void act_fun::thread_icmp_ln6_1_fu_116_p2() {
    icmp_ln6_1_fu_116_p2 = (!trunc_ln6_fu_106_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln6_fu_106_p1.read() == ap_const_lv23_0);
}

void act_fun::thread_icmp_ln6_fu_110_p2() {
    icmp_ln6_fu_110_p2 = (!tmp_fu_96_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_fu_96_p4.read() != ap_const_lv8_FF);
}

void act_fun::thread_or_ln6_fu_122_p2() {
    or_ln6_fu_122_p2 = (icmp_ln6_1_fu_116_p2.read() | icmp_ln6_fu_110_p2.read());
}

void act_fun::thread_select_ln10_fu_187_p3() {
    select_ln10_fu_187_p3 = (!and_ln10_3_reg_249.read()[0].is_01())? sc_lv<32>(): ((and_ln10_3_reg_249.read()[0].to_bool())? grp_fu_38_p1.read(): select_ln8_fu_180_p3.read());
}

void act_fun::thread_select_ln6_fu_194_p3() {
    select_ln6_fu_194_p3 = (!and_ln6_reg_217.read()[0].is_01())? sc_lv<32>(): ((and_ln6_reg_217.read()[0].to_bool())? ap_const_lv32_0: select_ln10_fu_187_p3.read());
}

void act_fun::thread_select_ln8_fu_180_p3() {
    select_ln8_fu_180_p3 = (!and_ln8_2_fu_176_p2.read()[0].is_01())? sc_lv<32>(): ((and_ln8_2_fu_176_p2.read()[0].to_bool())? vec_assign_reg_254.read(): ap_const_lv32_3F800000);
}

void act_fun::thread_tmp_fu_96_p4() {
    tmp_fu_96_p4 = bitcast_ln6_fu_93_p1.read().range(30, 23);
}

void act_fun::thread_trunc_ln6_fu_106_p1() {
    trunc_ln6_fu_106_p1 = bitcast_ln6_fu_93_p1.read().range(23-1, 0);
}

void act_fun::thread_xor_ln6_fu_145_p2() {
    xor_ln6_fu_145_p2 = (and_ln6_reg_217.read() ^ ap_const_lv1_1);
}

void act_fun::thread_xor_ln8_fu_150_p2() {
    xor_ln8_fu_150_p2 = (and_ln8_1_reg_223.read() ^ ap_const_lv1_1);
}

void act_fun::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<36>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

