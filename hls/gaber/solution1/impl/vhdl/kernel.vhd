-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    op_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    op_empty_n : IN STD_LOGIC;
    op_read : OUT STD_LOGIC;
    res : OUT STD_LOGIC;
    res_ap_vld : OUT STD_LOGIC );
end;


architecture behav of kernel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kernel,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.341950,HLS_SYN_LAT=99476,HLS_SYN_TPT=none,HLS_SYN_MEM=35,HLS_SYN_DSP=48,HLS_SYN_FF=17298,HLS_SYN_LUT=16642,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (73 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (73 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (73 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (73 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (73 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (73 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (73 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (73 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (73 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (73 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (73 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_40019703 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000011001011100000011";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv64_3FECCCCCCCCCCCCD : STD_LOGIC_VECTOR (63 downto 0) := "0011111111101100110011001100110011001100110011001100110011001101";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal b1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b1_ce0 : STD_LOGIC;
    signal b1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w1_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal w1_ce0 : STD_LOGIC;
    signal w1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal b2_ce0 : STD_LOGIC;
    signal b2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w2_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal w2_ce0 : STD_LOGIC;
    signal w2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b3_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal b3_ce0 : STD_LOGIC;
    signal b3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w3_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal w3_ce0 : STD_LOGIC;
    signal w3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b4_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal b4_ce0 : STD_LOGIC;
    signal b4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal w4_ce0 : STD_LOGIC;
    signal w4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w5_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal w5_ce0 : STD_LOGIC;
    signal w5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_545_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_560 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal grp_fu_536_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal i_fu_579_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_870 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln26_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vec1_addr_reg_880 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln29_fu_591_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln29_reg_885 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal shl_ln_fu_595_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln_reg_895 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_fu_612_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_reg_903 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln28_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vec0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal vec0_load_reg_918 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal w1_load_reg_923 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_639_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_931 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal icmp_ln34_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vec2_addr_reg_941 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln37_fu_651_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln37_reg_946 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal shl_ln1_fu_655_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln1_reg_956 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_fu_672_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_reg_964 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal icmp_ln36_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal w2_load_reg_979 : STD_LOGIC_VECTOR (31 downto 0);
    signal vec1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal i_2_fu_699_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_992 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal icmp_ln41_fu_693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vec3_addr_reg_1002 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln44_fu_711_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln44_reg_1007 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal shl_ln2_fu_715_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln2_reg_1017 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_2_fu_732_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_2_reg_1025 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal icmp_ln43_fu_726_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal w3_load_reg_1040 : STD_LOGIC_VECTOR (31 downto 0);
    signal vec2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal i_3_fu_759_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_3_reg_1053 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal icmp_ln48_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vec4_addr_reg_1063 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln51_fu_771_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln51_reg_1068 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal shl_ln3_fu_775_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln3_reg_1078 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_4_fu_788_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_4_reg_1086 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal icmp_ln50_fu_782_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal w4_load_reg_1101 : STD_LOGIC_VECTOR (31 downto 0);
    signal vec3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal j_3_fu_815_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_3_reg_1114 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal icmp_ln56_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vec4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal vec4_load_reg_1129 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal w5_load_reg_1134 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal grp_act_fun_fu_522_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal res_t_reg_1144 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal grp_act_fun_fu_522_ap_ready : STD_LOGIC;
    signal grp_act_fun_fu_522_ap_done : STD_LOGIC;
    signal grp_fu_552_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_1149 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal icmp_ln60_fu_844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_1155 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal icmp_ln60_1_fu_850_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_1_reg_1160 : STD_LOGIC_VECTOR (0 downto 0);
    signal vec0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal vec0_ce0 : STD_LOGIC;
    signal vec0_we0 : STD_LOGIC;
    signal vec1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal vec1_ce0 : STD_LOGIC;
    signal vec1_we0 : STD_LOGIC;
    signal vec2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal vec2_ce0 : STD_LOGIC;
    signal vec2_we0 : STD_LOGIC;
    signal vec3_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal vec3_ce0 : STD_LOGIC;
    signal vec3_we0 : STD_LOGIC;
    signal vec4_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal vec4_ce0 : STD_LOGIC;
    signal vec4_we0 : STD_LOGIC;
    signal grp_fft_top_fu_514_in_r_read : STD_LOGIC;
    signal grp_fft_top_fu_514_out_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fft_top_fu_514_out_r_ce0 : STD_LOGIC;
    signal grp_fft_top_fu_514_out_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_top_fu_514_out_r_we0 : STD_LOGIC;
    signal grp_fft_top_fu_514_out_r_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fft_top_fu_514_out_r_ce1 : STD_LOGIC;
    signal grp_fft_top_fu_514_out_r_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_top_fu_514_out_r_we1 : STD_LOGIC;
    signal grp_fft_top_fu_514_ap_start : STD_LOGIC;
    signal grp_fft_top_fu_514_ap_done : STD_LOGIC;
    signal grp_fft_top_fu_514_ap_ready : STD_LOGIC;
    signal grp_fft_top_fu_514_ap_idle : STD_LOGIC;
    signal grp_fft_top_fu_514_ap_continue : STD_LOGIC;
    signal grp_act_fun_fu_522_ap_start : STD_LOGIC;
    signal grp_act_fun_fu_522_ap_idle : STD_LOGIC;
    signal grp_act_fun_fu_522_vec : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_360 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_sync_grp_fft_top_fu_514_ap_ready : STD_LOGIC;
    signal ap_sync_grp_fft_top_fu_514_ap_done : STD_LOGIC;
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal empty_21_reg_371 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_reg_381 : STD_LOGIC_VECTOR (9 downto 0);
    signal i1_0_reg_392 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal empty_25_reg_403 : STD_LOGIC_VECTOR (31 downto 0);
    signal j2_0_reg_413 : STD_LOGIC_VECTOR (4 downto 0);
    signal i3_0_reg_425 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal empty_29_reg_436 : STD_LOGIC_VECTOR (31 downto 0);
    signal j4_0_reg_446 : STD_LOGIC_VECTOR (3 downto 0);
    signal i5_0_reg_458 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal empty_33_reg_469 : STD_LOGIC_VECTOR (31 downto 0);
    signal j6_0_reg_479 : STD_LOGIC_VECTOR (2 downto 0);
    signal res_t_0_reg_491 : STD_LOGIC_VECTOR (31 downto 0);
    signal j7_0_reg_503 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fft_top_fu_514_ap_start_reg : STD_LOGIC := '0';
    signal ap_sync_reg_grp_fft_top_fu_514_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_fft_top_fu_514_ap_done : STD_LOGIC := '0';
    signal grp_act_fun_fu_522_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln27_fu_585_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_fu_618_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_1_fu_628_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_fu_645_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_1_fu_683_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_fu_688_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_fu_705_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_1_fu_743_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_fu_748_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_fu_765_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln51_1_fu_799_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln51_fu_804_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln57_fu_821_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal grp_fu_536_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal grp_fu_545_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_545_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal zext_ln28_fu_602_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln29_fu_623_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln36_fu_662_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln37_fu_678_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln43_fu_722_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln44_fu_738_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln51_fu_794_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal bitcast_ln60_fu_827_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_830_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln60_fu_840_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln60_fu_856_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (73 downto 0);

    component fft_top IS
    port (
        in_r_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        in_r_empty_n : IN STD_LOGIC;
        in_r_read : OUT STD_LOGIC;
        out_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_r_we0 : OUT STD_LOGIC;
        out_r_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        out_r_ce1 : OUT STD_LOGIC;
        out_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_r_we1 : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component act_fun IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        vec : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_fadd_32ns_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_fmul_32ns_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_fpext_32nsdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kernel_dcmp_64ns_lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component kernel_b1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_w1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_b2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_w2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_b3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_w3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_b4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_w4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_w5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_vec0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_vec1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_vec2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_vec3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_vec4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    b1_U : component kernel_b1
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b1_address0,
        ce0 => b1_ce0,
        q0 => b1_q0);

    w1_U : component kernel_w1
    generic map (
        DataWidth => 32,
        AddressRange => 8192,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w1_address0,
        ce0 => w1_ce0,
        q0 => w1_q0);

    b2_U : component kernel_b2
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b2_address0,
        ce0 => b2_ce0,
        q0 => b2_q0);

    w2_U : component kernel_w2
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w2_address0,
        ce0 => w2_ce0,
        q0 => w2_q0);

    b3_U : component kernel_b3
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b3_address0,
        ce0 => b3_ce0,
        q0 => b3_q0);

    w3_U : component kernel_w3
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w3_address0,
        ce0 => w3_ce0,
        q0 => w3_q0);

    b4_U : component kernel_b4
    generic map (
        DataWidth => 32,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b4_address0,
        ce0 => b4_ce0,
        q0 => b4_q0);

    w4_U : component kernel_w4
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w4_address0,
        ce0 => w4_ce0,
        q0 => w4_q0);

    w5_U : component kernel_w5
    generic map (
        DataWidth => 32,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w5_address0,
        ce0 => w5_ce0,
        q0 => w5_q0);

    vec0_U : component kernel_vec0
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => vec0_address0,
        ce0 => vec0_ce0,
        we0 => vec0_we0,
        d0 => grp_fft_top_fu_514_out_r_d0,
        q0 => vec0_q0);

    vec1_U : component kernel_vec1
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => vec1_address0,
        ce0 => vec1_ce0,
        we0 => vec1_we0,
        d0 => grp_act_fun_fu_522_ap_return,
        q0 => vec1_q0);

    vec2_U : component kernel_vec2
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => vec2_address0,
        ce0 => vec2_ce0,
        we0 => vec2_we0,
        d0 => grp_act_fun_fu_522_ap_return,
        q0 => vec2_q0);

    vec3_U : component kernel_vec3
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => vec3_address0,
        ce0 => vec3_ce0,
        we0 => vec3_we0,
        d0 => grp_act_fun_fu_522_ap_return,
        q0 => vec3_q0);

    vec4_U : component kernel_vec4
    generic map (
        DataWidth => 32,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => vec4_address0,
        ce0 => vec4_ce0,
        we0 => vec4_we0,
        d0 => grp_act_fun_fu_522_ap_return,
        q0 => vec4_q0);

    grp_fft_top_fu_514 : component fft_top
    port map (
        in_r_dout => op_dout,
        in_r_empty_n => op_empty_n,
        in_r_read => grp_fft_top_fu_514_in_r_read,
        out_r_address0 => grp_fft_top_fu_514_out_r_address0,
        out_r_ce0 => grp_fft_top_fu_514_out_r_ce0,
        out_r_d0 => grp_fft_top_fu_514_out_r_d0,
        out_r_q0 => ap_const_lv32_0,
        out_r_we0 => grp_fft_top_fu_514_out_r_we0,
        out_r_address1 => grp_fft_top_fu_514_out_r_address1,
        out_r_ce1 => grp_fft_top_fu_514_out_r_ce1,
        out_r_d1 => grp_fft_top_fu_514_out_r_d1,
        out_r_q1 => ap_const_lv32_0,
        out_r_we1 => grp_fft_top_fu_514_out_r_we1,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fft_top_fu_514_ap_start,
        ap_done => grp_fft_top_fu_514_ap_done,
        ap_ready => grp_fft_top_fu_514_ap_ready,
        ap_idle => grp_fft_top_fu_514_ap_idle,
        ap_continue => grp_fft_top_fu_514_ap_continue);

    grp_act_fun_fu_522 : component act_fun
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_act_fun_fu_522_ap_start,
        ap_done => grp_act_fun_fu_522_ap_done,
        ap_idle => grp_act_fun_fu_522_ap_idle,
        ap_ready => grp_act_fun_fu_522_ap_ready,
        vec => grp_act_fun_fu_522_vec,
        ap_return => grp_act_fun_fu_522_ap_return);

    kernel_fadd_32ns_eOg_U38 : component kernel_fadd_32ns_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_536_p0,
        din1 => reg_560,
        ce => ap_const_logic_1,
        dout => grp_fu_536_p2);

    kernel_fmul_32ns_bkb_U39 : component kernel_fmul_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_545_p0,
        din1 => grp_fu_545_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_545_p2);

    kernel_fpext_32nsdEe_U40 : component kernel_fpext_32nsdEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => res_t_reg_1144,
        ce => ap_const_logic_1,
        dout => grp_fu_552_p1);

    kernel_dcmp_64ns_lbW_U41 : component kernel_dcmp_64ns_lbW
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_s_reg_1149,
        din1 => ap_const_lv64_3FECCCCCCCCCCCCD,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_555_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_fft_top_fu_514_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_fft_top_fu_514_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_sync_reg_grp_fft_top_fu_514_ap_done <= ap_const_logic_0;
                elsif ((grp_fft_top_fu_514_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_fft_top_fu_514_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_fft_top_fu_514_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_fft_top_fu_514_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_sync_reg_grp_fft_top_fu_514_ap_ready <= ap_const_logic_0;
                elsif ((grp_fft_top_fu_514_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_fft_top_fu_514_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_act_fun_fu_522_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_act_fun_fu_522_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln56_fu_809_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59)) or ((icmp_ln50_fu_782_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47)) or ((icmp_ln43_fu_726_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((icmp_ln36_fu_666_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((icmp_ln28_fu_606_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
                    grp_act_fun_fu_522_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_act_fun_fu_522_ap_ready = ap_const_logic_1)) then 
                    grp_act_fun_fu_522_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_fft_top_fu_514_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_fft_top_fu_514_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_sync_grp_fft_top_fu_514_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                    grp_fft_top_fu_514_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fft_top_fu_514_ap_ready = ap_const_logic_1)) then 
                    grp_fft_top_fu_514_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    empty_21_reg_371_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                empty_21_reg_371 <= grp_fu_536_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                empty_21_reg_371 <= b1_q0;
            end if; 
        end if;
    end process;

    empty_25_reg_403_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                empty_25_reg_403 <= grp_fu_536_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                empty_25_reg_403 <= b2_q0;
            end if; 
        end if;
    end process;

    empty_29_reg_436_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                empty_29_reg_436 <= grp_fu_536_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                empty_29_reg_436 <= b3_q0;
            end if; 
        end if;
    end process;

    empty_33_reg_469_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                empty_33_reg_469 <= grp_fu_536_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                empty_33_reg_469 <= b4_q0;
            end if; 
        end if;
    end process;

    i1_0_reg_392_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_573_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i1_0_reg_392 <= ap_const_lv4_0;
            elsif (((grp_act_fun_fu_522_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                i1_0_reg_392 <= i_1_reg_931;
            end if; 
        end if;
    end process;

    i3_0_reg_425_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_fu_633_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                i3_0_reg_425 <= ap_const_lv3_0;
            elsif (((grp_act_fun_fu_522_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                i3_0_reg_425 <= i_2_reg_992;
            end if; 
        end if;
    end process;

    i5_0_reg_458_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_fu_693_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                i5_0_reg_458 <= ap_const_lv2_0;
            elsif (((grp_act_fun_fu_522_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
                i5_0_reg_458 <= i_3_reg_1053;
            end if; 
        end if;
    end process;

    i_0_reg_360_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_act_fun_fu_522_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                i_0_reg_360 <= i_reg_870;
            elsif (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_360 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j2_0_reg_413_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                j2_0_reg_413 <= j_1_reg_964;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                j2_0_reg_413 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j4_0_reg_446_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                j4_0_reg_446 <= j_2_reg_1025;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                j4_0_reg_446 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j6_0_reg_479_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                j6_0_reg_479 <= j_4_reg_1086;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                j6_0_reg_479 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j7_0_reg_503_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_fu_753_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                j7_0_reg_503 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                j7_0_reg_503 <= j_3_reg_1114;
            end if; 
        end if;
    end process;

    j_0_reg_381_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                j_0_reg_381 <= j_reg_903;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_0_reg_381 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    res_t_0_reg_491_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_fu_753_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                res_t_0_reg_491 <= ap_const_lv32_40019703;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                res_t_0_reg_491 <= grp_fu_536_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                i_1_reg_931 <= i_1_fu_639_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                i_2_reg_992 <= i_2_fu_699_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                i_3_reg_1053 <= i_3_fu_759_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_reg_870 <= i_fu_579_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state73)) then
                icmp_ln60_1_reg_1160 <= icmp_ln60_1_fu_850_p2;
                icmp_ln60_reg_1155 <= icmp_ln60_fu_844_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                j_1_reg_964 <= j_1_fu_672_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                j_2_reg_1025 <= j_2_fu_732_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then
                j_3_reg_1114 <= j_3_fu_815_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                j_4_reg_1086 <= j_4_fu_788_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j_reg_903 <= j_fu_612_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_560 <= grp_fu_545_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_act_fun_fu_522_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then
                res_t_reg_1144 <= grp_act_fun_fu_522_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                    shl_ln1_reg_956(6 downto 4) <= shl_ln1_fu_655_p3(6 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                    shl_ln2_reg_1017(4 downto 3) <= shl_ln2_fu_715_p3(4 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                    shl_ln3_reg_1078(2) <= shl_ln3_fu_775_p3(2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    shl_ln_reg_895(12 downto 9) <= shl_ln_fu_595_p3(12 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state72)) then
                tmp_s_reg_1149 <= grp_fu_552_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_573_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                trunc_ln29_reg_885 <= trunc_ln29_fu_591_p1;
                vec1_addr_reg_880 <= zext_ln27_fu_585_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_fu_633_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                trunc_ln37_reg_946 <= trunc_ln37_fu_651_p1;
                vec2_addr_reg_941 <= zext_ln35_fu_645_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_fu_693_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                trunc_ln44_reg_1007 <= trunc_ln44_fu_711_p1;
                vec3_addr_reg_1002 <= zext_ln42_fu_705_p1(2 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_fu_753_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                trunc_ln51_reg_1068 <= trunc_ln51_fu_771_p1;
                vec4_addr_reg_1063 <= zext_ln49_fu_765_p1(1 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                vec0_load_reg_918 <= vec0_q0;
                w1_load_reg_923 <= w1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state60)) then
                vec4_load_reg_1129 <= vec4_q0;
                w5_load_reg_1134 <= w5_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                w2_load_reg_979 <= w2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                w3_load_reg_1040 <= w3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                w4_load_reg_1101 <= w4_q0;
            end if;
        end if;
    end process;
    shl_ln_reg_895(8 downto 0) <= "000000000";
    shl_ln1_reg_956(3 downto 0) <= "0000";
    shl_ln2_reg_1017(2 downto 0) <= "000";
    shl_ln3_reg_1078(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln26_fu_573_p2, ap_CS_fsm_state5, icmp_ln28_fu_606_p2, ap_CS_fsm_state17, icmp_ln34_fu_633_p2, ap_CS_fsm_state19, icmp_ln36_fu_666_p2, ap_CS_fsm_state31, icmp_ln41_fu_693_p2, ap_CS_fsm_state33, icmp_ln43_fu_726_p2, ap_CS_fsm_state45, icmp_ln48_fu_753_p2, ap_CS_fsm_state47, icmp_ln50_fu_782_p2, ap_CS_fsm_state59, icmp_ln56_fu_809_p2, ap_CS_fsm_state70, grp_act_fun_fu_522_ap_done, ap_CS_fsm_state2, ap_block_state2_on_subcall_done, ap_CS_fsm_state16, ap_CS_fsm_state30, ap_CS_fsm_state44, ap_CS_fsm_state58)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln26_fu_573_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln28_fu_606_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state16 => 
                if (((grp_act_fun_fu_522_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((icmp_ln34_fu_633_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((icmp_ln36_fu_666_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state30 => 
                if (((grp_act_fun_fu_522_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                if (((icmp_ln41_fu_693_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                if (((icmp_ln43_fu_726_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state44 => 
                if (((grp_act_fun_fu_522_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                if (((icmp_ln48_fu_753_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if (((icmp_ln50_fu_782_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state58 => 
                if (((grp_act_fun_fu_522_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state59 => 
                if (((icmp_ln56_fu_809_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then
                    ap_NS_fsm <= ap_ST_fsm_state70;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state70 => 
                if (((grp_act_fun_fu_522_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_state70;
                end if;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln29_fu_623_p2 <= std_logic_vector(unsigned(shl_ln_reg_895) + unsigned(zext_ln28_fu_602_p1));
    add_ln37_fu_678_p2 <= std_logic_vector(unsigned(shl_ln1_reg_956) + unsigned(zext_ln36_fu_662_p1));
    add_ln44_fu_738_p2 <= std_logic_vector(unsigned(shl_ln2_reg_1017) + unsigned(zext_ln43_fu_722_p1));
    add_ln51_fu_794_p2 <= std_logic_vector(unsigned(shl_ln3_reg_1078) + unsigned(j6_0_reg_479));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);

    ap_block_state2_on_subcall_done_assign_proc : process(ap_sync_grp_fft_top_fu_514_ap_ready, ap_sync_grp_fft_top_fu_514_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((ap_sync_grp_fft_top_fu_514_ap_ready and ap_sync_grp_fft_top_fu_514_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_sync_grp_fft_top_fu_514_ap_done <= (grp_fft_top_fu_514_ap_done or ap_sync_reg_grp_fft_top_fu_514_ap_done);
    ap_sync_grp_fft_top_fu_514_ap_ready <= (grp_fft_top_fu_514_ap_ready or ap_sync_reg_grp_fft_top_fu_514_ap_ready);
    b1_address0 <= zext_ln27_fu_585_p1(4 - 1 downto 0);

    b1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            b1_ce0 <= ap_const_logic_1;
        else 
            b1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b2_address0 <= zext_ln35_fu_645_p1(3 - 1 downto 0);

    b2_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            b2_ce0 <= ap_const_logic_1;
        else 
            b2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b3_address0 <= zext_ln42_fu_705_p1(2 - 1 downto 0);

    b3_ce0_assign_proc : process(ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            b3_ce0 <= ap_const_logic_1;
        else 
            b3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b4_address0 <= zext_ln49_fu_765_p1(1 - 1 downto 0);

    b4_ce0_assign_proc : process(ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            b4_ce0 <= ap_const_logic_1;
        else 
            b4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln60_fu_827_p1 <= tmp_s_reg_1149;
    grp_act_fun_fu_522_ap_start <= grp_act_fun_fu_522_ap_start_reg;

    grp_act_fun_fu_522_vec_assign_proc : process(ap_CS_fsm_state70, ap_CS_fsm_state16, empty_21_reg_371, ap_CS_fsm_state30, empty_25_reg_403, ap_CS_fsm_state44, empty_29_reg_436, ap_CS_fsm_state58, empty_33_reg_469, res_t_0_reg_491)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            grp_act_fun_fu_522_vec <= res_t_0_reg_491;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            grp_act_fun_fu_522_vec <= empty_33_reg_469;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_act_fun_fu_522_vec <= empty_29_reg_436;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_act_fun_fu_522_vec <= empty_25_reg_403;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_act_fun_fu_522_vec <= empty_21_reg_371;
        else 
            grp_act_fun_fu_522_vec <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fft_top_fu_514_ap_continue_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fft_top_fu_514_ap_continue <= ap_const_logic_1;
        else 
            grp_fft_top_fu_514_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_fft_top_fu_514_ap_start <= grp_fft_top_fu_514_ap_start_reg;

    grp_fu_536_p0_assign_proc : process(empty_21_reg_371, empty_25_reg_403, empty_29_reg_436, empty_33_reg_469, res_t_0_reg_491, ap_CS_fsm_state11, ap_CS_fsm_state25, ap_CS_fsm_state39, ap_CS_fsm_state53, ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            grp_fu_536_p0 <= res_t_0_reg_491;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            grp_fu_536_p0 <= empty_33_reg_469;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_536_p0 <= empty_29_reg_436;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_536_p0 <= empty_25_reg_403;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_536_p0 <= empty_21_reg_371;
        else 
            grp_fu_536_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_545_p0_assign_proc : process(vec0_load_reg_918, vec1_q0, ap_CS_fsm_state21, vec2_q0, ap_CS_fsm_state35, vec3_q0, ap_CS_fsm_state49, vec4_load_reg_1129, ap_CS_fsm_state7, ap_CS_fsm_state61)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            grp_fu_545_p0 <= vec4_load_reg_1129;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_545_p0 <= vec3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_545_p0 <= vec2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_545_p0 <= vec1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_545_p0 <= vec0_load_reg_918;
        else 
            grp_fu_545_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_545_p1_assign_proc : process(w1_load_reg_923, w2_load_reg_979, ap_CS_fsm_state21, w3_load_reg_1040, ap_CS_fsm_state35, w4_load_reg_1101, ap_CS_fsm_state49, w5_load_reg_1134, ap_CS_fsm_state7, ap_CS_fsm_state61)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            grp_fu_545_p1 <= w5_load_reg_1134;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_545_p1 <= w4_load_reg_1101;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_545_p1 <= w3_load_reg_1040;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_545_p1 <= w2_load_reg_979;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_545_p1 <= w1_load_reg_923;
        else 
            grp_fu_545_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_639_p2 <= std_logic_vector(unsigned(i1_0_reg_392) + unsigned(ap_const_lv4_1));
    i_2_fu_699_p2 <= std_logic_vector(unsigned(i3_0_reg_425) + unsigned(ap_const_lv3_1));
    i_3_fu_759_p2 <= std_logic_vector(unsigned(i5_0_reg_458) + unsigned(ap_const_lv2_1));
    i_fu_579_p2 <= std_logic_vector(unsigned(i_0_reg_360) + unsigned(ap_const_lv5_1));
    icmp_ln26_fu_573_p2 <= "1" when (i_0_reg_360 = ap_const_lv5_10) else "0";
    icmp_ln28_fu_606_p2 <= "1" when (j_0_reg_381 = ap_const_lv10_200) else "0";
    icmp_ln34_fu_633_p2 <= "1" when (i1_0_reg_392 = ap_const_lv4_8) else "0";
    icmp_ln36_fu_666_p2 <= "1" when (j2_0_reg_413 = ap_const_lv5_10) else "0";
    icmp_ln41_fu_693_p2 <= "1" when (i3_0_reg_425 = ap_const_lv3_4) else "0";
    icmp_ln43_fu_726_p2 <= "1" when (j4_0_reg_446 = ap_const_lv4_8) else "0";
    icmp_ln48_fu_753_p2 <= "1" when (i5_0_reg_458 = ap_const_lv2_2) else "0";
    icmp_ln50_fu_782_p2 <= "1" when (j6_0_reg_479 = ap_const_lv3_4) else "0";
    icmp_ln56_fu_809_p2 <= "1" when (j7_0_reg_503 = ap_const_lv2_2) else "0";
    icmp_ln60_1_fu_850_p2 <= "1" when (trunc_ln60_fu_840_p1 = ap_const_lv52_0) else "0";
    icmp_ln60_fu_844_p2 <= "0" when (tmp_17_fu_830_p4 = ap_const_lv11_7FF) else "1";
    j_1_fu_672_p2 <= std_logic_vector(unsigned(j2_0_reg_413) + unsigned(ap_const_lv5_1));
    j_2_fu_732_p2 <= std_logic_vector(unsigned(j4_0_reg_446) + unsigned(ap_const_lv4_1));
    j_3_fu_815_p2 <= std_logic_vector(unsigned(j7_0_reg_503) + unsigned(ap_const_lv2_1));
    j_4_fu_788_p2 <= std_logic_vector(unsigned(j6_0_reg_479) + unsigned(ap_const_lv3_1));
    j_fu_612_p2 <= std_logic_vector(unsigned(j_0_reg_381) + unsigned(ap_const_lv10_1));

    op_read_assign_proc : process(grp_fft_top_fu_514_in_r_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            op_read <= grp_fft_top_fu_514_in_r_read;
        else 
            op_read <= ap_const_logic_0;
        end if; 
    end process;

    or_ln60_fu_856_p2 <= (icmp_ln60_reg_1155 or icmp_ln60_1_reg_1160);
    res <= (or_ln60_fu_856_p2(0) and grp_fu_555_p2(0));

    res_ap_vld_assign_proc : process(ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            res_ap_vld <= ap_const_logic_1;
        else 
            res_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln1_fu_655_p3 <= (trunc_ln37_reg_946 & ap_const_lv4_0);
    shl_ln2_fu_715_p3 <= (trunc_ln44_reg_1007 & ap_const_lv3_0);
    shl_ln3_fu_775_p3 <= (trunc_ln51_reg_1068 & ap_const_lv2_0);
    shl_ln_fu_595_p3 <= (trunc_ln29_reg_885 & ap_const_lv9_0);
    tmp_17_fu_830_p4 <= bitcast_ln60_fu_827_p1(62 downto 52);
    trunc_ln29_fu_591_p1 <= i_0_reg_360(4 - 1 downto 0);
    trunc_ln37_fu_651_p1 <= i1_0_reg_392(3 - 1 downto 0);
    trunc_ln44_fu_711_p1 <= i3_0_reg_425(2 - 1 downto 0);
    trunc_ln51_fu_771_p1 <= i5_0_reg_458(1 - 1 downto 0);
    trunc_ln60_fu_840_p1 <= bitcast_ln60_fu_827_p1(52 - 1 downto 0);

    vec0_address0_assign_proc : process(ap_CS_fsm_state5, grp_fft_top_fu_514_out_r_address0, ap_CS_fsm_state2, zext_ln29_fu_618_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            vec0_address0 <= zext_ln29_fu_618_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            vec0_address0 <= grp_fft_top_fu_514_out_r_address0;
        else 
            vec0_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    vec0_ce0_assign_proc : process(ap_CS_fsm_state5, grp_fft_top_fu_514_out_r_ce0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            vec0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            vec0_ce0 <= grp_fft_top_fu_514_out_r_ce0;
        else 
            vec0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    vec0_we0_assign_proc : process(grp_fft_top_fu_514_out_r_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            vec0_we0 <= grp_fft_top_fu_514_out_r_we0;
        else 
            vec0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    vec1_address0_assign_proc : process(vec1_addr_reg_880, ap_CS_fsm_state20, ap_CS_fsm_state16, zext_ln37_fu_688_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            vec1_address0 <= zext_ln37_fu_688_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            vec1_address0 <= vec1_addr_reg_880;
        else 
            vec1_address0 <= "XXXX";
        end if; 
    end process;


    vec1_ce0_assign_proc : process(ap_CS_fsm_state20, grp_act_fun_fu_522_ap_done, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or ((grp_act_fun_fu_522_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            vec1_ce0 <= ap_const_logic_1;
        else 
            vec1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    vec1_we0_assign_proc : process(grp_act_fun_fu_522_ap_done, ap_CS_fsm_state16)
    begin
        if (((grp_act_fun_fu_522_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            vec1_we0 <= ap_const_logic_1;
        else 
            vec1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    vec2_address0_assign_proc : process(vec2_addr_reg_941, ap_CS_fsm_state34, ap_CS_fsm_state30, zext_ln44_fu_748_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            vec2_address0 <= zext_ln44_fu_748_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            vec2_address0 <= vec2_addr_reg_941;
        else 
            vec2_address0 <= "XXX";
        end if; 
    end process;


    vec2_ce0_assign_proc : process(ap_CS_fsm_state34, grp_act_fun_fu_522_ap_done, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or ((grp_act_fun_fu_522_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30)))) then 
            vec2_ce0 <= ap_const_logic_1;
        else 
            vec2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    vec2_we0_assign_proc : process(grp_act_fun_fu_522_ap_done, ap_CS_fsm_state30)
    begin
        if (((grp_act_fun_fu_522_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            vec2_we0 <= ap_const_logic_1;
        else 
            vec2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    vec3_address0_assign_proc : process(vec3_addr_reg_1002, ap_CS_fsm_state48, ap_CS_fsm_state44, zext_ln51_fu_804_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            vec3_address0 <= zext_ln51_fu_804_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            vec3_address0 <= vec3_addr_reg_1002;
        else 
            vec3_address0 <= "XX";
        end if; 
    end process;


    vec3_ce0_assign_proc : process(ap_CS_fsm_state48, grp_act_fun_fu_522_ap_done, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or ((grp_act_fun_fu_522_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44)))) then 
            vec3_ce0 <= ap_const_logic_1;
        else 
            vec3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    vec3_we0_assign_proc : process(grp_act_fun_fu_522_ap_done, ap_CS_fsm_state44)
    begin
        if (((grp_act_fun_fu_522_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            vec3_we0 <= ap_const_logic_1;
        else 
            vec3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    vec4_address0_assign_proc : process(vec4_addr_reg_1063, ap_CS_fsm_state59, ap_CS_fsm_state58, zext_ln57_fu_821_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            vec4_address0 <= zext_ln57_fu_821_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            vec4_address0 <= vec4_addr_reg_1063;
        else 
            vec4_address0 <= "X";
        end if; 
    end process;


    vec4_ce0_assign_proc : process(ap_CS_fsm_state59, grp_act_fun_fu_522_ap_done, ap_CS_fsm_state58)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state59) or ((grp_act_fun_fu_522_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58)))) then 
            vec4_ce0 <= ap_const_logic_1;
        else 
            vec4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    vec4_we0_assign_proc : process(grp_act_fun_fu_522_ap_done, ap_CS_fsm_state58)
    begin
        if (((grp_act_fun_fu_522_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            vec4_we0 <= ap_const_logic_1;
        else 
            vec4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    w1_address0 <= zext_ln29_1_fu_628_p1(13 - 1 downto 0);

    w1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            w1_ce0 <= ap_const_logic_1;
        else 
            w1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w2_address0 <= zext_ln37_1_fu_683_p1(7 - 1 downto 0);

    w2_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            w2_ce0 <= ap_const_logic_1;
        else 
            w2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w3_address0 <= zext_ln44_1_fu_743_p1(5 - 1 downto 0);

    w3_ce0_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            w3_ce0 <= ap_const_logic_1;
        else 
            w3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w4_address0 <= zext_ln51_1_fu_799_p1(3 - 1 downto 0);

    w4_ce0_assign_proc : process(ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            w4_ce0 <= ap_const_logic_1;
        else 
            w4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w5_address0 <= zext_ln57_fu_821_p1(1 - 1 downto 0);

    w5_ce0_assign_proc : process(ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            w5_ce0 <= ap_const_logic_1;
        else 
            w5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln27_fu_585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_360),64));
    zext_ln28_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_381),13));
    zext_ln29_1_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_fu_623_p2),64));
    zext_ln29_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_381),64));
    zext_ln35_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_392),64));
    zext_ln36_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_0_reg_413),7));
    zext_ln37_1_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln37_fu_678_p2),64));
    zext_ln37_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_0_reg_413),64));
    zext_ln42_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_0_reg_425),64));
    zext_ln43_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j4_0_reg_446),5));
    zext_ln44_1_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln44_fu_738_p2),64));
    zext_ln44_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j4_0_reg_446),64));
    zext_ln49_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i5_0_reg_458),64));
    zext_ln51_1_fu_799_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln51_fu_794_p2),64));
    zext_ln51_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j6_0_reg_479),64));
    zext_ln57_fu_821_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j7_0_reg_503),64));
end behav;
