-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dummy_proc_fe is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    config_data_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    config_data_V_empty_n : IN STD_LOGIC;
    config_data_V_read : OUT STD_LOGIC;
    config_data_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    config_data_V_full_n : IN STD_LOGIC;
    config_data_V_write : OUT STD_LOGIC;
    in_r_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    in_r_empty_n : IN STD_LOGIC;
    in_r_read : OUT STD_LOGIC;
    out_r_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_full_n : IN STD_LOGIC;
    out_r_write : OUT STD_LOGIC );
end;


architecture behav of dummy_proc_fe is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_3B000000 : STD_LOGIC_VECTOR (31 downto 0) := "00111011000000000000000000000000";
    constant ap_const_lv13_557 : STD_LOGIC_VECTOR (12 downto 0) := "0010101010111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv12_800 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv12_FF1 : STD_LOGIC_VECTOR (11 downto 0) := "111111110001";
    constant ap_const_lv12_F : STD_LOGIC_VECTOR (11 downto 0) := "000000001111";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal config_data_V_i_blk_n : STD_LOGIC;
    signal config_data_V_o_blk_n : STD_LOGIC;
    signal in_r_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln13_reg_504 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_r_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal icmp_ln13_reg_504_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_154 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln13_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln13_reg_504_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_504_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_504_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_504_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_504_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_504_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_504_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_504_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_504_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_504_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_504_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_504_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_504_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_195_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal in_read_reg_513 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_170_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_523 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_165_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_assign_reg_528 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_assign_reg_528_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal v_assign_reg_528_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_reg_534 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_4_fu_247_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_4_reg_539 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_1_fu_251_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_1_reg_544 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln571_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_reg_549 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_reg_555 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_fu_285_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln581_reg_562 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_291_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_reg_567 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln582_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_reg_572 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_3_fu_488_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln603_3_reg_578 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_170_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_173_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_205_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_fu_221_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_235_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_18_fu_239_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal trunc_ln556_fu_209_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln461_fu_231_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_263_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_fu_269_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sh_amt_fu_308_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_2_fu_303_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_3_fu_331_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln581_1_fu_317_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_fu_347_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_351_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln696_fu_361_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_364_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_fu_321_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln581_fu_313_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln571_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_fu_380_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln586_fu_357_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln585_1_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_372_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln582_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_fu_446_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln603_1_fu_460_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln603_1_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_2_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_2_fu_474_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_165_ce : STD_LOGIC;
    signal grp_fu_170_ce : STD_LOGIC;
    signal grp_fu_173_ce : STD_LOGIC;
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component kernel_fmul_32ns_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_sitofp_32scud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_fpext_32nsdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    kernel_fmul_32ns_bkb_U1 : component kernel_fmul_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_reg_523,
        din1 => ap_const_lv32_3B000000,
        ce => grp_fu_165_ce,
        dout => grp_fu_165_p2);

    kernel_sitofp_32scud_U2 : component kernel_sitofp_32scud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_170_p0,
        ce => grp_fu_170_ce,
        dout => grp_fu_170_p1);

    kernel_fpext_32nsdEe_U3 : component kernel_fpext_32nsdEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v_assign_reg_528,
        ce => grp_fu_173_ce,
        dout => grp_fu_173_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (config_data_V_full_n = ap_const_logic_0) or (config_data_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                elsif ((not(((real_start = ap_const_logic_0) or (config_data_V_full_n = ap_const_logic_0) or (config_data_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_189_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_0_reg_154 <= i_fu_195_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (config_data_V_full_n = ap_const_logic_0) or (config_data_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_154 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_reg_504_pp0_iter12_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln581_reg_562 <= add_ln581_fu_285_p2;
                icmp_ln571_reg_549 <= icmp_ln571_fu_257_p2;
                icmp_ln581_reg_555 <= icmp_ln581_fu_279_p2;
                icmp_ln582_reg_572 <= icmp_ln582_fu_297_p2;
                man_V_1_reg_544 <= man_V_1_fu_251_p2;
                p_Result_3_reg_534 <= ireg_V_fu_205_p1(63 downto 63);
                    p_Result_4_reg_539(51 downto 0) <= p_Result_4_fu_247_p1(51 downto 0);
                sub_ln581_reg_567 <= sub_ln581_fu_291_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln13_reg_504 <= icmp_ln13_fu_189_p2;
                icmp_ln13_reg_504_pp0_iter1_reg <= icmp_ln13_reg_504;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln13_reg_504_pp0_iter10_reg <= icmp_ln13_reg_504_pp0_iter9_reg;
                icmp_ln13_reg_504_pp0_iter11_reg <= icmp_ln13_reg_504_pp0_iter10_reg;
                icmp_ln13_reg_504_pp0_iter12_reg <= icmp_ln13_reg_504_pp0_iter11_reg;
                icmp_ln13_reg_504_pp0_iter13_reg <= icmp_ln13_reg_504_pp0_iter12_reg;
                icmp_ln13_reg_504_pp0_iter14_reg <= icmp_ln13_reg_504_pp0_iter13_reg;
                icmp_ln13_reg_504_pp0_iter2_reg <= icmp_ln13_reg_504_pp0_iter1_reg;
                icmp_ln13_reg_504_pp0_iter3_reg <= icmp_ln13_reg_504_pp0_iter2_reg;
                icmp_ln13_reg_504_pp0_iter4_reg <= icmp_ln13_reg_504_pp0_iter3_reg;
                icmp_ln13_reg_504_pp0_iter5_reg <= icmp_ln13_reg_504_pp0_iter4_reg;
                icmp_ln13_reg_504_pp0_iter6_reg <= icmp_ln13_reg_504_pp0_iter5_reg;
                icmp_ln13_reg_504_pp0_iter7_reg <= icmp_ln13_reg_504_pp0_iter6_reg;
                icmp_ln13_reg_504_pp0_iter8_reg <= icmp_ln13_reg_504_pp0_iter7_reg;
                icmp_ln13_reg_504_pp0_iter9_reg <= icmp_ln13_reg_504_pp0_iter8_reg;
                v_assign_reg_528_pp0_iter12_reg <= v_assign_reg_528;
                v_assign_reg_528_pp0_iter13_reg <= v_assign_reg_528_pp0_iter12_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_reg_504 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                in_read_reg_513 <= in_r_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_reg_504_pp0_iter13_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln603_3_reg_578 <= select_ln603_3_fu_488_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_reg_504_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_reg_523 <= grp_fu_170_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_reg_504_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                v_assign_reg_528 <= grp_fu_165_p2;
            end if;
        end if;
    end process;
    p_Result_4_reg_539(53 downto 52) <= "01";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, config_data_V_empty_n, config_data_V_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter15, icmp_ln13_fu_189_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter14)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (config_data_V_full_n = ap_const_logic_0) or (config_data_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln13_fu_189_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((icmp_ln13_fu_189_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    F2_fu_263_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_fu_231_p1));
    add_ln581_fu_285_p2 <= std_logic_vector(signed(ap_const_lv12_FF1) + signed(F2_fu_263_p2));
    and_ln581_fu_406_p2 <= (xor_ln582_fu_400_p2 and icmp_ln581_reg_555);
    and_ln582_fu_391_p2 <= (xor_ln571_fu_386_p2 and icmp_ln582_reg_572);
    and_ln585_1_fu_423_p2 <= (icmp_ln585_fu_325_p2 and and_ln581_fu_406_p2);
    and_ln585_fu_417_p2 <= (xor_ln585_fu_411_p2 and and_ln581_fu_406_p2);
    and_ln603_fu_440_p2 <= (xor_ln581_fu_434_p2 and icmp_ln603_fu_341_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state18 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(in_r_empty_n, out_r_full_n, ap_enable_reg_pp0_iter1, icmp_ln13_reg_504, ap_enable_reg_pp0_iter15, icmp_ln13_reg_504_pp0_iter14_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln13_reg_504_pp0_iter14_reg = ap_const_lv1_0) and (out_r_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1)) or ((icmp_ln13_reg_504 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(in_r_empty_n, out_r_full_n, ap_enable_reg_pp0_iter1, icmp_ln13_reg_504, ap_enable_reg_pp0_iter15, icmp_ln13_reg_504_pp0_iter14_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln13_reg_504_pp0_iter14_reg = ap_const_lv1_0) and (out_r_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1)) or ((icmp_ln13_reg_504 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_r_empty_n, out_r_full_n, ap_enable_reg_pp0_iter1, icmp_ln13_reg_504, ap_enable_reg_pp0_iter15, icmp_ln13_reg_504_pp0_iter14_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln13_reg_504_pp0_iter14_reg = ap_const_lv1_0) and (out_r_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1)) or ((icmp_ln13_reg_504 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, config_data_V_empty_n, config_data_V_full_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (config_data_V_full_n = ap_const_logic_0) or (config_data_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state17_pp0_stage0_iter15_assign_proc : process(out_r_full_n, icmp_ln13_reg_504_pp0_iter14_reg)
    begin
                ap_block_state17_pp0_stage0_iter15 <= ((icmp_ln13_reg_504_pp0_iter14_reg = ap_const_lv1_0) and (out_r_full_n = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(in_r_empty_n, icmp_ln13_reg_504)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln13_reg_504 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln13_fu_189_p2)
    begin
        if ((icmp_ln13_fu_189_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    ashr_ln586_fu_351_p2 <= std_logic_vector(shift_right(signed(man_V_2_fu_303_p3),to_integer(unsigned('0' & zext_ln586_fu_347_p1(31-1 downto 0)))));
    bitcast_ln696_fu_361_p1 <= v_assign_reg_528_pp0_iter13_reg;
    config_data_V_din <= (config_data_V_dout(15 downto 13) & ap_const_lv13_557);

    config_data_V_i_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, config_data_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            config_data_V_i_blk_n <= config_data_V_empty_n;
        else 
            config_data_V_i_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    config_data_V_o_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, config_data_V_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            config_data_V_o_blk_n <= config_data_V_full_n;
        else 
            config_data_V_o_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    config_data_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, config_data_V_empty_n, config_data_V_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (config_data_V_full_n = ap_const_logic_0) or (config_data_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            config_data_V_read <= ap_const_logic_1;
        else 
            config_data_V_read <= ap_const_logic_0;
        end if; 
    end process;


    config_data_V_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, config_data_V_empty_n, config_data_V_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (config_data_V_full_n = ap_const_logic_0) or (config_data_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            config_data_V_write <= ap_const_logic_1;
        else 
            config_data_V_write <= ap_const_logic_0;
        end if; 
    end process;

    exp_tmp_V_fu_221_p4 <= ireg_V_fu_205_p1(62 downto 52);

    grp_fu_165_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_165_ce <= ap_const_logic_1;
        else 
            grp_fu_165_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_170_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_170_ce <= ap_const_logic_1;
        else 
            grp_fu_170_ce <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_170_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(in_read_reg_513),32));


    grp_fu_173_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_173_ce <= ap_const_logic_1;
        else 
            grp_fu_173_ce <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_195_p2 <= std_logic_vector(unsigned(i_0_reg_154) + unsigned(ap_const_lv12_1));
    icmp_ln13_fu_189_p2 <= "1" when (i_0_reg_154 = ap_const_lv12_800) else "0";
    icmp_ln571_fu_257_p2 <= "1" when (trunc_ln556_fu_209_p1 = ap_const_lv63_0) else "0";
    icmp_ln581_fu_279_p2 <= "1" when (signed(tmp_2_fu_269_p4) > signed(ap_const_lv8_0)) else "0";
    icmp_ln582_fu_297_p2 <= "1" when (F2_fu_263_p2 = ap_const_lv12_F) else "0";
    icmp_ln585_fu_325_p2 <= "1" when (unsigned(sh_amt_fu_308_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln603_fu_341_p2 <= "1" when (tmp_3_fu_331_p4 = ap_const_lv8_0) else "0";

    in_r_blk_n_assign_proc : process(in_r_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln13_reg_504)
    begin
        if (((icmp_ln13_reg_504 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_r_blk_n <= in_r_empty_n;
        else 
            in_r_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_r_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln13_reg_504, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln13_reg_504 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_r_read <= ap_const_logic_1;
        else 
            in_r_read <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ireg_V_fu_205_p1 <= grp_fu_173_p1;
    man_V_1_fu_251_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_4_fu_247_p1));
    man_V_2_fu_303_p3 <= 
        man_V_1_reg_544 when (p_Result_3_reg_534(0) = '1') else 
        p_Result_4_reg_539;
    or_ln581_fu_429_p2 <= (or_ln582_fu_396_p2 or icmp_ln581_reg_555);
    or_ln582_fu_396_p2 <= (icmp_ln582_reg_572 or icmp_ln571_reg_549);
    or_ln603_1_fu_468_p2 <= (and_ln585_fu_417_p2 or and_ln582_fu_391_p2);
    or_ln603_2_fu_482_p2 <= (or_ln603_fu_454_p2 or or_ln603_1_fu_468_p2);
    or_ln603_fu_454_p2 <= (and_ln603_fu_440_p2 or and_ln585_1_fu_423_p2);

    out_r_blk_n_assign_proc : process(out_r_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter15, icmp_ln13_reg_504_pp0_iter14_reg)
    begin
        if (((icmp_ln13_reg_504_pp0_iter14_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1))) then 
            out_r_blk_n <= out_r_full_n;
        else 
            out_r_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_r_din <= (ap_const_lv16_0 & select_ln603_3_reg_578);

    out_r_write_assign_proc : process(ap_enable_reg_pp0_iter15, icmp_ln13_reg_504_pp0_iter14_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln13_reg_504_pp0_iter14_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_r_write <= ap_const_logic_1;
        else 
            out_r_write <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_4_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_239_p3),54));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln588_fu_372_p3 <= 
        ap_const_lv16_FFFF when (tmp_4_fu_364_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln603_1_fu_460_p3 <= 
        select_ln588_fu_372_p3 when (and_ln585_fu_417_p2(0) = '1') else 
        trunc_ln583_fu_321_p1;
    select_ln603_2_fu_474_p3 <= 
        select_ln603_fu_446_p3 when (or_ln603_fu_454_p2(0) = '1') else 
        select_ln603_1_fu_460_p3;
    select_ln603_3_fu_488_p3 <= 
        select_ln603_2_fu_474_p3 when (or_ln603_2_fu_482_p2(0) = '1') else 
        ap_const_lv16_0;
    select_ln603_fu_446_p3 <= 
        shl_ln604_fu_380_p2 when (and_ln603_fu_440_p2(0) = '1') else 
        trunc_ln586_fu_357_p1;
        sext_ln581_1_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_fu_308_p3),32));

        sext_ln581_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_fu_308_p3),16));

    sh_amt_fu_308_p3 <= 
        add_ln581_reg_562 when (icmp_ln581_reg_555(0) = '1') else 
        sub_ln581_reg_567;
    shl_ln604_fu_380_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_fu_321_p1),to_integer(unsigned('0' & sext_ln581_fu_313_p1(16-1 downto 0)))));
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln581_fu_291_p2 <= std_logic_vector(unsigned(ap_const_lv12_F) - unsigned(F2_fu_263_p2));
    tmp_18_fu_239_p3 <= (ap_const_lv1_1 & trunc_ln565_fu_235_p1);
    tmp_2_fu_269_p4 <= F2_fu_263_p2(11 downto 4);
    tmp_3_fu_331_p4 <= sh_amt_fu_308_p3(11 downto 4);
    tmp_4_fu_364_p3 <= bitcast_ln696_fu_361_p1(31 downto 31);
    trunc_ln556_fu_209_p1 <= ireg_V_fu_205_p1(63 - 1 downto 0);
    trunc_ln565_fu_235_p1 <= ireg_V_fu_205_p1(52 - 1 downto 0);
    trunc_ln583_fu_321_p1 <= man_V_2_fu_303_p3(16 - 1 downto 0);
    trunc_ln586_fu_357_p1 <= ashr_ln586_fu_351_p2(16 - 1 downto 0);
    xor_ln571_fu_386_p2 <= (icmp_ln571_reg_549 xor ap_const_lv1_1);
    xor_ln581_fu_434_p2 <= (or_ln581_fu_429_p2 xor ap_const_lv1_1);
    xor_ln582_fu_400_p2 <= (or_ln582_fu_396_p2 xor ap_const_lv1_1);
    xor_ln585_fu_411_p2 <= (icmp_ln585_fu_325_p2 xor ap_const_lv1_1);
    zext_ln461_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_fu_221_p4),12));
    zext_ln586_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_1_fu_317_p1),54));
end behav;
