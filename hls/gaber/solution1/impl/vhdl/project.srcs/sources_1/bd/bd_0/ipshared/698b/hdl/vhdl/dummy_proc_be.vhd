-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dummy_proc_be is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_r_empty_n : IN STD_LOGIC;
    in_r_read : OUT STD_LOGIC;
    out_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of dummy_proc_be is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_48800000 : STD_LOGIC_VECTOR (31 downto 0) := "01001000100000000000000000000000";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv16_FFE8 : STD_LOGIC_VECTOR (15 downto 0) := "1111111111101000";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in_r_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln25_reg_795 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_133 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_0_reg_133_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_0_reg_133_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_0_reg_133_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_0_reg_133_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_0_reg_133_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_0_reg_133_pp0_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_0_reg_133_pp0_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_0_reg_133_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_0_reg_133_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_0_reg_133_pp0_iter10_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_0_reg_133_pp0_iter11_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_0_reg_133_pp0_iter12_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_0_reg_133_pp0_iter13_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_0_reg_133_pp0_iter14_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_0_reg_133_pp0_iter15_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_0_reg_133_pp0_iter16_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_0_reg_133_pp0_iter17_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln25_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_795_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_795_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_795_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_795_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_795_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_795_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_795_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_795_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_795_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_795_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_795_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_795_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_795_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_795_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_795_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_795_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_795_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_168_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_799 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln935_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_804 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_804_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_804_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_16_fu_184_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_16_reg_809 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_16_reg_809_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_16_reg_809_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_7_fu_198_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_7_reg_814 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_7_reg_814_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_fu_206_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_reg_822 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln935_1_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_1_reg_827 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_1_reg_827_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_1_reg_827_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_19_fu_232_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_19_reg_832 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_19_reg_832_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_19_reg_832_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_9_fu_246_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_9_reg_837 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_9_reg_837_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_11_fu_254_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_11_reg_845 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln944_fu_279_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_reg_850 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln944_fu_285_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln944_reg_856 : STD_LOGIC_VECTOR (15 downto 0);
    signal lsb_index_fu_289_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_reg_861 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_867 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln947_fu_309_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln947_reg_872 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln943_fu_315_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_877 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_877_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln944_1_fu_334_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_1_reg_882 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln944_1_fu_340_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln944_1_reg_888 : STD_LOGIC_VECTOR (15 downto 0);
    signal lsb_index_1_fu_344_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_1_reg_893 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_899 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln947_1_fu_364_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln947_1_reg_904 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln943_1_fu_370_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_1_reg_909 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_1_reg_909_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal m_s_reg_914 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_8_reg_919 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_3_reg_924 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_12_reg_929 : STD_LOGIC_VECTOR (0 downto 0);
    signal re_fu_728_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal re_reg_934 : STD_LOGIC_VECTOR (31 downto 0);
    signal im_fu_783_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal im_reg_940 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_149_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_946 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_153_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_951 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_145_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_956 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_157_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_reg_961 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_phi_mux_i_0_phi_fu_137_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln27_fu_790_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_6_fu_174_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_fu_192_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_8_fu_216_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_4_fu_240_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_17_fu_264_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_271_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln947_fu_305_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_20_fu_319_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_1_fu_326_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln947_1_fu_360_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln947_fu_379_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln947_fu_382_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_7_fu_388_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln947_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln947_1_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_405_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln949_fu_418_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_8_fu_423_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln949_2_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln957_1_fu_453_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln958_fu_461_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln958_fu_466_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln958_fu_476_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_fu_450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln958_1_fu_481_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln958_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln958_fu_472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln958_fu_485_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln_fu_442_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln961_fu_499_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_1_fu_491_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_2_fu_503_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln947_1_fu_532_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln947_1_fu_535_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_13_fu_541_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln947_2_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln947_3_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_558_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln949_1_fu_571_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_14_fu_576_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_1_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_1_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_1_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln949_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln957_2_fu_606_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln958_1_fu_614_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln958_1_fu_619_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln958_1_fu_629_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_9_fu_603_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln958_3_fu_634_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln958_1_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln958_2_fu_625_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln958_1_fu_638_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln949_1_fu_595_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln961_1_fu_652_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_10_fu_644_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_12_fu_656_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln964_fu_690_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln964_fu_683_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_fu_695_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_15_fu_680_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_701_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_18_fu_708_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln738_fu_720_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln739_fu_724_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln964_1_fu_745_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln964_1_fu_738_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_1_fu_750_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_16_fu_735_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_756_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_21_fu_763_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln738_1_fu_775_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln739_1_fu_779_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_145_ce : STD_LOGIC;
    signal grp_fu_149_ce : STD_LOGIC;
    signal grp_fu_153_ce : STD_LOGIC;
    signal grp_fu_157_ce : STD_LOGIC;
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component kernel_fadd_32ns_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_fmul_32ns_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    kernel_fadd_32ns_eOg_U11 : component kernel_fadd_32ns_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_reg_946,
        din1 => tmp_s_reg_951,
        ce => grp_fu_145_ce,
        dout => grp_fu_145_p2);

    kernel_fmul_32ns_bkb_U12 : component kernel_fmul_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => re_reg_934,
        din1 => re_reg_934,
        ce => grp_fu_149_ce,
        dout => grp_fu_149_p2);

    kernel_fmul_32ns_bkb_U13 : component kernel_fmul_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => im_reg_940,
        din1 => im_reg_940,
        ce => grp_fu_153_ce,
        dout => grp_fu_153_p2);

    kernel_fmul_32ns_bkb_U14 : component kernel_fmul_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_14_reg_956,
        din1 => ap_const_lv32_48800000,
        ce => grp_fu_157_ce,
        dout => grp_fu_157_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln25_reg_795 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_reg_133 <= i_reg_799;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_133 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                i_0_reg_133_pp0_iter10_reg <= i_0_reg_133_pp0_iter9_reg;
                i_0_reg_133_pp0_iter11_reg <= i_0_reg_133_pp0_iter10_reg;
                i_0_reg_133_pp0_iter12_reg <= i_0_reg_133_pp0_iter11_reg;
                i_0_reg_133_pp0_iter13_reg <= i_0_reg_133_pp0_iter12_reg;
                i_0_reg_133_pp0_iter14_reg <= i_0_reg_133_pp0_iter13_reg;
                i_0_reg_133_pp0_iter15_reg <= i_0_reg_133_pp0_iter14_reg;
                i_0_reg_133_pp0_iter16_reg <= i_0_reg_133_pp0_iter15_reg;
                i_0_reg_133_pp0_iter17_reg <= i_0_reg_133_pp0_iter16_reg;
                i_0_reg_133_pp0_iter2_reg <= i_0_reg_133_pp0_iter1_reg;
                i_0_reg_133_pp0_iter3_reg <= i_0_reg_133_pp0_iter2_reg;
                i_0_reg_133_pp0_iter4_reg <= i_0_reg_133_pp0_iter3_reg;
                i_0_reg_133_pp0_iter5_reg <= i_0_reg_133_pp0_iter4_reg;
                i_0_reg_133_pp0_iter6_reg <= i_0_reg_133_pp0_iter5_reg;
                i_0_reg_133_pp0_iter7_reg <= i_0_reg_133_pp0_iter6_reg;
                i_0_reg_133_pp0_iter8_reg <= i_0_reg_133_pp0_iter7_reg;
                i_0_reg_133_pp0_iter9_reg <= i_0_reg_133_pp0_iter8_reg;
                icmp_ln25_reg_795_pp0_iter10_reg <= icmp_ln25_reg_795_pp0_iter9_reg;
                icmp_ln25_reg_795_pp0_iter11_reg <= icmp_ln25_reg_795_pp0_iter10_reg;
                icmp_ln25_reg_795_pp0_iter12_reg <= icmp_ln25_reg_795_pp0_iter11_reg;
                icmp_ln25_reg_795_pp0_iter13_reg <= icmp_ln25_reg_795_pp0_iter12_reg;
                icmp_ln25_reg_795_pp0_iter14_reg <= icmp_ln25_reg_795_pp0_iter13_reg;
                icmp_ln25_reg_795_pp0_iter15_reg <= icmp_ln25_reg_795_pp0_iter14_reg;
                icmp_ln25_reg_795_pp0_iter16_reg <= icmp_ln25_reg_795_pp0_iter15_reg;
                icmp_ln25_reg_795_pp0_iter17_reg <= icmp_ln25_reg_795_pp0_iter16_reg;
                icmp_ln25_reg_795_pp0_iter2_reg <= icmp_ln25_reg_795_pp0_iter1_reg;
                icmp_ln25_reg_795_pp0_iter3_reg <= icmp_ln25_reg_795_pp0_iter2_reg;
                icmp_ln25_reg_795_pp0_iter4_reg <= icmp_ln25_reg_795_pp0_iter3_reg;
                icmp_ln25_reg_795_pp0_iter5_reg <= icmp_ln25_reg_795_pp0_iter4_reg;
                icmp_ln25_reg_795_pp0_iter6_reg <= icmp_ln25_reg_795_pp0_iter5_reg;
                icmp_ln25_reg_795_pp0_iter7_reg <= icmp_ln25_reg_795_pp0_iter6_reg;
                icmp_ln25_reg_795_pp0_iter8_reg <= icmp_ln25_reg_795_pp0_iter7_reg;
                icmp_ln25_reg_795_pp0_iter9_reg <= icmp_ln25_reg_795_pp0_iter8_reg;
                icmp_ln935_1_reg_827_pp0_iter2_reg <= icmp_ln935_1_reg_827;
                icmp_ln935_1_reg_827_pp0_iter3_reg <= icmp_ln935_1_reg_827_pp0_iter2_reg;
                icmp_ln935_reg_804_pp0_iter2_reg <= icmp_ln935_reg_804;
                icmp_ln935_reg_804_pp0_iter3_reg <= icmp_ln935_reg_804_pp0_iter2_reg;
                p_Result_16_reg_809_pp0_iter2_reg <= p_Result_16_reg_809;
                p_Result_16_reg_809_pp0_iter3_reg <= p_Result_16_reg_809_pp0_iter2_reg;
                p_Result_19_reg_832_pp0_iter2_reg <= p_Result_19_reg_832;
                p_Result_19_reg_832_pp0_iter3_reg <= p_Result_19_reg_832_pp0_iter2_reg;
                tmp_V_7_reg_814_pp0_iter2_reg <= tmp_V_7_reg_814;
                tmp_V_9_reg_837_pp0_iter2_reg <= tmp_V_9_reg_837;
                trunc_ln943_1_reg_909_pp0_iter3_reg <= trunc_ln943_1_reg_909;
                trunc_ln943_reg_877_pp0_iter3_reg <= trunc_ln943_reg_877;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_0_reg_133_pp0_iter1_reg <= i_0_reg_133;
                icmp_ln25_reg_795 <= icmp_ln25_fu_162_p2;
                icmp_ln25_reg_795_pp0_iter1_reg <= icmp_ln25_reg_795;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                i_reg_799 <= i_fu_168_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln25_reg_795 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln935_1_reg_827 <= icmp_ln935_1_fu_226_p2;
                icmp_ln935_reg_804 <= icmp_ln935_fu_178_p2;
                p_Result_11_reg_845 <= p_Result_11_fu_254_p4;
                p_Result_16_reg_809 <= in_r_dout(15 downto 15);
                p_Result_19_reg_832 <= in_r_dout(31 downto 31);
                p_Result_s_reg_822 <= p_Result_s_fu_206_p4;
                tmp_V_7_reg_814 <= tmp_V_7_fu_198_p3;
                tmp_V_9_reg_837 <= tmp_V_9_fu_246_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln25_reg_795_pp0_iter3_reg = ap_const_lv1_0))) then
                im_reg_940 <= im_fu_783_p3;
                re_reg_934 <= re_fu_728_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln935_1_reg_827 = ap_const_lv1_0) and (icmp_ln25_reg_795_pp0_iter1_reg = ap_const_lv1_0))) then
                lsb_index_1_reg_893 <= lsb_index_1_fu_344_p2;
                sub_ln944_1_reg_882 <= sub_ln944_1_fu_334_p2;
                sub_ln947_1_reg_904 <= sub_ln947_1_fu_364_p2;
                tmp_10_reg_899 <= lsb_index_1_fu_344_p2(31 downto 1);
                trunc_ln943_1_reg_909 <= trunc_ln943_1_fu_370_p1;
                trunc_ln944_1_reg_888 <= trunc_ln944_1_fu_340_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln935_reg_804 = ap_const_lv1_0) and (icmp_ln25_reg_795_pp0_iter1_reg = ap_const_lv1_0))) then
                lsb_index_reg_861 <= lsb_index_fu_289_p2;
                sub_ln944_reg_850 <= sub_ln944_fu_279_p2;
                sub_ln947_reg_872 <= sub_ln947_fu_309_p2;
                tmp_6_reg_867 <= lsb_index_fu_289_p2(31 downto 1);
                trunc_ln943_reg_877 <= trunc_ln943_fu_315_p1;
                trunc_ln944_reg_856 <= trunc_ln944_fu_285_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln935_1_reg_827_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln25_reg_795_pp0_iter2_reg = ap_const_lv1_0))) then
                m_3_reg_924 <= m_12_fu_656_p2(63 downto 1);
                tmp_12_reg_929 <= m_12_fu_656_p2(25 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln935_reg_804_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln25_reg_795_pp0_iter2_reg = ap_const_lv1_0))) then
                m_s_reg_914 <= m_2_fu_503_p2(63 downto 1);
                tmp_8_reg_919 <= m_2_fu_503_p2(25 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln25_reg_795_pp0_iter12_reg = ap_const_lv1_0))) then
                tmp_14_reg_956 <= grp_fu_145_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln25_reg_795_pp0_iter16_reg = ap_const_lv1_0))) then
                tmp_15_reg_961 <= grp_fu_157_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln25_reg_795_pp0_iter7_reg = ap_const_lv1_0))) then
                tmp_reg_946 <= grp_fu_149_p2;
                tmp_s_reg_951 <= grp_fu_153_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, icmp_ln25_fu_162_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln25_fu_162_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1)) or ((icmp_ln25_fu_162_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    a_1_fu_552_p2 <= (icmp_ln947_3_fu_546_p2 and icmp_ln947_2_fu_527_p2);
    a_fu_399_p2 <= (icmp_ln947_fu_374_p2 and icmp_ln947_1_fu_393_p2);
    add_ln949_1_fu_571_p2 <= std_logic_vector(signed(ap_const_lv16_FFE8) + signed(trunc_ln944_1_reg_888));
    add_ln949_fu_418_p2 <= std_logic_vector(signed(ap_const_lv16_FFE8) + signed(trunc_ln944_reg_856));
    add_ln958_1_fu_614_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE7) + signed(sub_ln944_1_reg_882));
    add_ln958_fu_461_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE7) + signed(sub_ln944_reg_850));
    add_ln964_1_fu_750_p2 <= std_logic_vector(unsigned(sub_ln964_1_fu_745_p2) + unsigned(select_ln964_1_fu_738_p3));
    add_ln964_fu_695_p2 <= std_logic_vector(unsigned(sub_ln964_fu_690_p2) + unsigned(select_ln964_fu_683_p3));
    and_ln949_1_fu_583_p2 <= (xor_ln949_1_fu_565_p2 and p_Result_14_fu_576_p3);
    and_ln949_fu_430_p2 <= (xor_ln949_fu_412_p2 and p_Result_8_fu_423_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state21 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(in_r_empty_n, ap_enable_reg_pp0_iter1, icmp_ln25_reg_795)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln25_reg_795 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_r_empty_n, ap_enable_reg_pp0_iter1, icmp_ln25_reg_795)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln25_reg_795 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(in_r_empty_n, icmp_ln25_reg_795)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln25_reg_795 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln25_fu_162_p2)
    begin
        if ((icmp_ln25_fu_162_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_137_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln25_reg_795, i_0_reg_133, i_reg_799)
    begin
        if (((icmp_ln25_reg_795 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_0_phi_fu_137_p4 <= i_reg_799;
        else 
            ap_phi_mux_i_0_phi_fu_137_p4 <= i_0_reg_133;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln739_1_fu_779_p1 <= trunc_ln738_1_fu_775_p1;
    bitcast_ln739_fu_724_p1 <= trunc_ln738_fu_720_p1;

    grp_fu_145_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_145_ce <= ap_const_logic_1;
        else 
            grp_fu_145_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_149_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_149_ce <= ap_const_logic_1;
        else 
            grp_fu_149_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_153_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_153_ce <= ap_const_logic_1;
        else 
            grp_fu_153_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_157_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_157_ce <= ap_const_logic_1;
        else 
            grp_fu_157_ce <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_168_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_137_p4) + unsigned(ap_const_lv10_1));
    icmp_ln25_fu_162_p2 <= "1" when (ap_phi_mux_i_0_phi_fu_137_p4 = ap_const_lv10_200) else "0";
    icmp_ln935_1_fu_226_p2 <= "1" when (tmp_V_8_fu_216_p4 = ap_const_lv16_0) else "0";
    icmp_ln935_fu_178_p2 <= "1" when (tmp_V_6_fu_174_p1 = ap_const_lv16_0) else "0";
    icmp_ln947_1_fu_393_p2 <= "0" when (p_Result_7_fu_388_p2 = ap_const_lv16_0) else "1";
    icmp_ln947_2_fu_527_p2 <= "1" when (signed(tmp_10_reg_899) > signed(ap_const_lv31_0)) else "0";
    icmp_ln947_3_fu_546_p2 <= "0" when (p_Result_13_fu_541_p2 = ap_const_lv16_0) else "1";
    icmp_ln947_fu_374_p2 <= "1" when (signed(tmp_6_reg_867) > signed(ap_const_lv31_0)) else "0";
    icmp_ln958_1_fu_609_p2 <= "1" when (signed(lsb_index_1_reg_893) > signed(ap_const_lv32_0)) else "0";
    icmp_ln958_fu_456_p2 <= "1" when (signed(lsb_index_reg_861) > signed(ap_const_lv32_0)) else "0";
    im_fu_783_p3 <= 
        ap_const_lv32_0 when (icmp_ln935_1_reg_827_pp0_iter3_reg(0) = '1') else 
        bitcast_ln739_1_fu_779_p1;

    in_r_blk_n_assign_proc : process(in_r_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln25_reg_795)
    begin
        if (((icmp_ln25_reg_795 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_r_blk_n <= in_r_empty_n;
        else 
            in_r_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_r_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln25_reg_795, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln25_reg_795 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_r_read <= ap_const_logic_1;
        else 
            in_r_read <= ap_const_logic_0;
        end if; 
    end process;

    
    l_1_fu_326_p3_proc : process(p_Result_20_fu_319_p3)
    begin
        l_1_fu_326_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_20_fu_319_p3(i) = '1' then
                l_1_fu_326_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    l_fu_271_p3_proc : process(p_Result_17_fu_264_p3)
    begin
        l_fu_271_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_17_fu_264_p3(i) = '1' then
                l_fu_271_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lsb_index_1_fu_344_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE8) + signed(sub_ln944_1_fu_334_p2));
    lsb_index_fu_289_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE8) + signed(sub_ln944_fu_279_p2));
    lshr_ln947_1_fu_535_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv16_FFFF),to_integer(unsigned('0' & zext_ln947_1_fu_532_p1(16-1 downto 0)))));
    lshr_ln947_fu_382_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv16_FFFF),to_integer(unsigned('0' & zext_ln947_fu_379_p1(16-1 downto 0)))));
    lshr_ln958_1_fu_619_p2 <= std_logic_vector(shift_right(unsigned(zext_ln957_2_fu_606_p1),to_integer(unsigned('0' & add_ln958_1_fu_614_p2(31-1 downto 0)))));
    lshr_ln958_fu_466_p2 <= std_logic_vector(shift_right(unsigned(zext_ln957_1_fu_453_p1),to_integer(unsigned('0' & add_ln958_fu_461_p2(31-1 downto 0)))));
    m_10_fu_644_p3 <= 
        zext_ln958_2_fu_625_p1 when (icmp_ln958_1_fu_609_p2(0) = '1') else 
        shl_ln958_1_fu_638_p2;
    m_12_fu_656_p2 <= std_logic_vector(unsigned(zext_ln961_1_fu_652_p1) + unsigned(m_10_fu_644_p3));
    m_15_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_s_reg_914),64));
    m_16_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_3_reg_924),64));
    m_1_fu_491_p3 <= 
        zext_ln958_fu_472_p1 when (icmp_ln958_fu_456_p2(0) = '1') else 
        shl_ln958_fu_485_p2;
    m_2_fu_503_p2 <= std_logic_vector(unsigned(zext_ln961_fu_499_p1) + unsigned(m_1_fu_491_p3));
    m_9_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_9_reg_837_pp0_iter2_reg),64));
    m_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_7_reg_814_pp0_iter2_reg),64));
    or_ln949_1_fu_595_p3 <= (ap_const_lv31_0 & or_ln949_fu_589_p2);
    or_ln949_2_fu_436_p2 <= (and_ln949_fu_430_p2 or a_fu_399_p2);
    or_ln949_fu_589_p2 <= (and_ln949_1_fu_583_p2 or a_1_fu_552_p2);
    or_ln_fu_442_p3 <= (ap_const_lv31_0 & or_ln949_2_fu_436_p2);
    out_r_address0 <= zext_ln27_fu_790_p1(9 - 1 downto 0);

    out_r_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter18)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1))) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= tmp_15_reg_961;

    out_r_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln25_reg_795_pp0_iter17_reg, ap_enable_reg_pp0_iter18)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln25_reg_795_pp0_iter17_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    
    p_Result_11_fu_254_p4_proc : process(tmp_V_9_fu_246_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable p_Result_11_fu_254_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_F(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := tmp_V_9_fu_246_p3;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_F(4-1 downto 0)));
            for p_Result_11_fu_254_p4_i in 0 to 16-1 loop
                v0_cpy(p_Result_11_fu_254_p4_i) := tmp_V_9_fu_246_p3(16-1-p_Result_11_fu_254_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(16-1 downto 0)))));
        res_mask := res_mask(16-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_11_fu_254_p4 <= resvalue(16-1 downto 0);
    end process;

    p_Result_13_fu_541_p2 <= (tmp_V_9_reg_837_pp0_iter2_reg and lshr_ln947_1_fu_535_p2);
    p_Result_14_fu_576_p3 <= tmp_V_9_reg_837_pp0_iter2_reg(to_integer(unsigned(add_ln949_1_fu_571_p2)) downto to_integer(unsigned(add_ln949_1_fu_571_p2))) when (to_integer(unsigned(add_ln949_1_fu_571_p2))>= 0 and to_integer(unsigned(add_ln949_1_fu_571_p2))<=15) else "-";
    p_Result_16_fu_184_p3 <= in_r_dout(15 downto 15);
    p_Result_17_fu_264_p3 <= (ap_const_lv16_FFFF & p_Result_s_reg_822);
    p_Result_18_fu_708_p5 <= (m_15_fu_680_p1(63 downto 32) & tmp_20_fu_701_p3 & m_15_fu_680_p1(22 downto 0));
    p_Result_19_fu_232_p3 <= in_r_dout(31 downto 31);
    p_Result_20_fu_319_p3 <= (ap_const_lv16_FFFF & p_Result_11_reg_845);
    p_Result_21_fu_763_p5 <= (m_16_fu_735_p1(63 downto 32) & tmp_21_fu_756_p3 & m_16_fu_735_p1(22 downto 0));
    p_Result_7_fu_388_p2 <= (tmp_V_7_reg_814_pp0_iter2_reg and lshr_ln947_fu_382_p2);
    p_Result_8_fu_423_p3 <= tmp_V_7_reg_814_pp0_iter2_reg(to_integer(unsigned(add_ln949_fu_418_p2)) downto to_integer(unsigned(add_ln949_fu_418_p2))) when (to_integer(unsigned(add_ln949_fu_418_p2))>= 0 and to_integer(unsigned(add_ln949_fu_418_p2))<=15) else "-";
    
    p_Result_s_fu_206_p4_proc : process(tmp_V_7_fu_198_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable p_Result_s_fu_206_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_F(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := tmp_V_7_fu_198_p3;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_F(4-1 downto 0)));
            for p_Result_s_fu_206_p4_i in 0 to 16-1 loop
                v0_cpy(p_Result_s_fu_206_p4_i) := tmp_V_7_fu_198_p3(16-1-p_Result_s_fu_206_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(16-1 downto 0)))));
        res_mask := res_mask(16-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_206_p4 <= resvalue(16-1 downto 0);
    end process;

    re_fu_728_p3 <= 
        ap_const_lv32_0 when (icmp_ln935_reg_804_pp0_iter3_reg(0) = '1') else 
        bitcast_ln739_fu_724_p1;
    select_ln964_1_fu_738_p3 <= 
        ap_const_lv8_7F when (tmp_12_reg_929(0) = '1') else 
        ap_const_lv8_7E;
    select_ln964_fu_683_p3 <= 
        ap_const_lv8_7F when (tmp_8_reg_919(0) = '1') else 
        ap_const_lv8_7E;
    shl_ln958_1_fu_638_p2 <= std_logic_vector(shift_left(unsigned(m_9_fu_603_p1),to_integer(unsigned('0' & zext_ln958_3_fu_634_p1(31-1 downto 0)))));
    shl_ln958_fu_485_p2 <= std_logic_vector(shift_left(unsigned(m_fu_450_p1),to_integer(unsigned('0' & zext_ln958_1_fu_481_p1(31-1 downto 0)))));
    sub_ln944_1_fu_334_p2 <= std_logic_vector(unsigned(ap_const_lv32_10) - unsigned(l_1_fu_326_p3));
    sub_ln944_fu_279_p2 <= std_logic_vector(unsigned(ap_const_lv32_10) - unsigned(l_fu_271_p3));
    sub_ln947_1_fu_364_p2 <= std_logic_vector(unsigned(ap_const_lv5_9) - unsigned(trunc_ln947_1_fu_360_p1));
    sub_ln947_fu_309_p2 <= std_logic_vector(unsigned(ap_const_lv5_9) - unsigned(trunc_ln947_fu_305_p1));
    sub_ln958_1_fu_629_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_1_reg_882));
    sub_ln958_fu_476_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_reg_850));
    sub_ln964_1_fu_745_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) - unsigned(trunc_ln943_1_reg_909_pp0_iter3_reg));
    sub_ln964_fu_690_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) - unsigned(trunc_ln943_reg_877_pp0_iter3_reg));
    tmp_11_fu_558_p3 <= lsb_index_1_reg_893(31 downto 31);
    tmp_20_fu_701_p3 <= (p_Result_16_reg_809_pp0_iter3_reg & add_ln964_fu_695_p2);
    tmp_21_fu_756_p3 <= (p_Result_19_reg_832_pp0_iter3_reg & add_ln964_1_fu_750_p2);
    tmp_7_fu_405_p3 <= lsb_index_reg_861(31 downto 31);
    tmp_V_4_fu_240_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(tmp_V_8_fu_216_p4));
    tmp_V_6_fu_174_p1 <= in_r_dout(16 - 1 downto 0);
    tmp_V_7_fu_198_p3 <= 
        tmp_V_fu_192_p2 when (p_Result_16_fu_184_p3(0) = '1') else 
        tmp_V_6_fu_174_p1;
    tmp_V_8_fu_216_p4 <= in_r_dout(31 downto 16);
    tmp_V_9_fu_246_p3 <= 
        tmp_V_4_fu_240_p2 when (p_Result_19_fu_232_p3(0) = '1') else 
        tmp_V_8_fu_216_p4;
    tmp_V_fu_192_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(tmp_V_6_fu_174_p1));
    trunc_ln738_1_fu_775_p1 <= p_Result_21_fu_763_p5(32 - 1 downto 0);
    trunc_ln738_fu_720_p1 <= p_Result_18_fu_708_p5(32 - 1 downto 0);
    trunc_ln943_1_fu_370_p1 <= l_1_fu_326_p3(8 - 1 downto 0);
    trunc_ln943_fu_315_p1 <= l_fu_271_p3(8 - 1 downto 0);
    trunc_ln944_1_fu_340_p1 <= sub_ln944_1_fu_334_p2(16 - 1 downto 0);
    trunc_ln944_fu_285_p1 <= sub_ln944_fu_279_p2(16 - 1 downto 0);
    trunc_ln947_1_fu_360_p1 <= sub_ln944_1_fu_334_p2(5 - 1 downto 0);
    trunc_ln947_fu_305_p1 <= sub_ln944_fu_279_p2(5 - 1 downto 0);
    xor_ln949_1_fu_565_p2 <= (tmp_11_fu_558_p3 xor ap_const_lv1_1);
    xor_ln949_fu_412_p2 <= (tmp_7_fu_405_p3 xor ap_const_lv1_1);
    zext_ln27_fu_790_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_133_pp0_iter17_reg),64));
    zext_ln947_1_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_1_reg_904),16));
    zext_ln947_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_reg_872),16));
    zext_ln957_1_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_7_reg_814_pp0_iter2_reg),32));
    zext_ln957_2_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_9_reg_837_pp0_iter2_reg),32));
    zext_ln958_1_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln958_fu_476_p2),64));
    zext_ln958_2_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln958_1_fu_619_p2),64));
    zext_ln958_3_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln958_1_fu_629_p2),64));
    zext_ln958_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln958_fu_466_p2),64));
    zext_ln961_1_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln949_1_fu_595_p3),64));
    zext_ln961_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_442_p3),64));
end behav;
