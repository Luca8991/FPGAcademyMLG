// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kernel,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.341950,HLS_SYN_LAT=99476,HLS_SYN_TPT=none,HLS_SYN_MEM=35,HLS_SYN_DSP=48,HLS_SYN_FF=17298,HLS_SYN_LUT=16642,HLS_VERSION=2019_2}" *)

module kernel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        op_dout,
        op_empty_n,
        op_read,
        res,
        res_ap_vld
);

parameter    ap_ST_fsm_state1 = 74'd1;
parameter    ap_ST_fsm_state2 = 74'd2;
parameter    ap_ST_fsm_state3 = 74'd4;
parameter    ap_ST_fsm_state4 = 74'd8;
parameter    ap_ST_fsm_state5 = 74'd16;
parameter    ap_ST_fsm_state6 = 74'd32;
parameter    ap_ST_fsm_state7 = 74'd64;
parameter    ap_ST_fsm_state8 = 74'd128;
parameter    ap_ST_fsm_state9 = 74'd256;
parameter    ap_ST_fsm_state10 = 74'd512;
parameter    ap_ST_fsm_state11 = 74'd1024;
parameter    ap_ST_fsm_state12 = 74'd2048;
parameter    ap_ST_fsm_state13 = 74'd4096;
parameter    ap_ST_fsm_state14 = 74'd8192;
parameter    ap_ST_fsm_state15 = 74'd16384;
parameter    ap_ST_fsm_state16 = 74'd32768;
parameter    ap_ST_fsm_state17 = 74'd65536;
parameter    ap_ST_fsm_state18 = 74'd131072;
parameter    ap_ST_fsm_state19 = 74'd262144;
parameter    ap_ST_fsm_state20 = 74'd524288;
parameter    ap_ST_fsm_state21 = 74'd1048576;
parameter    ap_ST_fsm_state22 = 74'd2097152;
parameter    ap_ST_fsm_state23 = 74'd4194304;
parameter    ap_ST_fsm_state24 = 74'd8388608;
parameter    ap_ST_fsm_state25 = 74'd16777216;
parameter    ap_ST_fsm_state26 = 74'd33554432;
parameter    ap_ST_fsm_state27 = 74'd67108864;
parameter    ap_ST_fsm_state28 = 74'd134217728;
parameter    ap_ST_fsm_state29 = 74'd268435456;
parameter    ap_ST_fsm_state30 = 74'd536870912;
parameter    ap_ST_fsm_state31 = 74'd1073741824;
parameter    ap_ST_fsm_state32 = 74'd2147483648;
parameter    ap_ST_fsm_state33 = 74'd4294967296;
parameter    ap_ST_fsm_state34 = 74'd8589934592;
parameter    ap_ST_fsm_state35 = 74'd17179869184;
parameter    ap_ST_fsm_state36 = 74'd34359738368;
parameter    ap_ST_fsm_state37 = 74'd68719476736;
parameter    ap_ST_fsm_state38 = 74'd137438953472;
parameter    ap_ST_fsm_state39 = 74'd274877906944;
parameter    ap_ST_fsm_state40 = 74'd549755813888;
parameter    ap_ST_fsm_state41 = 74'd1099511627776;
parameter    ap_ST_fsm_state42 = 74'd2199023255552;
parameter    ap_ST_fsm_state43 = 74'd4398046511104;
parameter    ap_ST_fsm_state44 = 74'd8796093022208;
parameter    ap_ST_fsm_state45 = 74'd17592186044416;
parameter    ap_ST_fsm_state46 = 74'd35184372088832;
parameter    ap_ST_fsm_state47 = 74'd70368744177664;
parameter    ap_ST_fsm_state48 = 74'd140737488355328;
parameter    ap_ST_fsm_state49 = 74'd281474976710656;
parameter    ap_ST_fsm_state50 = 74'd562949953421312;
parameter    ap_ST_fsm_state51 = 74'd1125899906842624;
parameter    ap_ST_fsm_state52 = 74'd2251799813685248;
parameter    ap_ST_fsm_state53 = 74'd4503599627370496;
parameter    ap_ST_fsm_state54 = 74'd9007199254740992;
parameter    ap_ST_fsm_state55 = 74'd18014398509481984;
parameter    ap_ST_fsm_state56 = 74'd36028797018963968;
parameter    ap_ST_fsm_state57 = 74'd72057594037927936;
parameter    ap_ST_fsm_state58 = 74'd144115188075855872;
parameter    ap_ST_fsm_state59 = 74'd288230376151711744;
parameter    ap_ST_fsm_state60 = 74'd576460752303423488;
parameter    ap_ST_fsm_state61 = 74'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 74'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 74'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 74'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 74'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 74'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 74'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 74'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 74'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 74'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 74'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 74'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 74'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 74'd9444732965739290427392;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] op_dout;
input   op_empty_n;
output   op_read;
output   res;
output   res_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg op_read;
reg res_ap_vld;

(* fsm_encoding = "none" *) reg   [73:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] b1_address0;
reg    b1_ce0;
wire   [31:0] b1_q0;
wire   [12:0] w1_address0;
reg    w1_ce0;
wire   [31:0] w1_q0;
wire   [2:0] b2_address0;
reg    b2_ce0;
wire   [31:0] b2_q0;
wire   [6:0] w2_address0;
reg    w2_ce0;
wire   [31:0] w2_q0;
wire   [1:0] b3_address0;
reg    b3_ce0;
wire   [31:0] b3_q0;
wire   [4:0] w3_address0;
reg    w3_ce0;
wire   [31:0] w3_q0;
wire   [0:0] b4_address0;
reg    b4_ce0;
wire   [31:0] b4_q0;
wire   [2:0] w4_address0;
reg    w4_ce0;
wire   [31:0] w4_q0;
wire   [0:0] w5_address0;
reg    w5_ce0;
wire   [31:0] w5_q0;
wire   [31:0] grp_fu_545_p2;
reg   [31:0] reg_560;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state64;
wire   [31:0] grp_fu_536_p2;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state57;
wire   [4:0] i_fu_579_p2;
reg   [4:0] i_reg_870;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln26_fu_573_p2;
reg   [3:0] vec1_addr_reg_880;
wire   [3:0] trunc_ln29_fu_591_p1;
reg   [3:0] trunc_ln29_reg_885;
wire    ap_CS_fsm_state4;
wire   [12:0] shl_ln_fu_595_p3;
reg   [12:0] shl_ln_reg_895;
wire   [9:0] j_fu_612_p2;
reg   [9:0] j_reg_903;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln28_fu_606_p2;
wire   [31:0] vec0_q0;
reg   [31:0] vec0_load_reg_918;
wire    ap_CS_fsm_state6;
reg   [31:0] w1_load_reg_923;
wire   [3:0] i_1_fu_639_p2;
reg   [3:0] i_1_reg_931;
wire    ap_CS_fsm_state17;
wire   [0:0] icmp_ln34_fu_633_p2;
reg   [2:0] vec2_addr_reg_941;
wire   [2:0] trunc_ln37_fu_651_p1;
reg   [2:0] trunc_ln37_reg_946;
wire    ap_CS_fsm_state18;
wire   [6:0] shl_ln1_fu_655_p3;
reg   [6:0] shl_ln1_reg_956;
wire   [4:0] j_1_fu_672_p2;
reg   [4:0] j_1_reg_964;
wire    ap_CS_fsm_state19;
wire   [0:0] icmp_ln36_fu_666_p2;
wire    ap_CS_fsm_state20;
reg   [31:0] w2_load_reg_979;
wire   [31:0] vec1_q0;
wire    ap_CS_fsm_state21;
wire   [2:0] i_2_fu_699_p2;
reg   [2:0] i_2_reg_992;
wire    ap_CS_fsm_state31;
wire   [0:0] icmp_ln41_fu_693_p2;
reg   [1:0] vec3_addr_reg_1002;
wire   [1:0] trunc_ln44_fu_711_p1;
reg   [1:0] trunc_ln44_reg_1007;
wire    ap_CS_fsm_state32;
wire   [4:0] shl_ln2_fu_715_p3;
reg   [4:0] shl_ln2_reg_1017;
wire   [3:0] j_2_fu_732_p2;
reg   [3:0] j_2_reg_1025;
wire    ap_CS_fsm_state33;
wire   [0:0] icmp_ln43_fu_726_p2;
wire    ap_CS_fsm_state34;
reg   [31:0] w3_load_reg_1040;
wire   [31:0] vec2_q0;
wire    ap_CS_fsm_state35;
wire   [1:0] i_3_fu_759_p2;
reg   [1:0] i_3_reg_1053;
wire    ap_CS_fsm_state45;
wire   [0:0] icmp_ln48_fu_753_p2;
reg   [0:0] vec4_addr_reg_1063;
wire   [0:0] trunc_ln51_fu_771_p1;
reg   [0:0] trunc_ln51_reg_1068;
wire    ap_CS_fsm_state46;
wire   [2:0] shl_ln3_fu_775_p3;
reg   [2:0] shl_ln3_reg_1078;
wire   [2:0] j_4_fu_788_p2;
reg   [2:0] j_4_reg_1086;
wire    ap_CS_fsm_state47;
wire   [0:0] icmp_ln50_fu_782_p2;
wire    ap_CS_fsm_state48;
reg   [31:0] w4_load_reg_1101;
wire   [31:0] vec3_q0;
wire    ap_CS_fsm_state49;
wire   [1:0] j_3_fu_815_p2;
reg   [1:0] j_3_reg_1114;
wire    ap_CS_fsm_state59;
wire   [0:0] icmp_ln56_fu_809_p2;
wire   [31:0] vec4_q0;
reg   [31:0] vec4_load_reg_1129;
wire    ap_CS_fsm_state60;
reg   [31:0] w5_load_reg_1134;
wire    ap_CS_fsm_state69;
wire   [31:0] grp_act_fun_fu_522_ap_return;
reg   [31:0] res_t_reg_1144;
wire    ap_CS_fsm_state70;
wire    grp_act_fun_fu_522_ap_ready;
wire    grp_act_fun_fu_522_ap_done;
wire   [63:0] grp_fu_552_p1;
reg   [63:0] tmp_s_reg_1149;
wire    ap_CS_fsm_state72;
wire   [0:0] icmp_ln60_fu_844_p2;
reg   [0:0] icmp_ln60_reg_1155;
wire    ap_CS_fsm_state73;
wire   [0:0] icmp_ln60_1_fu_850_p2;
reg   [0:0] icmp_ln60_1_reg_1160;
reg   [8:0] vec0_address0;
reg    vec0_ce0;
reg    vec0_we0;
reg   [3:0] vec1_address0;
reg    vec1_ce0;
reg    vec1_we0;
reg   [2:0] vec2_address0;
reg    vec2_ce0;
reg    vec2_we0;
reg   [1:0] vec3_address0;
reg    vec3_ce0;
reg    vec3_we0;
reg   [0:0] vec4_address0;
reg    vec4_ce0;
reg    vec4_we0;
wire    grp_fft_top_fu_514_in_r_read;
wire   [8:0] grp_fft_top_fu_514_out_r_address0;
wire    grp_fft_top_fu_514_out_r_ce0;
wire   [31:0] grp_fft_top_fu_514_out_r_d0;
wire    grp_fft_top_fu_514_out_r_we0;
wire   [8:0] grp_fft_top_fu_514_out_r_address1;
wire    grp_fft_top_fu_514_out_r_ce1;
wire   [31:0] grp_fft_top_fu_514_out_r_d1;
wire    grp_fft_top_fu_514_out_r_we1;
wire    grp_fft_top_fu_514_ap_start;
wire    grp_fft_top_fu_514_ap_done;
wire    grp_fft_top_fu_514_ap_ready;
wire    grp_fft_top_fu_514_ap_idle;
reg    grp_fft_top_fu_514_ap_continue;
wire    grp_act_fun_fu_522_ap_start;
wire    grp_act_fun_fu_522_ap_idle;
reg   [31:0] grp_act_fun_fu_522_vec;
reg   [4:0] i_0_reg_360;
wire    ap_CS_fsm_state2;
wire    ap_sync_grp_fft_top_fu_514_ap_ready;
wire    ap_sync_grp_fft_top_fu_514_ap_done;
reg    ap_block_state2_on_subcall_done;
wire    ap_CS_fsm_state16;
reg   [31:0] empty_21_reg_371;
reg   [9:0] j_0_reg_381;
reg   [3:0] i1_0_reg_392;
wire    ap_CS_fsm_state30;
reg   [31:0] empty_25_reg_403;
reg   [4:0] j2_0_reg_413;
reg   [2:0] i3_0_reg_425;
wire    ap_CS_fsm_state44;
reg   [31:0] empty_29_reg_436;
reg   [3:0] j4_0_reg_446;
reg   [1:0] i5_0_reg_458;
wire    ap_CS_fsm_state58;
reg   [31:0] empty_33_reg_469;
reg   [2:0] j6_0_reg_479;
reg   [31:0] res_t_0_reg_491;
reg   [1:0] j7_0_reg_503;
reg    grp_fft_top_fu_514_ap_start_reg;
reg    ap_sync_reg_grp_fft_top_fu_514_ap_ready;
reg    ap_sync_reg_grp_fft_top_fu_514_ap_done;
reg    grp_act_fun_fu_522_ap_start_reg;
wire   [63:0] zext_ln27_fu_585_p1;
wire   [63:0] zext_ln29_fu_618_p1;
wire   [63:0] zext_ln29_1_fu_628_p1;
wire   [63:0] zext_ln35_fu_645_p1;
wire   [63:0] zext_ln37_1_fu_683_p1;
wire   [63:0] zext_ln37_fu_688_p1;
wire   [63:0] zext_ln42_fu_705_p1;
wire   [63:0] zext_ln44_1_fu_743_p1;
wire   [63:0] zext_ln44_fu_748_p1;
wire   [63:0] zext_ln49_fu_765_p1;
wire   [63:0] zext_ln51_1_fu_799_p1;
wire   [63:0] zext_ln51_fu_804_p1;
wire   [63:0] zext_ln57_fu_821_p1;
wire    ap_CS_fsm_state74;
reg   [31:0] grp_fu_536_p0;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state65;
reg   [31:0] grp_fu_545_p0;
reg   [31:0] grp_fu_545_p1;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state71;
wire   [12:0] zext_ln28_fu_602_p1;
wire   [12:0] add_ln29_fu_623_p2;
wire   [6:0] zext_ln36_fu_662_p1;
wire   [6:0] add_ln37_fu_678_p2;
wire   [4:0] zext_ln43_fu_722_p1;
wire   [4:0] add_ln44_fu_738_p2;
wire   [2:0] add_ln51_fu_794_p2;
wire   [63:0] bitcast_ln60_fu_827_p1;
wire   [10:0] tmp_17_fu_830_p4;
wire   [51:0] trunc_ln60_fu_840_p1;
wire   [0:0] or_ln60_fu_856_p2;
wire   [0:0] grp_fu_555_p2;
reg   [73:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 74'd1;
#0 grp_fft_top_fu_514_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_fft_top_fu_514_ap_ready = 1'b0;
#0 ap_sync_reg_grp_fft_top_fu_514_ap_done = 1'b0;
#0 grp_act_fun_fu_522_ap_start_reg = 1'b0;
end

kernel_b1 #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
b1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(b1_address0),
    .ce0(b1_ce0),
    .q0(b1_q0)
);

kernel_w1 #(
    .DataWidth( 32 ),
    .AddressRange( 8192 ),
    .AddressWidth( 13 ))
w1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w1_address0),
    .ce0(w1_ce0),
    .q0(w1_q0)
);

kernel_b2 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
b2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(b2_address0),
    .ce0(b2_ce0),
    .q0(b2_q0)
);

kernel_w2 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
w2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w2_address0),
    .ce0(w2_ce0),
    .q0(w2_q0)
);

kernel_b3 #(
    .DataWidth( 32 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
b3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(b3_address0),
    .ce0(b3_ce0),
    .q0(b3_q0)
);

kernel_w3 #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
w3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w3_address0),
    .ce0(w3_ce0),
    .q0(w3_q0)
);

kernel_b4 #(
    .DataWidth( 32 ),
    .AddressRange( 2 ),
    .AddressWidth( 1 ))
b4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(b4_address0),
    .ce0(b4_ce0),
    .q0(b4_q0)
);

kernel_w4 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
w4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w4_address0),
    .ce0(w4_ce0),
    .q0(w4_q0)
);

kernel_w5 #(
    .DataWidth( 32 ),
    .AddressRange( 2 ),
    .AddressWidth( 1 ))
w5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w5_address0),
    .ce0(w5_ce0),
    .q0(w5_q0)
);

kernel_vec0 #(
    .DataWidth( 32 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
vec0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(vec0_address0),
    .ce0(vec0_ce0),
    .we0(vec0_we0),
    .d0(grp_fft_top_fu_514_out_r_d0),
    .q0(vec0_q0)
);

kernel_vec1 #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
vec1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(vec1_address0),
    .ce0(vec1_ce0),
    .we0(vec1_we0),
    .d0(grp_act_fun_fu_522_ap_return),
    .q0(vec1_q0)
);

kernel_vec2 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
vec2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(vec2_address0),
    .ce0(vec2_ce0),
    .we0(vec2_we0),
    .d0(grp_act_fun_fu_522_ap_return),
    .q0(vec2_q0)
);

kernel_vec3 #(
    .DataWidth( 32 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
vec3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(vec3_address0),
    .ce0(vec3_ce0),
    .we0(vec3_we0),
    .d0(grp_act_fun_fu_522_ap_return),
    .q0(vec3_q0)
);

kernel_vec4 #(
    .DataWidth( 32 ),
    .AddressRange( 2 ),
    .AddressWidth( 1 ))
vec4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(vec4_address0),
    .ce0(vec4_ce0),
    .we0(vec4_we0),
    .d0(grp_act_fun_fu_522_ap_return),
    .q0(vec4_q0)
);

fft_top grp_fft_top_fu_514(
    .in_r_dout(op_dout),
    .in_r_empty_n(op_empty_n),
    .in_r_read(grp_fft_top_fu_514_in_r_read),
    .out_r_address0(grp_fft_top_fu_514_out_r_address0),
    .out_r_ce0(grp_fft_top_fu_514_out_r_ce0),
    .out_r_d0(grp_fft_top_fu_514_out_r_d0),
    .out_r_q0(32'd0),
    .out_r_we0(grp_fft_top_fu_514_out_r_we0),
    .out_r_address1(grp_fft_top_fu_514_out_r_address1),
    .out_r_ce1(grp_fft_top_fu_514_out_r_ce1),
    .out_r_d1(grp_fft_top_fu_514_out_r_d1),
    .out_r_q1(32'd0),
    .out_r_we1(grp_fft_top_fu_514_out_r_we1),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_fft_top_fu_514_ap_start),
    .ap_done(grp_fft_top_fu_514_ap_done),
    .ap_ready(grp_fft_top_fu_514_ap_ready),
    .ap_idle(grp_fft_top_fu_514_ap_idle),
    .ap_continue(grp_fft_top_fu_514_ap_continue)
);

act_fun grp_act_fun_fu_522(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_act_fun_fu_522_ap_start),
    .ap_done(grp_act_fun_fu_522_ap_done),
    .ap_idle(grp_act_fun_fu_522_ap_idle),
    .ap_ready(grp_act_fun_fu_522_ap_ready),
    .vec(grp_act_fun_fu_522_vec),
    .ap_return(grp_act_fun_fu_522_ap_return)
);

kernel_fadd_32ns_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_fadd_32ns_eOg_U38(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_536_p0),
    .din1(reg_560),
    .ce(1'b1),
    .dout(grp_fu_536_p2)
);

kernel_fmul_32ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_fmul_32ns_bkb_U39(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_545_p0),
    .din1(grp_fu_545_p1),
    .ce(1'b1),
    .dout(grp_fu_545_p2)
);

kernel_fpext_32nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
kernel_fpext_32nsdEe_U40(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(res_t_reg_1144),
    .ce(1'b1),
    .dout(grp_fu_552_p1)
);

kernel_dcmp_64ns_lbW #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
kernel_dcmp_64ns_lbW_U41(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_s_reg_1149),
    .din1(64'd4606281698874543309),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_555_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_fft_top_fu_514_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_sync_reg_grp_fft_top_fu_514_ap_done <= 1'b0;
        end else if ((grp_fft_top_fu_514_ap_done == 1'b1)) begin
            ap_sync_reg_grp_fft_top_fu_514_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_fft_top_fu_514_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_sync_reg_grp_fft_top_fu_514_ap_ready <= 1'b0;
        end else if ((grp_fft_top_fu_514_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_fft_top_fu_514_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_act_fun_fu_522_ap_start_reg <= 1'b0;
    end else begin
        if ((((icmp_ln56_fu_809_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state59)) | ((icmp_ln50_fu_782_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state47)) | ((icmp_ln43_fu_726_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state33)) | ((icmp_ln36_fu_666_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19)) | ((icmp_ln28_fu_606_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5)))) begin
            grp_act_fun_fu_522_ap_start_reg <= 1'b1;
        end else if ((grp_act_fun_fu_522_ap_ready == 1'b1)) begin
            grp_act_fun_fu_522_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_fft_top_fu_514_ap_start_reg <= 1'b0;
    end else begin
        if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((ap_sync_grp_fft_top_fu_514_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state2)))) begin
            grp_fft_top_fu_514_ap_start_reg <= 1'b1;
        end else if ((grp_fft_top_fu_514_ap_ready == 1'b1)) begin
            grp_fft_top_fu_514_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        empty_21_reg_371 <= grp_fu_536_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        empty_21_reg_371 <= b1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        empty_25_reg_403 <= grp_fu_536_p2;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        empty_25_reg_403 <= b2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        empty_29_reg_436 <= grp_fu_536_p2;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        empty_29_reg_436 <= b3_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        empty_33_reg_469 <= grp_fu_536_p2;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        empty_33_reg_469 <= b4_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_573_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i1_0_reg_392 <= 4'd0;
    end else if (((grp_act_fun_fu_522_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
        i1_0_reg_392 <= i_1_reg_931;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_fu_633_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        i3_0_reg_425 <= 3'd0;
    end else if (((grp_act_fun_fu_522_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
        i3_0_reg_425 <= i_2_reg_992;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_fu_693_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state31))) begin
        i5_0_reg_458 <= 2'd0;
    end else if (((grp_act_fun_fu_522_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state58))) begin
        i5_0_reg_458 <= i_3_reg_1053;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_act_fun_fu_522_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        i_0_reg_360 <= i_reg_870;
    end else if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_360 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        j2_0_reg_413 <= j_1_reg_964;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        j2_0_reg_413 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        j4_0_reg_446 <= j_2_reg_1025;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        j4_0_reg_446 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        j6_0_reg_479 <= j_4_reg_1086;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        j6_0_reg_479 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_753_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
        j7_0_reg_503 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        j7_0_reg_503 <= j_3_reg_1114;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        j_0_reg_381 <= j_reg_903;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_0_reg_381 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_753_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
        res_t_0_reg_491 <= 32'd1073846019;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        res_t_0_reg_491 <= grp_fu_536_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        i_1_reg_931 <= i_1_fu_639_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        i_2_reg_992 <= i_2_fu_699_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        i_3_reg_1053 <= i_3_fu_759_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_870 <= i_fu_579_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        icmp_ln60_1_reg_1160 <= icmp_ln60_1_fu_850_p2;
        icmp_ln60_reg_1155 <= icmp_ln60_fu_844_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        j_1_reg_964 <= j_1_fu_672_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        j_2_reg_1025 <= j_2_fu_732_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        j_3_reg_1114 <= j_3_fu_815_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        j_4_reg_1086 <= j_4_fu_788_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_reg_903 <= j_fu_612_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_560 <= grp_fu_545_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_act_fun_fu_522_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state70))) begin
        res_t_reg_1144 <= grp_act_fun_fu_522_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        shl_ln1_reg_956[6 : 4] <= shl_ln1_fu_655_p3[6 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        shl_ln2_reg_1017[4 : 3] <= shl_ln2_fu_715_p3[4 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        shl_ln3_reg_1078[2] <= shl_ln3_fu_775_p3[2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        shl_ln_reg_895[12 : 9] <= shl_ln_fu_595_p3[12 : 9];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        tmp_s_reg_1149 <= grp_fu_552_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_573_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        trunc_ln29_reg_885 <= trunc_ln29_fu_591_p1;
        vec1_addr_reg_880 <= zext_ln27_fu_585_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_fu_633_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        trunc_ln37_reg_946 <= trunc_ln37_fu_651_p1;
        vec2_addr_reg_941 <= zext_ln35_fu_645_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_fu_693_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state31))) begin
        trunc_ln44_reg_1007 <= trunc_ln44_fu_711_p1;
        vec3_addr_reg_1002 <= zext_ln42_fu_705_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_753_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state45))) begin
        trunc_ln51_reg_1068 <= trunc_ln51_fu_771_p1;
        vec4_addr_reg_1063 <= zext_ln49_fu_765_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        vec0_load_reg_918 <= vec0_q0;
        w1_load_reg_923 <= w1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        vec4_load_reg_1129 <= vec4_q0;
        w5_load_reg_1134 <= w5_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        w2_load_reg_979 <= w2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        w3_load_reg_1040 <= w3_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        w4_load_reg_1101 <= w4_q0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b1_ce0 = 1'b1;
    end else begin
        b1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        b2_ce0 = 1'b1;
    end else begin
        b2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        b3_ce0 = 1'b1;
    end else begin
        b3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        b4_ce0 = 1'b1;
    end else begin
        b4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        grp_act_fun_fu_522_vec = res_t_0_reg_491;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_act_fun_fu_522_vec = empty_33_reg_469;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        grp_act_fun_fu_522_vec = empty_29_reg_436;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_act_fun_fu_522_vec = empty_25_reg_403;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_act_fun_fu_522_vec = empty_21_reg_371;
    end else begin
        grp_act_fun_fu_522_vec = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        grp_fft_top_fu_514_ap_continue = 1'b1;
    end else begin
        grp_fft_top_fu_514_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        grp_fu_536_p0 = res_t_0_reg_491;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        grp_fu_536_p0 = empty_33_reg_469;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        grp_fu_536_p0 = empty_29_reg_436;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_536_p0 = empty_25_reg_403;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_536_p0 = empty_21_reg_371;
    end else begin
        grp_fu_536_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        grp_fu_545_p0 = vec4_load_reg_1129;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        grp_fu_545_p0 = vec3_q0;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_545_p0 = vec2_q0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_545_p0 = vec1_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_545_p0 = vec0_load_reg_918;
    end else begin
        grp_fu_545_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        grp_fu_545_p1 = w5_load_reg_1134;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        grp_fu_545_p1 = w4_load_reg_1101;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_545_p1 = w3_load_reg_1040;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_545_p1 = w2_load_reg_979;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_545_p1 = w1_load_reg_923;
    end else begin
        grp_fu_545_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        op_read = grp_fft_top_fu_514_in_r_read;
    end else begin
        op_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        res_ap_vld = 1'b1;
    end else begin
        res_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        vec0_address0 = zext_ln29_fu_618_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        vec0_address0 = grp_fft_top_fu_514_out_r_address0;
    end else begin
        vec0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        vec0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        vec0_ce0 = grp_fft_top_fu_514_out_r_ce0;
    end else begin
        vec0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        vec0_we0 = grp_fft_top_fu_514_out_r_we0;
    end else begin
        vec0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        vec1_address0 = zext_ln37_fu_688_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        vec1_address0 = vec1_addr_reg_880;
    end else begin
        vec1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | ((grp_act_fun_fu_522_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16)))) begin
        vec1_ce0 = 1'b1;
    end else begin
        vec1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((grp_act_fun_fu_522_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        vec1_we0 = 1'b1;
    end else begin
        vec1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        vec2_address0 = zext_ln44_fu_748_p1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        vec2_address0 = vec2_addr_reg_941;
    end else begin
        vec2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | ((grp_act_fun_fu_522_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state30)))) begin
        vec2_ce0 = 1'b1;
    end else begin
        vec2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((grp_act_fun_fu_522_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
        vec2_we0 = 1'b1;
    end else begin
        vec2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        vec3_address0 = zext_ln51_fu_804_p1;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        vec3_address0 = vec3_addr_reg_1002;
    end else begin
        vec3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) | ((grp_act_fun_fu_522_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state44)))) begin
        vec3_ce0 = 1'b1;
    end else begin
        vec3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((grp_act_fun_fu_522_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
        vec3_we0 = 1'b1;
    end else begin
        vec3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        vec4_address0 = zext_ln57_fu_821_p1;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        vec4_address0 = vec4_addr_reg_1063;
    end else begin
        vec4_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | ((grp_act_fun_fu_522_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state58)))) begin
        vec4_ce0 = 1'b1;
    end else begin
        vec4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((grp_act_fun_fu_522_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state58))) begin
        vec4_we0 = 1'b1;
    end else begin
        vec4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        w1_ce0 = 1'b1;
    end else begin
        w1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        w2_ce0 = 1'b1;
    end else begin
        w2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        w3_ce0 = 1'b1;
    end else begin
        w3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        w4_ce0 = 1'b1;
    end else begin
        w4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        w5_ce0 = 1'b1;
    end else begin
        w5_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln26_fu_573_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln28_fu_606_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state16 : begin
            if (((grp_act_fun_fu_522_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((icmp_ln34_fu_633_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((icmp_ln36_fu_666_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state30 : begin
            if (((grp_act_fun_fu_522_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((icmp_ln41_fu_693_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if (((icmp_ln43_fu_726_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state44 : begin
            if (((grp_act_fun_fu_522_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            if (((icmp_ln48_fu_753_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            if (((icmp_ln50_fu_782_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state58 : begin
            if (((grp_act_fun_fu_522_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state59 : begin
            if (((icmp_ln56_fu_809_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state70 : begin
            if (((grp_act_fun_fu_522_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state70))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln29_fu_623_p2 = (shl_ln_reg_895 + zext_ln28_fu_602_p1);

assign add_ln37_fu_678_p2 = (shl_ln1_reg_956 + zext_ln36_fu_662_p1);

assign add_ln44_fu_738_p2 = (shl_ln2_reg_1017 + zext_ln43_fu_722_p1);

assign add_ln51_fu_794_p2 = (shl_ln3_reg_1078 + j6_0_reg_479);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

always @ (*) begin
    ap_block_state2_on_subcall_done = ((ap_sync_grp_fft_top_fu_514_ap_ready & ap_sync_grp_fft_top_fu_514_ap_done) == 1'b0);
end

assign ap_sync_grp_fft_top_fu_514_ap_done = (grp_fft_top_fu_514_ap_done | ap_sync_reg_grp_fft_top_fu_514_ap_done);

assign ap_sync_grp_fft_top_fu_514_ap_ready = (grp_fft_top_fu_514_ap_ready | ap_sync_reg_grp_fft_top_fu_514_ap_ready);

assign b1_address0 = zext_ln27_fu_585_p1;

assign b2_address0 = zext_ln35_fu_645_p1;

assign b3_address0 = zext_ln42_fu_705_p1;

assign b4_address0 = zext_ln49_fu_765_p1;

assign bitcast_ln60_fu_827_p1 = tmp_s_reg_1149;

assign grp_act_fun_fu_522_ap_start = grp_act_fun_fu_522_ap_start_reg;

assign grp_fft_top_fu_514_ap_start = grp_fft_top_fu_514_ap_start_reg;

assign i_1_fu_639_p2 = (i1_0_reg_392 + 4'd1);

assign i_2_fu_699_p2 = (i3_0_reg_425 + 3'd1);

assign i_3_fu_759_p2 = (i5_0_reg_458 + 2'd1);

assign i_fu_579_p2 = (i_0_reg_360 + 5'd1);

assign icmp_ln26_fu_573_p2 = ((i_0_reg_360 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_606_p2 = ((j_0_reg_381 == 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_633_p2 = ((i1_0_reg_392 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_666_p2 = ((j2_0_reg_413 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_693_p2 = ((i3_0_reg_425 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_726_p2 = ((j4_0_reg_446 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_753_p2 = ((i5_0_reg_458 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_782_p2 = ((j6_0_reg_479 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_809_p2 = ((j7_0_reg_503 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln60_1_fu_850_p2 = ((trunc_ln60_fu_840_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_844_p2 = ((tmp_17_fu_830_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign j_1_fu_672_p2 = (j2_0_reg_413 + 5'd1);

assign j_2_fu_732_p2 = (j4_0_reg_446 + 4'd1);

assign j_3_fu_815_p2 = (j7_0_reg_503 + 2'd1);

assign j_4_fu_788_p2 = (j6_0_reg_479 + 3'd1);

assign j_fu_612_p2 = (j_0_reg_381 + 10'd1);

assign or_ln60_fu_856_p2 = (icmp_ln60_reg_1155 | icmp_ln60_1_reg_1160);

assign res = (or_ln60_fu_856_p2 & grp_fu_555_p2);

assign shl_ln1_fu_655_p3 = {{trunc_ln37_reg_946}, {4'd0}};

assign shl_ln2_fu_715_p3 = {{trunc_ln44_reg_1007}, {3'd0}};

assign shl_ln3_fu_775_p3 = {{trunc_ln51_reg_1068}, {2'd0}};

assign shl_ln_fu_595_p3 = {{trunc_ln29_reg_885}, {9'd0}};

assign tmp_17_fu_830_p4 = {{bitcast_ln60_fu_827_p1[62:52]}};

assign trunc_ln29_fu_591_p1 = i_0_reg_360[3:0];

assign trunc_ln37_fu_651_p1 = i1_0_reg_392[2:0];

assign trunc_ln44_fu_711_p1 = i3_0_reg_425[1:0];

assign trunc_ln51_fu_771_p1 = i5_0_reg_458[0:0];

assign trunc_ln60_fu_840_p1 = bitcast_ln60_fu_827_p1[51:0];

assign w1_address0 = zext_ln29_1_fu_628_p1;

assign w2_address0 = zext_ln37_1_fu_683_p1;

assign w3_address0 = zext_ln44_1_fu_743_p1;

assign w4_address0 = zext_ln51_1_fu_799_p1;

assign w5_address0 = zext_ln57_fu_821_p1;

assign zext_ln27_fu_585_p1 = i_0_reg_360;

assign zext_ln28_fu_602_p1 = j_0_reg_381;

assign zext_ln29_1_fu_628_p1 = add_ln29_fu_623_p2;

assign zext_ln29_fu_618_p1 = j_0_reg_381;

assign zext_ln35_fu_645_p1 = i1_0_reg_392;

assign zext_ln36_fu_662_p1 = j2_0_reg_413;

assign zext_ln37_1_fu_683_p1 = add_ln37_fu_678_p2;

assign zext_ln37_fu_688_p1 = j2_0_reg_413;

assign zext_ln42_fu_705_p1 = i3_0_reg_425;

assign zext_ln43_fu_722_p1 = j4_0_reg_446;

assign zext_ln44_1_fu_743_p1 = add_ln44_fu_738_p2;

assign zext_ln44_fu_748_p1 = j4_0_reg_446;

assign zext_ln49_fu_765_p1 = i5_0_reg_458;

assign zext_ln51_1_fu_799_p1 = add_ln51_fu_794_p2;

assign zext_ln51_fu_804_p1 = j6_0_reg_479;

assign zext_ln57_fu_821_p1 = j7_0_reg_503;

always @ (posedge ap_clk) begin
    shl_ln_reg_895[8:0] <= 9'b000000000;
    shl_ln1_reg_956[3:0] <= 4'b0000;
    shl_ln2_reg_1017[2:0] <= 3'b000;
    shl_ln3_reg_1078[1:0] <= 2'b00;
end

endmodule //kernel
