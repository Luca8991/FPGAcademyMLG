// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dummy_proc_fe (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        config_data_V_dout,
        config_data_V_empty_n,
        config_data_V_read,
        config_data_V_din,
        config_data_V_full_n,
        config_data_V_write,
        in_r_dout,
        in_r_empty_n,
        in_r_read,
        out_r_din,
        out_r_full_n,
        out_r_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state18 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] config_data_V_dout;
input   config_data_V_empty_n;
output   config_data_V_read;
output  [15:0] config_data_V_din;
input   config_data_V_full_n;
output   config_data_V_write;
input  [15:0] in_r_dout;
input   in_r_empty_n;
output   in_r_read;
output  [31:0] out_r_din;
input   out_r_full_n;
output   out_r_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg config_data_V_read;
reg config_data_V_write;
reg in_r_read;
reg out_r_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    config_data_V_i_blk_n;
reg    config_data_V_o_blk_n;
reg    in_r_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln13_reg_504;
reg    out_r_blk_n;
reg    ap_enable_reg_pp0_iter15;
reg   [0:0] icmp_ln13_reg_504_pp0_iter14_reg;
reg   [11:0] i_0_reg_154;
wire   [0:0] icmp_ln13_fu_189_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
reg    ap_block_state17_pp0_stage0_iter15;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln13_reg_504_pp0_iter1_reg;
reg   [0:0] icmp_ln13_reg_504_pp0_iter2_reg;
reg   [0:0] icmp_ln13_reg_504_pp0_iter3_reg;
reg   [0:0] icmp_ln13_reg_504_pp0_iter4_reg;
reg   [0:0] icmp_ln13_reg_504_pp0_iter5_reg;
reg   [0:0] icmp_ln13_reg_504_pp0_iter6_reg;
reg   [0:0] icmp_ln13_reg_504_pp0_iter7_reg;
reg   [0:0] icmp_ln13_reg_504_pp0_iter8_reg;
reg   [0:0] icmp_ln13_reg_504_pp0_iter9_reg;
reg   [0:0] icmp_ln13_reg_504_pp0_iter10_reg;
reg   [0:0] icmp_ln13_reg_504_pp0_iter11_reg;
reg   [0:0] icmp_ln13_reg_504_pp0_iter12_reg;
reg   [0:0] icmp_ln13_reg_504_pp0_iter13_reg;
wire   [11:0] i_fu_195_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [15:0] in_read_reg_513;
wire   [31:0] grp_fu_170_p1;
reg   [31:0] tmp_reg_523;
wire   [31:0] grp_fu_165_p2;
reg   [31:0] v_assign_reg_528;
reg   [31:0] v_assign_reg_528_pp0_iter12_reg;
reg   [31:0] v_assign_reg_528_pp0_iter13_reg;
reg   [0:0] p_Result_3_reg_534;
wire   [53:0] p_Result_4_fu_247_p1;
reg   [53:0] p_Result_4_reg_539;
wire   [53:0] man_V_1_fu_251_p2;
reg   [53:0] man_V_1_reg_544;
wire   [0:0] icmp_ln571_fu_257_p2;
reg   [0:0] icmp_ln571_reg_549;
wire   [0:0] icmp_ln581_fu_279_p2;
reg   [0:0] icmp_ln581_reg_555;
wire   [11:0] add_ln581_fu_285_p2;
reg   [11:0] add_ln581_reg_562;
wire   [11:0] sub_ln581_fu_291_p2;
reg   [11:0] sub_ln581_reg_567;
wire   [0:0] icmp_ln582_fu_297_p2;
reg   [0:0] icmp_ln582_reg_572;
wire   [15:0] select_ln603_3_fu_488_p3;
reg   [15:0] select_ln603_3_reg_578;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_block_pp0_stage0_01001;
wire  signed [31:0] grp_fu_170_p0;
wire   [63:0] grp_fu_173_p1;
wire   [63:0] ireg_V_fu_205_p1;
wire   [10:0] exp_tmp_V_fu_221_p4;
wire   [51:0] trunc_ln565_fu_235_p1;
wire   [52:0] tmp_18_fu_239_p3;
wire   [62:0] trunc_ln556_fu_209_p1;
wire   [11:0] zext_ln461_fu_231_p1;
wire   [11:0] F2_fu_263_p2;
wire   [7:0] tmp_2_fu_269_p4;
wire  signed [11:0] sh_amt_fu_308_p3;
wire   [53:0] man_V_2_fu_303_p3;
wire   [7:0] tmp_3_fu_331_p4;
wire  signed [31:0] sext_ln581_1_fu_317_p1;
wire   [53:0] zext_ln586_fu_347_p1;
wire   [53:0] ashr_ln586_fu_351_p2;
wire   [31:0] bitcast_ln696_fu_361_p1;
wire   [0:0] tmp_4_fu_364_p3;
wire   [15:0] trunc_ln583_fu_321_p1;
wire  signed [15:0] sext_ln581_fu_313_p1;
wire   [0:0] xor_ln571_fu_386_p2;
wire   [0:0] or_ln582_fu_396_p2;
wire   [0:0] xor_ln582_fu_400_p2;
wire   [0:0] icmp_ln585_fu_325_p2;
wire   [0:0] and_ln581_fu_406_p2;
wire   [0:0] xor_ln585_fu_411_p2;
wire   [0:0] or_ln581_fu_429_p2;
wire   [0:0] icmp_ln603_fu_341_p2;
wire   [0:0] xor_ln581_fu_434_p2;
wire   [0:0] and_ln603_fu_440_p2;
wire   [15:0] shl_ln604_fu_380_p2;
wire   [15:0] trunc_ln586_fu_357_p1;
wire   [0:0] and_ln585_1_fu_423_p2;
wire   [0:0] and_ln585_fu_417_p2;
wire   [15:0] select_ln588_fu_372_p3;
wire   [0:0] and_ln582_fu_391_p2;
wire   [0:0] or_ln603_fu_454_p2;
wire   [15:0] select_ln603_fu_446_p3;
wire   [15:0] select_ln603_1_fu_460_p3;
wire   [0:0] or_ln603_1_fu_468_p2;
wire   [0:0] or_ln603_2_fu_482_p2;
wire   [15:0] select_ln603_2_fu_474_p3;
reg    grp_fu_165_ce;
reg    grp_fu_170_ce;
reg    grp_fu_173_ce;
wire    ap_CS_fsm_state18;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
end

kernel_fmul_32ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_fmul_32ns_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_reg_523),
    .din1(32'd989855744),
    .ce(grp_fu_165_ce),
    .dout(grp_fu_165_p2)
);

kernel_sitofp_32scud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_sitofp_32scud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_170_p0),
    .ce(grp_fu_170_ce),
    .dout(grp_fu_170_p1)
);

kernel_fpext_32nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
kernel_fpext_32nsdEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(v_assign_reg_528),
    .ce(grp_fu_173_ce),
    .dout(grp_fu_173_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state18)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (config_data_V_full_n == 1'b0) | (config_data_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end else if ((~((real_start == 1'b0) | (config_data_V_full_n == 1'b0) | (config_data_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter15 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_189_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_reg_154 <= i_fu_195_p2;
    end else if ((~((real_start == 1'b0) | (config_data_V_full_n == 1'b0) | (config_data_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_154 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_reg_504_pp0_iter12_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln581_reg_562 <= add_ln581_fu_285_p2;
        icmp_ln571_reg_549 <= icmp_ln571_fu_257_p2;
        icmp_ln581_reg_555 <= icmp_ln581_fu_279_p2;
        icmp_ln582_reg_572 <= icmp_ln582_fu_297_p2;
        man_V_1_reg_544 <= man_V_1_fu_251_p2;
        p_Result_3_reg_534 <= ireg_V_fu_205_p1[32'd63];
        p_Result_4_reg_539[51 : 0] <= p_Result_4_fu_247_p1[51 : 0];
        sub_ln581_reg_567 <= sub_ln581_fu_291_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln13_reg_504 <= icmp_ln13_fu_189_p2;
        icmp_ln13_reg_504_pp0_iter1_reg <= icmp_ln13_reg_504;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln13_reg_504_pp0_iter10_reg <= icmp_ln13_reg_504_pp0_iter9_reg;
        icmp_ln13_reg_504_pp0_iter11_reg <= icmp_ln13_reg_504_pp0_iter10_reg;
        icmp_ln13_reg_504_pp0_iter12_reg <= icmp_ln13_reg_504_pp0_iter11_reg;
        icmp_ln13_reg_504_pp0_iter13_reg <= icmp_ln13_reg_504_pp0_iter12_reg;
        icmp_ln13_reg_504_pp0_iter14_reg <= icmp_ln13_reg_504_pp0_iter13_reg;
        icmp_ln13_reg_504_pp0_iter2_reg <= icmp_ln13_reg_504_pp0_iter1_reg;
        icmp_ln13_reg_504_pp0_iter3_reg <= icmp_ln13_reg_504_pp0_iter2_reg;
        icmp_ln13_reg_504_pp0_iter4_reg <= icmp_ln13_reg_504_pp0_iter3_reg;
        icmp_ln13_reg_504_pp0_iter5_reg <= icmp_ln13_reg_504_pp0_iter4_reg;
        icmp_ln13_reg_504_pp0_iter6_reg <= icmp_ln13_reg_504_pp0_iter5_reg;
        icmp_ln13_reg_504_pp0_iter7_reg <= icmp_ln13_reg_504_pp0_iter6_reg;
        icmp_ln13_reg_504_pp0_iter8_reg <= icmp_ln13_reg_504_pp0_iter7_reg;
        icmp_ln13_reg_504_pp0_iter9_reg <= icmp_ln13_reg_504_pp0_iter8_reg;
        v_assign_reg_528_pp0_iter12_reg <= v_assign_reg_528;
        v_assign_reg_528_pp0_iter13_reg <= v_assign_reg_528_pp0_iter12_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_reg_504 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_read_reg_513 <= in_r_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_reg_504_pp0_iter13_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln603_3_reg_578 <= select_ln603_3_fu_488_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_reg_504_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_reg_523 <= grp_fu_170_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_reg_504_pp0_iter10_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v_assign_reg_528 <= grp_fu_165_p2;
    end
end

always @ (*) begin
    if ((icmp_ln13_fu_189_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        config_data_V_i_blk_n = config_data_V_empty_n;
    end else begin
        config_data_V_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        config_data_V_o_blk_n = config_data_V_full_n;
    end else begin
        config_data_V_o_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (config_data_V_full_n == 1'b0) | (config_data_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        config_data_V_read = 1'b1;
    end else begin
        config_data_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (config_data_V_full_n == 1'b0) | (config_data_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        config_data_V_write = 1'b1;
    end else begin
        config_data_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_165_ce = 1'b1;
    end else begin
        grp_fu_165_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_170_ce = 1'b1;
    end else begin
        grp_fu_170_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_173_ce = 1'b1;
    end else begin
        grp_fu_173_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_504 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_r_blk_n = in_r_empty_n;
    end else begin
        in_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_504 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_r_read = 1'b1;
    end else begin
        in_r_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_504_pp0_iter14_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter15 == 1'b1))) begin
        out_r_blk_n = out_r_full_n;
    end else begin
        out_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_504_pp0_iter14_reg == 1'd0) & (ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_r_write = 1'b1;
    end else begin
        out_r_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (config_data_V_full_n == 1'b0) | (config_data_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln13_fu_189_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((icmp_ln13_fu_189_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_fu_263_p2 = (12'd1075 - zext_ln461_fu_231_p1);

assign add_ln581_fu_285_p2 = ($signed(12'd4081) + $signed(F2_fu_263_p2));

assign and_ln581_fu_406_p2 = (xor_ln582_fu_400_p2 & icmp_ln581_reg_555);

assign and_ln582_fu_391_p2 = (xor_ln571_fu_386_p2 & icmp_ln582_reg_572);

assign and_ln585_1_fu_423_p2 = (icmp_ln585_fu_325_p2 & and_ln581_fu_406_p2);

assign and_ln585_fu_417_p2 = (xor_ln585_fu_411_p2 & and_ln581_fu_406_p2);

assign and_ln603_fu_440_p2 = (xor_ln581_fu_434_p2 & icmp_ln603_fu_341_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln13_reg_504_pp0_iter14_reg == 1'd0) & (out_r_full_n == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b1)) | ((icmp_ln13_reg_504 == 1'd0) & (in_r_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln13_reg_504_pp0_iter14_reg == 1'd0) & (out_r_full_n == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b1)) | ((icmp_ln13_reg_504 == 1'd0) & (in_r_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln13_reg_504_pp0_iter14_reg == 1'd0) & (out_r_full_n == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b1)) | ((icmp_ln13_reg_504 == 1'd0) & (in_r_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (config_data_V_full_n == 1'b0) | (config_data_V_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17_pp0_stage0_iter15 = ((icmp_ln13_reg_504_pp0_iter14_reg == 1'd0) & (out_r_full_n == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln13_reg_504 == 1'd0) & (in_r_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign ashr_ln586_fu_351_p2 = $signed(man_V_2_fu_303_p3) >>> zext_ln586_fu_347_p1;

assign bitcast_ln696_fu_361_p1 = v_assign_reg_528_pp0_iter13_reg;

assign config_data_V_din = {{config_data_V_dout[15:13]}, {13'd1367}};

assign exp_tmp_V_fu_221_p4 = {{ireg_V_fu_205_p1[62:52]}};

assign grp_fu_170_p0 = $signed(in_read_reg_513);

assign i_fu_195_p2 = (i_0_reg_154 + 12'd1);

assign icmp_ln13_fu_189_p2 = ((i_0_reg_154 == 12'd2048) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_257_p2 = ((trunc_ln556_fu_209_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_279_p2 = (($signed(tmp_2_fu_269_p4) > $signed(8'd0)) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_297_p2 = ((F2_fu_263_p2 == 12'd15) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_325_p2 = ((sh_amt_fu_308_p3 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_341_p2 = ((tmp_3_fu_331_p4 == 8'd0) ? 1'b1 : 1'b0);

assign ireg_V_fu_205_p1 = grp_fu_173_p1;

assign man_V_1_fu_251_p2 = (54'd0 - p_Result_4_fu_247_p1);

assign man_V_2_fu_303_p3 = ((p_Result_3_reg_534[0:0] === 1'b1) ? man_V_1_reg_544 : p_Result_4_reg_539);

assign or_ln581_fu_429_p2 = (or_ln582_fu_396_p2 | icmp_ln581_reg_555);

assign or_ln582_fu_396_p2 = (icmp_ln582_reg_572 | icmp_ln571_reg_549);

assign or_ln603_1_fu_468_p2 = (and_ln585_fu_417_p2 | and_ln582_fu_391_p2);

assign or_ln603_2_fu_482_p2 = (or_ln603_fu_454_p2 | or_ln603_1_fu_468_p2);

assign or_ln603_fu_454_p2 = (and_ln603_fu_440_p2 | and_ln585_1_fu_423_p2);

assign out_r_din = {{16'd0}, {select_ln603_3_reg_578}};

assign p_Result_4_fu_247_p1 = tmp_18_fu_239_p3;

assign select_ln588_fu_372_p3 = ((tmp_4_fu_364_p3[0:0] === 1'b1) ? 16'd65535 : 16'd0);

assign select_ln603_1_fu_460_p3 = ((and_ln585_fu_417_p2[0:0] === 1'b1) ? select_ln588_fu_372_p3 : trunc_ln583_fu_321_p1);

assign select_ln603_2_fu_474_p3 = ((or_ln603_fu_454_p2[0:0] === 1'b1) ? select_ln603_fu_446_p3 : select_ln603_1_fu_460_p3);

assign select_ln603_3_fu_488_p3 = ((or_ln603_2_fu_482_p2[0:0] === 1'b1) ? select_ln603_2_fu_474_p3 : 16'd0);

assign select_ln603_fu_446_p3 = ((and_ln603_fu_440_p2[0:0] === 1'b1) ? shl_ln604_fu_380_p2 : trunc_ln586_fu_357_p1);

assign sext_ln581_1_fu_317_p1 = sh_amt_fu_308_p3;

assign sext_ln581_fu_313_p1 = sh_amt_fu_308_p3;

assign sh_amt_fu_308_p3 = ((icmp_ln581_reg_555[0:0] === 1'b1) ? add_ln581_reg_562 : sub_ln581_reg_567);

assign shl_ln604_fu_380_p2 = trunc_ln583_fu_321_p1 << sext_ln581_fu_313_p1;

assign start_out = real_start;

assign sub_ln581_fu_291_p2 = (12'd15 - F2_fu_263_p2);

assign tmp_18_fu_239_p3 = {{1'd1}, {trunc_ln565_fu_235_p1}};

assign tmp_2_fu_269_p4 = {{F2_fu_263_p2[11:4]}};

assign tmp_3_fu_331_p4 = {{sh_amt_fu_308_p3[11:4]}};

assign tmp_4_fu_364_p3 = bitcast_ln696_fu_361_p1[32'd31];

assign trunc_ln556_fu_209_p1 = ireg_V_fu_205_p1[62:0];

assign trunc_ln565_fu_235_p1 = ireg_V_fu_205_p1[51:0];

assign trunc_ln583_fu_321_p1 = man_V_2_fu_303_p3[15:0];

assign trunc_ln586_fu_357_p1 = ashr_ln586_fu_351_p2[15:0];

assign xor_ln571_fu_386_p2 = (icmp_ln571_reg_549 ^ 1'd1);

assign xor_ln581_fu_434_p2 = (or_ln581_fu_429_p2 ^ 1'd1);

assign xor_ln582_fu_400_p2 = (or_ln582_fu_396_p2 ^ 1'd1);

assign xor_ln585_fu_411_p2 = (icmp_ln585_fu_325_p2 ^ 1'd1);

assign zext_ln461_fu_231_p1 = exp_tmp_V_fu_221_p4;

assign zext_ln586_fu_347_p1 = $unsigned(sext_ln581_1_fu_317_p1);

always @ (posedge ap_clk) begin
    p_Result_4_reg_539[53:52] <= 2'b01;
end

endmodule //dummy_proc_fe
