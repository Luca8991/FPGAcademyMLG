// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module act_fun (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vec,
        ap_return
);

parameter    ap_ST_fsm_state1 = 36'd1;
parameter    ap_ST_fsm_state2 = 36'd2;
parameter    ap_ST_fsm_state3 = 36'd4;
parameter    ap_ST_fsm_state4 = 36'd8;
parameter    ap_ST_fsm_state5 = 36'd16;
parameter    ap_ST_fsm_state6 = 36'd32;
parameter    ap_ST_fsm_state7 = 36'd64;
parameter    ap_ST_fsm_state8 = 36'd128;
parameter    ap_ST_fsm_state9 = 36'd256;
parameter    ap_ST_fsm_state10 = 36'd512;
parameter    ap_ST_fsm_state11 = 36'd1024;
parameter    ap_ST_fsm_state12 = 36'd2048;
parameter    ap_ST_fsm_state13 = 36'd4096;
parameter    ap_ST_fsm_state14 = 36'd8192;
parameter    ap_ST_fsm_state15 = 36'd16384;
parameter    ap_ST_fsm_state16 = 36'd32768;
parameter    ap_ST_fsm_state17 = 36'd65536;
parameter    ap_ST_fsm_state18 = 36'd131072;
parameter    ap_ST_fsm_state19 = 36'd262144;
parameter    ap_ST_fsm_state20 = 36'd524288;
parameter    ap_ST_fsm_state21 = 36'd1048576;
parameter    ap_ST_fsm_state22 = 36'd2097152;
parameter    ap_ST_fsm_state23 = 36'd4194304;
parameter    ap_ST_fsm_state24 = 36'd8388608;
parameter    ap_ST_fsm_state25 = 36'd16777216;
parameter    ap_ST_fsm_state26 = 36'd33554432;
parameter    ap_ST_fsm_state27 = 36'd67108864;
parameter    ap_ST_fsm_state28 = 36'd134217728;
parameter    ap_ST_fsm_state29 = 36'd268435456;
parameter    ap_ST_fsm_state30 = 36'd536870912;
parameter    ap_ST_fsm_state31 = 36'd1073741824;
parameter    ap_ST_fsm_state32 = 36'd2147483648;
parameter    ap_ST_fsm_state33 = 36'd4294967296;
parameter    ap_ST_fsm_state34 = 36'd8589934592;
parameter    ap_ST_fsm_state35 = 36'd17179869184;
parameter    ap_ST_fsm_state36 = 36'd34359738368;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] vec;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [35:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] grp_fu_72_p2;
reg   [63:0] reg_78;
wire    ap_CS_fsm_state10;
reg   [0:0] and_ln6_reg_217;
wire    ap_CS_fsm_state22;
reg   [0:0] and_ln10_3_reg_249;
wire    ap_CS_fsm_state28;
wire   [63:0] grp_fu_65_p2;
reg   [63:0] reg_86;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state34;
wire   [0:0] or_ln6_fu_122_p2;
reg   [0:0] or_ln6_reg_211;
wire    ap_CS_fsm_state2;
wire   [0:0] and_ln6_fu_128_p2;
wire   [0:0] and_ln8_1_fu_139_p2;
reg   [0:0] and_ln8_1_reg_223;
wire    ap_CS_fsm_state4;
wire   [0:0] grp_fu_55_p2;
reg   [0:0] tmp_30_reg_229;
wire   [0:0] grp_fu_60_p2;
reg   [0:0] tmp_31_reg_234;
wire   [63:0] grp_fu_41_p1;
reg   [63:0] tmp_19_reg_239;
wire   [0:0] xor_ln6_fu_145_p2;
reg   [0:0] xor_ln6_reg_244;
wire   [0:0] and_ln10_3_fu_170_p2;
wire   [31:0] grp_fu_38_p1;
reg   [31:0] vec_assign_reg_254;
wire    ap_CS_fsm_state30;
reg   [63:0] grp_fu_38_p0;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state3;
reg   [63:0] grp_fu_65_p0;
reg   [63:0] grp_fu_65_p1;
wire    ap_CS_fsm_state11;
reg   [63:0] grp_fu_72_p0;
reg   [63:0] grp_fu_72_p1;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state23;
wire   [31:0] bitcast_ln6_fu_93_p1;
wire   [7:0] tmp_fu_96_p4;
wire   [22:0] trunc_ln6_fu_106_p1;
wire   [0:0] icmp_ln6_1_fu_116_p2;
wire   [0:0] icmp_ln6_fu_110_p2;
wire   [0:0] grp_fu_44_p2;
wire   [0:0] and_ln8_fu_134_p2;
wire   [0:0] grp_fu_50_p2;
wire   [0:0] xor_ln8_fu_150_p2;
wire   [0:0] and_ln10_fu_155_p2;
wire   [0:0] and_ln10_2_fu_165_p2;
wire   [0:0] and_ln10_1_fu_159_p2;
wire    ap_CS_fsm_state36;
wire   [0:0] and_ln8_2_fu_176_p2;
wire   [31:0] select_ln8_fu_180_p3;
wire   [31:0] select_ln10_fu_187_p3;
reg   [4:0] grp_fu_44_opcode;
reg   [1:0] grp_fu_65_opcode;
wire   [31:0] select_ln6_fu_194_p3;
reg   [31:0] ap_return_preg;
reg   [35:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 36'd1;
#0 ap_return_preg = 32'd0;
end

kernel_fptrunc_64hbi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
kernel_fptrunc_64hbi_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_38_p0),
    .ce(1'b1),
    .dout(grp_fu_38_p1)
);

kernel_fpext_32nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
kernel_fpext_32nsdEe_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(vec),
    .ce(1'b1),
    .dout(grp_fu_41_p1)
);

kernel_fcmp_32ns_ibs #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
kernel_fcmp_32ns_ibs_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(vec),
    .din1(32'd3229614080),
    .ce(1'b1),
    .opcode(grp_fu_44_opcode),
    .dout(grp_fu_44_p2)
);

kernel_fcmp_32ns_ibs #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
kernel_fcmp_32ns_ibs_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(vec),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd5),
    .dout(grp_fu_50_p2)
);

kernel_fcmp_32ns_ibs #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
kernel_fcmp_32ns_ibs_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(vec),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_55_p2)
);

kernel_fcmp_32ns_ibs #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
kernel_fcmp_32ns_ibs_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(vec),
    .din1(32'd1082130432),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_60_p2)
);

kernel_dadddsub_6jbC #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
kernel_dadddsub_6jbC_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_65_p0),
    .din1(grp_fu_65_p1),
    .opcode(grp_fu_65_opcode),
    .ce(1'b1),
    .dout(grp_fu_65_p2)
);

kernel_dmul_64ns_kbM #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
kernel_dmul_64ns_kbM_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_72_p0),
    .din1(grp_fu_72_p1),
    .ce(1'b1),
    .dout(grp_fu_72_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state36)) begin
            ap_return_preg <= select_ln6_fu_194_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln6_reg_217) & (1'b1 == ap_CS_fsm_state10))) begin
        and_ln10_3_reg_249 <= and_ln10_3_fu_170_p2;
        xor_ln6_reg_244 <= xor_ln6_fu_145_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        and_ln6_reg_217 <= and_ln6_fu_128_p2;
        or_ln6_reg_211 <= or_ln6_fu_122_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln6_reg_217) & (1'b1 == ap_CS_fsm_state4))) begin
        and_ln8_1_reg_223 <= and_ln8_1_fu_139_p2;
        tmp_19_reg_239 <= grp_fu_41_p1;
        tmp_30_reg_229 <= grp_fu_55_p2;
        tmp_31_reg_234 <= grp_fu_60_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'd1 == and_ln10_3_reg_249) & (1'd0 == and_ln6_reg_217) & (1'b1 == ap_CS_fsm_state28)) | ((1'd0 == and_ln10_3_reg_249) & (1'd0 == and_ln6_reg_217) & (1'b1 == ap_CS_fsm_state28)) | ((1'd1 == and_ln10_3_reg_249) & (1'd0 == and_ln6_reg_217) & (1'b1 == ap_CS_fsm_state22)) | ((1'd0 == and_ln10_3_reg_249) & (1'd0 == and_ln6_reg_217) & (1'b1 == ap_CS_fsm_state22)) | ((1'd0 == and_ln6_reg_217) & (1'b1 == ap_CS_fsm_state10)))) begin
        reg_78 <= grp_fu_72_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'd1 == and_ln10_3_reg_249) & (1'd0 == and_ln6_reg_217) & (1'b1 == ap_CS_fsm_state16)) | ((1'd1 == and_ln10_3_reg_249) & (1'd0 == and_ln6_reg_217) & (1'b1 == ap_CS_fsm_state34)) | ((1'd0 == and_ln10_3_reg_249) & (1'd0 == and_ln6_reg_217) & (1'b1 == ap_CS_fsm_state16)))) begin
        reg_86 <= grp_fu_65_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln10_3_reg_249) & (1'd0 == and_ln6_reg_217) & (1'b1 == ap_CS_fsm_state30))) begin
        vec_assign_reg_254 <= grp_fu_38_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        ap_return = select_ln6_fu_194_p3;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_38_p0 = reg_86;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_38_p0 = reg_78;
    end else begin
        grp_fu_38_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln6_reg_217) & (1'b1 == ap_CS_fsm_state3))) begin
        grp_fu_44_opcode = 5'd2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_44_opcode = 5'd5;
    end else begin
        grp_fu_44_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln10_3_reg_249) & (1'd0 == and_ln6_reg_217) & (1'b1 == ap_CS_fsm_state29))) begin
        grp_fu_65_opcode = 2'd1;
    end else if ((((1'd1 == and_ln10_3_reg_249) & (1'd0 == and_ln6_reg_217) & (1'b1 == ap_CS_fsm_state11)) | ((1'd0 == and_ln10_3_reg_249) & (1'd0 == and_ln6_reg_217) & (1'b1 == ap_CS_fsm_state11)))) begin
        grp_fu_65_opcode = 2'd0;
    end else begin
        grp_fu_65_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_65_p0 = 64'd4607182418800017408;
    end else if ((((1'd1 == and_ln10_3_reg_249) & (1'd0 == and_ln6_reg_217) & (1'b1 == ap_CS_fsm_state11)) | ((1'd0 == and_ln10_3_reg_249) & (1'd0 == and_ln6_reg_217) & (1'b1 == ap_CS_fsm_state11)))) begin
        grp_fu_65_p0 = reg_78;
    end else begin
        grp_fu_65_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_65_p1 = reg_78;
    end else if (((1'd1 == and_ln10_3_reg_249) & (1'd0 == and_ln6_reg_217) & (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_65_p1 = 64'd13830554455654793216;
    end else if (((1'd0 == and_ln10_3_reg_249) & (1'd0 == and_ln6_reg_217) & (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_65_p1 = 64'd4607182418800017408;
    end else begin
        grp_fu_65_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'd1 == and_ln10_3_reg_249) & (1'd0 == and_ln6_reg_217) & (1'b1 == ap_CS_fsm_state23)) | ((1'd0 == and_ln10_3_reg_249) & (1'd0 == and_ln6_reg_217) & (1'b1 == ap_CS_fsm_state23)))) begin
        grp_fu_72_p0 = reg_78;
    end else if ((((1'd1 == and_ln10_3_reg_249) & (1'd0 == and_ln6_reg_217) & (1'b1 == ap_CS_fsm_state17)) | ((1'd0 == and_ln10_3_reg_249) & (1'd0 == and_ln6_reg_217) & (1'b1 == ap_CS_fsm_state17)))) begin
        grp_fu_72_p0 = reg_86;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_72_p0 = tmp_19_reg_239;
    end else begin
        grp_fu_72_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'd1 == and_ln10_3_reg_249) & (1'd0 == and_ln6_reg_217) & (1'b1 == ap_CS_fsm_state23)) | ((1'd0 == and_ln10_3_reg_249) & (1'd0 == and_ln6_reg_217) & (1'b1 == ap_CS_fsm_state23)))) begin
        grp_fu_72_p1 = reg_86;
    end else if ((((1'd1 == and_ln10_3_reg_249) & (1'd0 == and_ln6_reg_217) & (1'b1 == ap_CS_fsm_state17)) | ((1'd0 == and_ln10_3_reg_249) & (1'd0 == and_ln6_reg_217) & (1'b1 == ap_CS_fsm_state17)))) begin
        grp_fu_72_p1 = 64'd4602678819172646912;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_72_p1 = 64'd4598175219545276416;
    end else begin
        grp_fu_72_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln10_1_fu_159_p2 = (xor_ln8_fu_150_p2 & xor_ln6_fu_145_p2);

assign and_ln10_2_fu_165_p2 = (tmp_30_reg_229 & and_ln10_fu_155_p2);

assign and_ln10_3_fu_170_p2 = (and_ln10_2_fu_165_p2 & and_ln10_1_fu_159_p2);

assign and_ln10_fu_155_p2 = (tmp_31_reg_234 & or_ln6_reg_211);

assign and_ln6_fu_128_p2 = (or_ln6_fu_122_p2 & grp_fu_44_p2);

assign and_ln8_1_fu_139_p2 = (grp_fu_50_p2 & and_ln8_fu_134_p2);

assign and_ln8_2_fu_176_p2 = (xor_ln6_reg_244 & and_ln8_1_reg_223);

assign and_ln8_fu_134_p2 = (or_ln6_reg_211 & grp_fu_44_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign bitcast_ln6_fu_93_p1 = vec;

assign icmp_ln6_1_fu_116_p2 = ((trunc_ln6_fu_106_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln6_fu_110_p2 = ((tmp_fu_96_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln6_fu_122_p2 = (icmp_ln6_fu_110_p2 | icmp_ln6_1_fu_116_p2);

assign select_ln10_fu_187_p3 = ((and_ln10_3_reg_249[0:0] === 1'b1) ? grp_fu_38_p1 : select_ln8_fu_180_p3);

assign select_ln6_fu_194_p3 = ((and_ln6_reg_217[0:0] === 1'b1) ? 32'd0 : select_ln10_fu_187_p3);

assign select_ln8_fu_180_p3 = ((and_ln8_2_fu_176_p2[0:0] === 1'b1) ? vec_assign_reg_254 : 32'd1065353216);

assign tmp_fu_96_p4 = {{bitcast_ln6_fu_93_p1[30:23]}};

assign trunc_ln6_fu_106_p1 = bitcast_ln6_fu_93_p1[22:0];

assign xor_ln6_fu_145_p2 = (1'd1 ^ and_ln6_reg_217);

assign xor_ln8_fu_150_p2 = (1'd1 ^ and_ln8_1_reg_223);

endmodule //act_fun
