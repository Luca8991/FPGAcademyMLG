-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity act_fun is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    vec : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of act_fun is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (35 downto 0) := "000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (35 downto 0) := "000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (35 downto 0) := "000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (35 downto 0) := "000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (35 downto 0) := "000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (35 downto 0) := "000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (35 downto 0) := "000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (35 downto 0) := "000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (35 downto 0) := "000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (35 downto 0) := "001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (35 downto 0) := "010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (35 downto 0) := "100000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_C0800000 : STD_LOGIC_VECTOR (31 downto 0) := "11000000100000000000000000000000";
    constant ap_const_lv32_40800000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000100000000000000000000000";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_BFF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_3FD0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111010000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3FE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_72_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_78 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal and_ln6_reg_217 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal and_ln10_3_reg_249 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_fu_65_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_86 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal or_ln6_fu_122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln6_reg_211 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal and_ln6_fu_128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_1_fu_139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_1_reg_223 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_55_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_reg_229 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_60_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_reg_234 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_41_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_reg_239 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln6_fu_145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln6_reg_244 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_3_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_38_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal vec_assign_reg_254 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_fu_38_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_65_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_65_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_72_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_72_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal bitcast_ln6_fu_93_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_96_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln6_fu_106_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln6_1_fu_116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln6_fu_110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_44_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_50_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln8_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_2_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_1_fu_159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal and_ln8_2_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln8_fu_180_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln10_fu_187_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_44_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_65_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln6_fu_194_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (35 downto 0);

    component kernel_fptrunc_64hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_fpext_32nsdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kernel_fcmp_32ns_ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component kernel_dadddsub_6jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kernel_dmul_64ns_kbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    kernel_fptrunc_64hbi_U25 : component kernel_fptrunc_64hbi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_38_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_38_p1);

    kernel_fpext_32nsdEe_U26 : component kernel_fpext_32nsdEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => vec,
        ce => ap_const_logic_1,
        dout => grp_fu_41_p1);

    kernel_fcmp_32ns_ibs_U27 : component kernel_fcmp_32ns_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => vec,
        din1 => ap_const_lv32_C0800000,
        ce => ap_const_logic_1,
        opcode => grp_fu_44_opcode,
        dout => grp_fu_44_p2);

    kernel_fcmp_32ns_ibs_U28 : component kernel_fcmp_32ns_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => vec,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_5,
        dout => grp_fu_50_p2);

    kernel_fcmp_32ns_ibs_U29 : component kernel_fcmp_32ns_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => vec,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_55_p2);

    kernel_fcmp_32ns_ibs_U30 : component kernel_fcmp_32ns_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => vec,
        din1 => ap_const_lv32_40800000,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_60_p2);

    kernel_dadddsub_6jbC_U31 : component kernel_dadddsub_6jbC
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_65_p0,
        din1 => grp_fu_65_p1,
        opcode => grp_fu_65_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_65_p2);

    kernel_dmul_64ns_kbM_U32 : component kernel_dmul_64ns_kbM
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_72_p0,
        din1 => grp_fu_72_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_72_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                    ap_return_preg <= select_ln6_fu_194_p3;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln6_reg_217) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                and_ln10_3_reg_249 <= and_ln10_3_fu_170_p2;
                xor_ln6_reg_244 <= xor_ln6_fu_145_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                and_ln6_reg_217 <= and_ln6_fu_128_p2;
                or_ln6_reg_211 <= or_ln6_fu_122_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln6_reg_217) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                and_ln8_1_reg_223 <= and_ln8_1_fu_139_p2;
                tmp_19_reg_239 <= grp_fu_41_p1;
                tmp_30_reg_229 <= grp_fu_55_p2;
                tmp_31_reg_234 <= grp_fu_60_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = and_ln10_3_reg_249) and (ap_const_lv1_0 = and_ln6_reg_217) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((ap_const_lv1_0 = and_ln10_3_reg_249) and (ap_const_lv1_0 = and_ln6_reg_217) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((ap_const_lv1_1 = and_ln10_3_reg_249) and (ap_const_lv1_0 = and_ln6_reg_217) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((ap_const_lv1_0 = and_ln10_3_reg_249) and (ap_const_lv1_0 = and_ln6_reg_217) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((ap_const_lv1_0 = and_ln6_reg_217) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then
                reg_78 <= grp_fu_72_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = and_ln10_3_reg_249) and (ap_const_lv1_0 = and_ln6_reg_217) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_lv1_1 = and_ln10_3_reg_249) and (ap_const_lv1_0 = and_ln6_reg_217) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((ap_const_lv1_0 = and_ln10_3_reg_249) and (ap_const_lv1_0 = and_ln6_reg_217) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then
                reg_86 <= grp_fu_65_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln10_3_reg_249) and (ap_const_lv1_0 = and_ln6_reg_217) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                vec_assign_reg_254 <= grp_fu_38_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    and_ln10_1_fu_159_p2 <= (xor_ln8_fu_150_p2 and xor_ln6_fu_145_p2);
    and_ln10_2_fu_165_p2 <= (tmp_30_reg_229 and and_ln10_fu_155_p2);
    and_ln10_3_fu_170_p2 <= (and_ln10_2_fu_165_p2 and and_ln10_1_fu_159_p2);
    and_ln10_fu_155_p2 <= (tmp_31_reg_234 and or_ln6_reg_211);
    and_ln6_fu_128_p2 <= (or_ln6_fu_122_p2 and grp_fu_44_p2);
    and_ln8_1_fu_139_p2 <= (grp_fu_50_p2 and and_ln8_fu_134_p2);
    and_ln8_2_fu_176_p2 <= (xor_ln6_reg_244 and and_ln8_1_reg_223);
    and_ln8_fu_134_p2 <= (or_ln6_reg_211 and grp_fu_44_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state36, select_ln6_fu_194_p3, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            ap_return <= select_ln6_fu_194_p3;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    bitcast_ln6_fu_93_p1 <= vec;

    grp_fu_38_p0_assign_proc : process(reg_78, reg_86, ap_CS_fsm_state29, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_38_p0 <= reg_86;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_38_p0 <= reg_78;
        else 
            grp_fu_38_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_44_opcode_assign_proc : process(ap_start, ap_CS_fsm_state1, and_ln6_reg_217, ap_CS_fsm_state3)
    begin
        if (((ap_const_lv1_0 = and_ln6_reg_217) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_fu_44_opcode <= ap_const_lv5_2;
        elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_fu_44_opcode <= ap_const_lv5_5;
        else 
            grp_fu_44_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_65_opcode_assign_proc : process(and_ln6_reg_217, and_ln10_3_reg_249, ap_CS_fsm_state29, ap_CS_fsm_state11)
    begin
        if (((ap_const_lv1_1 = and_ln10_3_reg_249) and (ap_const_lv1_0 = and_ln6_reg_217) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_fu_65_opcode <= ap_const_lv2_1;
        elsif ((((ap_const_lv1_1 = and_ln10_3_reg_249) and (ap_const_lv1_0 = and_ln6_reg_217) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_lv1_0 = and_ln10_3_reg_249) and (ap_const_lv1_0 = and_ln6_reg_217) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            grp_fu_65_opcode <= ap_const_lv2_0;
        else 
            grp_fu_65_opcode <= "XX";
        end if; 
    end process;


    grp_fu_65_p0_assign_proc : process(reg_78, and_ln6_reg_217, and_ln10_3_reg_249, ap_CS_fsm_state29, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_65_p0 <= ap_const_lv64_3FF0000000000000;
        elsif ((((ap_const_lv1_1 = and_ln10_3_reg_249) and (ap_const_lv1_0 = and_ln6_reg_217) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_lv1_0 = and_ln10_3_reg_249) and (ap_const_lv1_0 = and_ln6_reg_217) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            grp_fu_65_p0 <= reg_78;
        else 
            grp_fu_65_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_65_p1_assign_proc : process(reg_78, and_ln6_reg_217, and_ln10_3_reg_249, ap_CS_fsm_state29, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_65_p1 <= reg_78;
        elsif (((ap_const_lv1_1 = and_ln10_3_reg_249) and (ap_const_lv1_0 = and_ln6_reg_217) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_65_p1 <= ap_const_lv64_BFF0000000000000;
        elsif (((ap_const_lv1_0 = and_ln10_3_reg_249) and (ap_const_lv1_0 = and_ln6_reg_217) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_65_p1 <= ap_const_lv64_3FF0000000000000;
        else 
            grp_fu_65_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_72_p0_assign_proc : process(reg_78, and_ln6_reg_217, and_ln10_3_reg_249, reg_86, tmp_19_reg_239, ap_CS_fsm_state5, ap_CS_fsm_state17, ap_CS_fsm_state23)
    begin
        if ((((ap_const_lv1_1 = and_ln10_3_reg_249) and (ap_const_lv1_0 = and_ln6_reg_217) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((ap_const_lv1_0 = and_ln10_3_reg_249) and (ap_const_lv1_0 = and_ln6_reg_217) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            grp_fu_72_p0 <= reg_78;
        elsif ((((ap_const_lv1_1 = and_ln10_3_reg_249) and (ap_const_lv1_0 = and_ln6_reg_217) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_const_lv1_0 = and_ln10_3_reg_249) and (ap_const_lv1_0 = and_ln6_reg_217) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            grp_fu_72_p0 <= reg_86;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_72_p0 <= tmp_19_reg_239;
        else 
            grp_fu_72_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_72_p1_assign_proc : process(and_ln6_reg_217, and_ln10_3_reg_249, reg_86, ap_CS_fsm_state5, ap_CS_fsm_state17, ap_CS_fsm_state23)
    begin
        if ((((ap_const_lv1_1 = and_ln10_3_reg_249) and (ap_const_lv1_0 = and_ln6_reg_217) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((ap_const_lv1_0 = and_ln10_3_reg_249) and (ap_const_lv1_0 = and_ln6_reg_217) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            grp_fu_72_p1 <= reg_86;
        elsif ((((ap_const_lv1_1 = and_ln10_3_reg_249) and (ap_const_lv1_0 = and_ln6_reg_217) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_const_lv1_0 = and_ln10_3_reg_249) and (ap_const_lv1_0 = and_ln6_reg_217) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            grp_fu_72_p1 <= ap_const_lv64_3FE0000000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_72_p1 <= ap_const_lv64_3FD0000000000000;
        else 
            grp_fu_72_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln6_1_fu_116_p2 <= "1" when (trunc_ln6_fu_106_p1 = ap_const_lv23_0) else "0";
    icmp_ln6_fu_110_p2 <= "0" when (tmp_fu_96_p4 = ap_const_lv8_FF) else "1";
    or_ln6_fu_122_p2 <= (icmp_ln6_fu_110_p2 or icmp_ln6_1_fu_116_p2);
    select_ln10_fu_187_p3 <= 
        grp_fu_38_p1 when (and_ln10_3_reg_249(0) = '1') else 
        select_ln8_fu_180_p3;
    select_ln6_fu_194_p3 <= 
        ap_const_lv32_0 when (and_ln6_reg_217(0) = '1') else 
        select_ln10_fu_187_p3;
    select_ln8_fu_180_p3 <= 
        vec_assign_reg_254 when (and_ln8_2_fu_176_p2(0) = '1') else 
        ap_const_lv32_3F800000;
    tmp_fu_96_p4 <= bitcast_ln6_fu_93_p1(30 downto 23);
    trunc_ln6_fu_106_p1 <= bitcast_ln6_fu_93_p1(23 - 1 downto 0);
    xor_ln6_fu_145_p2 <= (ap_const_lv1_1 xor and_ln6_reg_217);
    xor_ln8_fu_150_p2 <= (ap_const_lv1_1 xor and_ln8_1_reg_223);
end behav;
